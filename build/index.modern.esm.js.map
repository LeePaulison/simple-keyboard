{"version":3,"file":"index.modern.esm.js","mappings":"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weC,WAAO,GAevB,U,oiDC2FA,QAzkBsB,WAiCnB,O,EAtBD,SAAAgH,EAAA/G,GAA8D,IAAAgH,EAAA,KAAhD5G,EAAQJ,EAARI,SAAUH,EAAUD,EAAVC,WAOtB,G,4FAPgCI,CAAA,KAAA0G,GAAAzG,EAAA,0BAAAA,EAAA,wBAAAA,EAAA,kBARoB,MAAIA,EAAA,kBAC7C,IAAEA,EAAA,oBACD,GAAKA,EAAA,uBACF,GAAKA,EAAA,sBA8IL,IAAI2G,IAAI,CAEvB,YACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OAGA,QACA,SACA,YACA,MACA,QACA,YACA,aACA,UACA,YACA,SACA,SACA,OACA,MACA,SACA,WAGA,YACA,aACA,cACA,eACA,UACA,WACA,WACA,YACA,WAGA,QACA,QACA,cACA,eACA,YACA,YACA,QACA,QACA,SACA,QAGA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,MAGA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YACA,iBACA,iBACA,eACA,gBACA,cAGA,aACA,QACA,cACA,iBACA3G,EAAA,qBAmTc,SAAC4F,GACf,OACEA,EAAEgB,QACFhB,EAAEiB,SACFjB,EAAEkB,UACF,CAAC,MAAO,WAAY,MAAO,UAAW,YAAa,YAAa,cAAcvG,SAC5EqF,EAAEmB,MAAQnB,EAAEvF,KAAOqG,EAAKM,aAAapB,aAAC,EAADA,EAAGqB,SAG9C,GAvjBE9G,KAAKL,SAAWA,EAChBK,KAAKR,WAAaA,EAEdQ,KAAKR,cAAgBQ,KAAKR,aAAauH,OAAQ,KAAAC,EACjDhH,KAAKiH,YAA8B,QAAjBD,EAAAhH,KAAKR,oBAAY,IAAAwH,GAAQ,QAARA,EAAjBA,EAAmBD,cAAM,IAAAC,GAAS,QAATA,EAAzBA,EAAA,eAAkC,IAAAA,OAAA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","sources":["webpack://@aac/simple-keyboard/./src/lib/services/Utilities.ts","webpack://@aac/simple-keyboard/./src/lib/services/PhysicalKeyboard.ts","webpack://@aac/simple-keyboard/./src/lib/services/KeyboardLayout.ts","webpack://@aac/simple-keyboard/./src/lib/components/CandidateBox.ts","webpack://@aac/simple-keyboard/./src/lib/components/Keyboard.ts","webpack://@aac/simple-keyboard/./src/lib/index.modern.ts"],"sourcesContent":["import { KeyboardInput } from './../interfaces';\r\nimport { KeyboardOptions, UtilitiesParams } from '../interfaces';\r\n\r\n/**\r\n * Utility Service\r\n */\r\nclass Utilities {\r\n  getOptions: () => KeyboardOptions;\r\n  getCaretPosition: () => number | null;\r\n  getCaretPositionEnd: () => number | null;\r\n  dispatch: any;\r\n  maxLengthReached!: boolean;\r\n\r\n  /**\r\n   * Creates an instance of the Utility service\r\n   */\r\n  constructor({ getOptions, getCaretPosition, getCaretPositionEnd, dispatch }: UtilitiesParams) {\r\n    this.getOptions = getOptions;\r\n    this.getCaretPosition = getCaretPosition;\r\n    this.getCaretPositionEnd = getCaretPositionEnd;\r\n    this.dispatch = dispatch;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(Utilities, this);\r\n  }\r\n\r\n  /**\r\n   * Retrieve button type\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The button type\r\n   */\r\n  getButtonType(button: string): string {\r\n    return button.includes('{') && button.includes('}') && button !== '{//}' ? 'functionBtn' : 'standardBtn';\r\n  }\r\n\r\n  /**\r\n   * Adds default classes to a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The classes to be added to the button\r\n   */\r\n  getButtonClass(button: string): string {\r\n    const buttonTypeClass = this.getButtonType(button);\r\n    const buttonWithoutBraces = button.replace('{', '').replace('}', '');\r\n    let buttonNormalized = '';\r\n\r\n    if (buttonTypeClass !== 'standardBtn') buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\r\n\r\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\r\n  }\r\n\r\n  /**\r\n   * Default button display labels\r\n   */\r\n  getDefaultDisplay() {\r\n    return {\r\n      '{bksp}': 'backspace',\r\n      '{backspace}': 'backspace',\r\n      '{enter}': '< enter',\r\n      '{shift}': 'shift',\r\n      '{shiftleft}': 'shift',\r\n      '{shiftright}': 'shift',\r\n      '{alt}': 'alt',\r\n      '{s}': 'shift',\r\n      '{tab}': 'tab',\r\n      '{lock}': 'caps',\r\n      '{capslock}': 'caps',\r\n      '{accept}': 'Submit',\r\n      '{space}': ' ',\r\n      '{//}': ' ',\r\n      '{esc}': 'esc',\r\n      '{escape}': 'esc',\r\n      '{f1}': 'f1',\r\n      '{f2}': 'f2',\r\n      '{f3}': 'f3',\r\n      '{f4}': 'f4',\r\n      '{f5}': 'f5',\r\n      '{f6}': 'f6',\r\n      '{f7}': 'f7',\r\n      '{f8}': 'f8',\r\n      '{f9}': 'f9',\r\n      '{f10}': 'f10',\r\n      '{f11}': 'f11',\r\n      '{f12}': 'f12',\r\n      '{numpaddivide}': '/',\r\n      '{numlock}': 'lock',\r\n      '{arrowup}': '↑',\r\n      '{arrowleft}': '←',\r\n      '{arrowdown}': '↓',\r\n      '{arrowright}': '→',\r\n      '{prtscr}': 'print',\r\n      '{scrolllock}': 'scroll',\r\n      '{pause}': 'pause',\r\n      '{insert}': 'ins',\r\n      '{home}': 'home',\r\n      '{pageup}': 'up',\r\n      '{delete}': 'del',\r\n      '{forwarddelete}': 'del',\r\n      '{end}': 'end',\r\n      '{pagedown}': 'down',\r\n      '{numpadmultiply}': '*',\r\n      '{numpadsubtract}': '-',\r\n      '{numpadadd}': '+',\r\n      '{numpadenter}': 'enter',\r\n      '{period}': '.',\r\n      '{numpaddecimal}': '.',\r\n      '{numpad0}': '0',\r\n      '{numpad1}': '1',\r\n      '{numpad2}': '2',\r\n      '{numpad3}': '3',\r\n      '{numpad4}': '4',\r\n      '{numpad5}': '5',\r\n      '{numpad6}': '6',\r\n      '{numpad7}': '7',\r\n      '{numpad8}': '8',\r\n      '{numpad9}': '9',\r\n    };\r\n  }\r\n  /**\r\n   * Returns the display (label) name for a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {object} display The provided display option\r\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\r\n   */\r\n  getButtonDisplayName(button: string, display: KeyboardOptions['display'], mergeDisplay = false) {\r\n    if (mergeDisplay) {\r\n      display = Object.assign({}, this.getDefaultDisplay(), display);\r\n    } else {\r\n      display = display || this.getDefaultDisplay();\r\n    }\r\n\r\n    return display[button] || button;\r\n  }\r\n\r\n  /**\r\n   * Returns the updated input resulting from clicking a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {string} input The input string\r\n   * @param  {number} caretPos The cursor's current position\r\n   * @param  {number} caretPosEnd The cursor's current end position\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  getUpdatedInput(button: string, input: string, caretPos: any, caretPosEnd = caretPos, moveCaret = false) {\r\n    const options = this.getOptions();\r\n    const commonParams: [number | undefined, number | undefined, boolean] = [caretPos, caretPosEnd, moveCaret];\r\n\r\n    let output = input;\r\n\r\n    if ((button === '{bksp}' || button === '{backspace}') && output.length > 0) {\r\n      output = this.removeAt(output, ...commonParams);\r\n    } else if ((button === '{delete}' || button === '{forwarddelete}') && output.length > 0) {\r\n      output = this.removeForwardsAt(output, ...commonParams);\r\n    } else if (button === '{space}') output = this.addStringAt(output, ' ', ...commonParams);\r\n    else if (button === '{tab}' && !(typeof options.tabCharOnTab === 'boolean' && options.tabCharOnTab === false)) {\r\n      output = this.addStringAt(output, '\\t', ...commonParams);\r\n    } else if ((button === '{enter}' || button === '{numpadenter}') && options.newLineOnEnter)\r\n      output = this.addStringAt(output, '\\n', ...commonParams);\r\n    else if (button.includes('numpad') && Number.isInteger(Number(button[button.length - 2]))) {\r\n      output = this.addStringAt(output, button[button.length - 2], ...commonParams);\r\n    } else if (button === '{numpaddivide}') output = this.addStringAt(output, '/', ...commonParams);\r\n    else if (button === '{numpadmultiply}') output = this.addStringAt(output, '*', ...commonParams);\r\n    else if (button === '{numpadsubtract}') output = this.addStringAt(output, '-', ...commonParams);\r\n    else if (button === '{numpadadd}') output = this.addStringAt(output, '+', ...commonParams);\r\n    else if (button === '{numpaddecimal}') output = this.addStringAt(output, '.', ...commonParams);\r\n    else if (button === '{' || button === '}') output = this.addStringAt(output, button, ...commonParams);\r\n    else if (!button.includes('{') && !button.includes('}')) output = this.addStringAt(output, button, ...commonParams);\r\n\r\n    if (options.debug) {\r\n      console.log('Input will be: ' + output);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Moves the cursor position by a given amount\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPos(length: number, minus = false) {\r\n    const newCaretPos = this.updateCaretPosAction(length, minus);\r\n\r\n    this.dispatch((instance: any) => {\r\n      instance.setCaretPosition(newCaretPos);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Action method of updateCaretPos\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPosAction(length: number, minus = false) {\r\n    const options = this.getOptions();\r\n    let caretPosition = this.getCaretPosition();\r\n\r\n    if (caretPosition != null) {\r\n      if (minus) {\r\n        if (caretPosition > 0) caretPosition = caretPosition - length;\r\n      } else {\r\n        caretPosition = caretPosition + length;\r\n      }\r\n    }\r\n\r\n    if (options.debug) {\r\n      console.log('Caret at:', caretPosition);\r\n    }\r\n\r\n    return caretPosition;\r\n  }\r\n\r\n  /**\r\n   * Adds a string to the input at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {string} str The string to add\r\n   * @param  {number} position The (cursor) position where the string should be added\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  addStringAt(source: string, str: string, position = source.length, positionEnd = source.length, moveCaret = false) {\r\n    let output;\r\n\r\n    if (!position && position !== 0) {\r\n      output = source + str;\r\n    } else {\r\n      output = [source.slice(0, position), str, source.slice(positionEnd)].join('');\r\n\r\n      /**\r\n       * Avoid caret position change when maxLength is set\r\n       */\r\n      if (!this.isMaxLengthReached()) {\r\n        if (moveCaret) this.updateCaretPos(str.length);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Check whether the button is a standard button\r\n   */\r\n  isStandardButton = (button: string) => button && !(button[0] === '{' && button[button.length - 1] === '}');\r\n\r\n  /**\r\n   * Removes an amount of characters before a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  removeAt(source: string, position = source.length, positionEnd = source.length, moveCaret = false) {\r\n    if (position === 0 && positionEnd === 0) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      let prevTwoChars;\r\n      let emojiMatched;\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      if (position && position >= 0) {\r\n        prevTwoChars = source.substring(position - 2, position);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.substr(0, position - 2) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.substr(0, position - 1) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      } else {\r\n        prevTwoChars = source.slice(-2);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.slice(0, -2);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.slice(0, -1);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch((instance: any) => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Removes an amount of characters after a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   */\r\n  removeForwardsAt(\r\n    source: string,\r\n    position: number = source.length,\r\n    positionEnd: number = source.length,\r\n    moveCaret = false\r\n  ) {\r\n    if (!source?.length || position === null) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      const nextTwoChars = source.substring(position, position + 2);\r\n      const emojiMatched = nextTwoChars.match(emojiMatchedReg);\r\n\r\n      if (emojiMatched) {\r\n        output = source.substr(0, position) + source.substr(position + 2);\r\n      } else {\r\n        output = source.substr(0, position) + source.substr(position + 1);\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch((instance: any) => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\r\n   *\r\n   * @param  {object} inputObj\r\n   * @param  {string} updatedInput\r\n   */\r\n  handleMaxLength(inputObj: KeyboardInput, updatedInput: string) {\r\n    const options = this.getOptions();\r\n    const maxLength = options.maxLength;\r\n    const currentInput = inputObj[options.inputName || 'default'];\r\n    const condition = updatedInput.length - 1 >= maxLength;\r\n\r\n    if (\r\n      /**\r\n       * If pressing this button won't add more characters\r\n       * We exit out of this limiter function\r\n       */\r\n      updatedInput.length <= currentInput.length\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (Number.isInteger(maxLength)) {\r\n      if (options.debug) {\r\n        console.log('maxLength (num) reached:', condition);\r\n      }\r\n\r\n      if (condition) {\r\n        /**\r\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\r\n         */\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (typeof maxLength === 'object') {\r\n      const condition = updatedInput.length - 1 >= maxLength[options.inputName || 'default'];\r\n\r\n      if (options.debug) {\r\n        console.log('maxLength (obj) reached:', condition);\r\n      }\r\n\r\n      if (condition) {\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of maxLengthReached\r\n   */\r\n  isMaxLengthReached() {\r\n    return Boolean(this.maxLengthReached);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a touch device is being used\r\n   */\r\n  isTouchDevice() {\r\n    return 'ontouchstart' in window || navigator.maxTouchPoints;\r\n  }\r\n\r\n  /**\r\n   * Determines whether pointer events are supported\r\n   */\r\n  pointerEventsSupported() {\r\n    return !!window.PointerEvent;\r\n  }\r\n\r\n  /**\r\n   * Bind all methods in a given class\r\n   */\r\n\r\n  static bindMethods(myClass: any, instance: any) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (const myMethod of Object.getOwnPropertyNames(myClass.prototype)) {\r\n      const excludeMethod = myMethod === 'constructor' || myMethod === 'bindMethods';\r\n      if (!excludeMethod) {\r\n        instance[myMethod] = instance[myMethod].bind(instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transforms an arbitrary string to camelCase\r\n   *\r\n   * @param  {string} str The string to transform.\r\n   */\r\n  camelCase(str: string): string {\r\n    if (!str) return '';\r\n\r\n    return str\r\n      .toLowerCase()\r\n      .trim()\r\n      .split(/[.\\-_\\s]/g)\r\n      .reduce((str, word) => (word.length ? str + word[0].toUpperCase() + word.slice(1) : str));\r\n  }\r\n\r\n  /**\r\n   * Split array into chunks\r\n   */\r\n  chunkArray<T>(arr: T[], size: number): T[][] {\r\n    return [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));\r\n  }\r\n\r\n  /**\r\n   * Escape regex input\r\n   */\r\n  escapeRegex(str: string) {\r\n    return str.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n  }\r\n\r\n  /**\r\n   * Calculate caret position offset when using rtl option\r\n   */\r\n  getRtlOffset(index: number, input: string) {\r\n    let newIndex = index;\r\n    const startMarkerIndex = input.indexOf('\\u202B');\r\n    const endMarkerIndex = input.indexOf('\\u202C');\r\n\r\n    if (startMarkerIndex < index && startMarkerIndex != -1) {\r\n      newIndex--;\r\n    }\r\n    if (endMarkerIndex < index && startMarkerIndex != -1) {\r\n      newIndex--;\r\n    }\r\n\r\n    return newIndex < 0 ? 0 : newIndex;\r\n  }\r\n\r\n  /**\r\n   * Reusable empty function\r\n   */\r\n  static noop = () => {};\r\n\r\n  /**\r\n   * Check if a function is a constructor\r\n   */\r\n  isConstructor(f: any) {\r\n    try {\r\n      Reflect.construct(String, [], f);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default Utilities;\r\n","import { KeyboardOptions, PhysicalKeyboardParams } from '../interfaces';\r\nimport Utilities from '../services/Utilities';\r\nimport { getDefaultLayout } from '../services/KeyboardLayout';\r\n\r\n/**\r\n * Layout Key Mapping Interface\r\n */\r\ninterface LayoutKeyMapping {\r\n  normal: string | number;\r\n  shift: string | number;\r\n}\r\n\r\n/**\r\n * Physical Keyboard Service\r\n */\r\nclass PhysicalKeyboard {\r\n  getOptions: () => KeyboardOptions;\r\n  dispatch: any;\r\n  layoutJSON: Record<string, LayoutKeyMapping> | null = null;\r\n  lastLayout = '';\r\n  shiftActive = false;\r\n  capslockActive = false;\r\n\r\n  /**\r\n   * Creates an instance of the PhysicalKeyboard service\r\n   */\r\n  constructor({ dispatch, getOptions }: PhysicalKeyboardParams) {\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.dispatch = dispatch;\r\n    this.getOptions = getOptions;\r\n\r\n    if (this.getOptions() && this.getOptions().layout) {\r\n      this.lastLayout = this.getOptions()?.layout?.default?.[1] || '';\r\n      const layout = this.getOptions().layout;\r\n      if (layout) {\r\n        this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(layout));\r\n      }\r\n    } else {\r\n      this.lastLayout = getDefaultLayout().default[1];\r\n      this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(getDefaultLayout()));\r\n    }\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(PhysicalKeyboard, this);\r\n  }\r\n\r\n  handleHighlightKeyDown(e: KeyboardEvent) {\r\n    const options = this.getOptions();\r\n\r\n    // if (options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)) {\r\n    //   e.preventDefault();\r\n    //   e.stopImmediatePropagation();\r\n    // }\r\n\r\n    if ((e.code === 'ShiftLeft' || e.code === 'ShiftRight') && !this.shiftActive) {\r\n      this.shiftActive = !this.shiftActive;\r\n    }\r\n\r\n    if (e.code === 'CapsLock') {\r\n      this.capslockActive = !this.capslockActive;\r\n    }\r\n\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\r\n\r\n    this.dispatch((instance: any) => {\r\n      const standardButtonPressed = instance.getButtonElement(buttonPressed);\r\n      const functionButtonPressed = instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      let buttonDOM;\r\n      let buttonName: string;\r\n\r\n      if (standardButtonPressed) {\r\n        buttonDOM = standardButtonPressed;\r\n        buttonName = buttonPressed;\r\n      } else if (functionButtonPressed) {\r\n        buttonDOM = functionButtonPressed;\r\n        buttonName = `{${buttonPressed}}`;\r\n      } else {\r\n        return;\r\n      }\r\n\r\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\r\n        buttonElement.style.background = options.physicalKeyboardHighlightBgColor || '#dadce4';\r\n        buttonElement.style.color = options.physicalKeyboardHighlightTextColor || 'black';\r\n      };\r\n\r\n      if (buttonDOM) {\r\n        if (Array.isArray(buttonDOM)) {\r\n          buttonDOM.forEach((buttonElement) => applyButtonStyle(buttonElement));\r\n\r\n          // Even though we have an array of buttons, we just want to press one of them\r\n          if (options.physicalKeyboardHighlightPress) {\r\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n              buttonDOM[0]?.onpointerdown?.(e);\r\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\r\n              buttonDOM[0]?.click();\r\n            } else {\r\n              instance.handleButtonClicked(buttonName, e);\r\n            }\r\n          }\r\n        } else {\r\n          applyButtonStyle(buttonDOM);\r\n\r\n          if (options.physicalKeyboardHighlightPress) {\r\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n              buttonDOM?.onpointerdown?.(e);\r\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\r\n              buttonDOM.click();\r\n            } else {\r\n              instance.handleButtonClicked(buttonName, e);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  handleHighlightKeyUp(e: KeyboardEvent) {\r\n    const options = this.getOptions();\r\n\r\n    // if (options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)) {\r\n    //   e.preventDefault();\r\n    //   e.stopImmediatePropagation();\r\n    // }\r\n\r\n    if (e.code === 'ShiftLeft' || e.code === 'ShiftRight') {\r\n      this.shiftActive = false;\r\n    }\r\n\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\r\n\r\n    this.dispatch((instance: any) => {\r\n      const buttonDOM = instance.getButtonElement(buttonPressed) || instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\r\n        if (buttonElement.removeAttribute) {\r\n          buttonElement.removeAttribute('style');\r\n        }\r\n      };\r\n\r\n      if (buttonDOM) {\r\n        if (Array.isArray(buttonDOM)) {\r\n          buttonDOM.forEach((buttonElement) => applyButtonStyle(buttonElement));\r\n\r\n          // Even though we have an array of buttons, we just want to press one of them\r\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n            buttonDOM[0]?.onpointerup?.(e);\r\n          }\r\n        } else {\r\n          applyButtonStyle(buttonDOM);\r\n\r\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n            buttonDOM?.onpointerup?.(e);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  STANDARD_CODES = new Set([\r\n    // Alphanumeric\r\n    'Backquote',\r\n    'Digit0',\r\n    'Digit1',\r\n    'Digit2',\r\n    'Digit3',\r\n    'Digit4',\r\n    'Digit5',\r\n    'Digit6',\r\n    'Digit7',\r\n    'Digit8',\r\n    'Digit9',\r\n    'KeyA',\r\n    'KeyB',\r\n    'KeyC',\r\n    'KeyD',\r\n    'KeyE',\r\n    'KeyF',\r\n    'KeyG',\r\n    'KeyH',\r\n    'KeyI',\r\n    'KeyJ',\r\n    'KeyK',\r\n    'KeyL',\r\n    'KeyM',\r\n    'KeyN',\r\n    'KeyO',\r\n    'KeyP',\r\n    'KeyQ',\r\n    'KeyR',\r\n    'KeyS',\r\n    'KeyT',\r\n    'KeyU',\r\n    'KeyV',\r\n    'KeyW',\r\n    'KeyX',\r\n    'KeyY',\r\n    'KeyZ',\r\n\r\n    // Control & nav\r\n    'Enter',\r\n    'Escape',\r\n    'Backspace',\r\n    'Tab',\r\n    'Space',\r\n    'ArrowLeft',\r\n    'ArrowRight',\r\n    'ArrowUp',\r\n    'ArrowDown',\r\n    'Delete',\r\n    'Insert',\r\n    'Home',\r\n    'End',\r\n    'PageUp',\r\n    'PageDown',\r\n\r\n    // Modifier keys\r\n    'ShiftLeft',\r\n    'ShiftRight',\r\n    'ControlLeft',\r\n    'ControlRight',\r\n    'AltLeft',\r\n    'AltRight',\r\n    'MetaLeft',\r\n    'MetaRight',\r\n    'CapsLock',\r\n\r\n    // Symbols & punctuation\r\n    'Minus',\r\n    'Equal',\r\n    'BracketLeft',\r\n    'BracketRight',\r\n    'Backslash',\r\n    'Semicolon',\r\n    'Quote',\r\n    'Comma',\r\n    'Period',\r\n    'Slash',\r\n\r\n    // Function keys\r\n    'F1',\r\n    'F2',\r\n    'F3',\r\n    'F4',\r\n    'F5',\r\n    'F6',\r\n    'F7',\r\n    'F8',\r\n    'F9',\r\n    'F10',\r\n    'F11',\r\n    'F12',\r\n\r\n    // Numpad\r\n    'NumLock',\r\n    'Numpad0',\r\n    'Numpad1',\r\n    'Numpad2',\r\n    'Numpad3',\r\n    'Numpad4',\r\n    'Numpad5',\r\n    'Numpad6',\r\n    'Numpad7',\r\n    'Numpad8',\r\n    'Numpad9',\r\n    'NumpadAdd',\r\n    'NumpadSubtract',\r\n    'NumpadMultiply',\r\n    'NumpadDivide',\r\n    'NumpadDecimal',\r\n    'NumpadEnter',\r\n\r\n    // Misc\r\n    'ScrollLock',\r\n    'Pause',\r\n    'PrintScreen',\r\n    'ContextMenu',\r\n  ]);\r\n\r\n  /**\r\n   * Normalize a code string to match the official `e.code` spec format.\r\n   * Returns null if no match is found.\r\n   */\r\n  normalizeToStandardCode(input: string): string | null {\r\n    if (!input || typeof input !== 'string') return null;\r\n\r\n    if (this.STANDARD_CODES.has(input)) return input;\r\n\r\n    const upper = input.trim();\r\n    for (const code of this.STANDARD_CODES) {\r\n      if (code.toLowerCase() === upper.toLowerCase()) {\r\n        return code;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  normalizeOutput(rawKey: string): string {\r\n    const normalizeKeyMap: Record<string, string> = {\r\n      shiftleft: 'shift',\r\n      shiftright: 'shift',\r\n      controlleft: 'ctrl',\r\n      controlright: 'ctrl',\r\n      altleft: 'alt',\r\n      altright: 'alt',\r\n      metaleft: 'meta',\r\n      metaright: 'meta',\r\n      backspace: 'bksp',\r\n      capslock: 'lock',\r\n      enter: 'enter',\r\n      tab: 'tab',\r\n    };\r\n\r\n    const key = rawKey.toLowerCase();\r\n    return normalizeKeyMap[key] || (key.length > 1 ? key : rawKey);\r\n  }\r\n\r\n  /**\r\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\r\n   * @param  {object} e The KeyboardEvent\r\n   * @returns {string} The simple-keyboard layout key\r\n   */\r\n  getSimpleKeyboardLayoutKey(e: KeyboardEvent): string {\r\n    let output = '';\r\n\r\n    const options = this.getOptions();\r\n    const currentLayout = options?.layout?.default?.[1] ?? getDefaultLayout().default[1];\r\n    if (this.lastLayout !== currentLayout) {\r\n      this.lastLayout = currentLayout || '';\r\n      const layout = options?.layout ?? getDefaultLayout();\r\n      this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(layout));\r\n    }\r\n\r\n    const eCode = this.normalizeToStandardCode(e.code);\r\n\r\n    // if we have a valid code and it's in the layout, return early\r\n    if (this.layoutJSON && eCode && this.layoutJSON[eCode]) {\r\n      const layoutEntry = this.layoutJSON[eCode];\r\n      output = this.shiftActive || this.capslockActive ? layoutEntry.shift.toString() : layoutEntry.normal.toString();\r\n\r\n      const normalized = this.normalizeOutput(output);\r\n      return normalized;\r\n    }\r\n\r\n    // fallback path for known safe keys\r\n    const fallbackKeys = new Set(['backspace', 'enter', 'tab', 'escape']);\r\n    const key = (e.key || '').toLowerCase();\r\n    if (fallbackKeys.has(key)) {\r\n      output = key;\r\n      const normalized = this.normalizeOutput(output);\r\n      return normalized;\r\n    }\r\n\r\n    // unmapped key — log it and return blank\r\n    console.warn('[simple-keyboard][Edge Case Triggered] Unmapped key event:', {\r\n      code: e.code,\r\n      key: e.key,\r\n      keyCode: e.keyCode,\r\n      layoutJSON: this.layoutJSON,\r\n      userAgent: navigator.userAgent, // Browser + OS info\r\n      platform: navigator.platform, // OS-level platform\r\n      language: navigator.language, // Active input language (e.g., \"ko-KR\")\r\n      imeMode:\r\n        document.activeElement && 'inputMode' in document.activeElement\r\n          ? (document.activeElement as HTMLInputElement | HTMLTextAreaElement).inputMode\r\n          : 'unknown', // Input method\r\n      isEditable: (document.activeElement as HTMLElement)?.isContentEditable || false, // Useful for composition\r\n      time: new Date().toISOString(),\r\n    });\r\n\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * Retrieve key from keyCode\r\n   */\r\n  keyCodeToKey(keyCode: number): string {\r\n    return (\r\n      {\r\n        8: 'Backspace',\r\n        9: 'Tab',\r\n        13: 'Enter',\r\n        16: 'Shift',\r\n        17: 'Ctrl',\r\n        18: 'Alt',\r\n        19: 'Pause',\r\n        20: 'CapsLock',\r\n        27: 'Esc',\r\n        32: 'Space',\r\n        33: 'PageUp',\r\n        34: 'PageDown',\r\n        35: 'End',\r\n        36: 'Home',\r\n        37: 'ArrowLeft',\r\n        38: 'ArrowUp',\r\n        39: 'ArrowRight',\r\n        40: 'ArrowDown',\r\n        45: 'Insert',\r\n        46: 'Delete',\r\n        48: '0',\r\n        49: '1',\r\n        50: '2',\r\n        51: '3',\r\n        52: '4',\r\n        53: '5',\r\n        54: '6',\r\n        55: '7',\r\n        56: '8',\r\n        57: '9',\r\n        65: 'A',\r\n        66: 'B',\r\n        67: 'C',\r\n        68: 'D',\r\n        69: 'E',\r\n        70: 'F',\r\n        71: 'G',\r\n        72: 'H',\r\n        73: 'I',\r\n        74: 'J',\r\n        75: 'K',\r\n        76: 'L',\r\n        77: 'M',\r\n        78: 'N',\r\n        79: 'O',\r\n        80: 'P',\r\n        81: 'Q',\r\n        82: 'R',\r\n        83: 'S',\r\n        84: 'T',\r\n        85: 'U',\r\n        86: 'V',\r\n        87: 'W',\r\n        88: 'X',\r\n        89: 'Y',\r\n        90: 'Z',\r\n        91: 'Meta',\r\n        96: 'Numpad0',\r\n        97: 'Numpad1',\r\n        98: 'Numpad2',\r\n        99: 'Numpad3',\r\n        100: 'Numpad4',\r\n        101: 'Numpad5',\r\n        102: 'Numpad6',\r\n        103: 'Numpad7',\r\n        104: 'Numpad8',\r\n        105: 'Numpad9',\r\n        106: 'NumpadMultiply',\r\n        107: 'NumpadAdd',\r\n        109: 'NumpadSubtract',\r\n        110: 'NumpadDecimal',\r\n        111: 'NumpadDivide',\r\n        112: 'F1',\r\n        113: 'F2',\r\n        114: 'F3',\r\n        115: 'F4',\r\n        116: 'F5',\r\n        117: 'F6',\r\n        118: 'F7',\r\n        119: 'F8',\r\n        120: 'F9',\r\n        121: 'F10',\r\n        122: 'F11',\r\n        123: 'F12',\r\n        144: 'NumLock',\r\n        145: 'ScrollLock',\r\n        186: ';',\r\n        187: '=',\r\n        188: ',',\r\n        189: '-',\r\n        190: '.',\r\n        191: '/',\r\n        192: '`',\r\n        219: '[',\r\n        220: '\\\\',\r\n        221: ']',\r\n        222: \"'\",\r\n      }[keyCode] || ''\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Extracts and pads a layout object\r\n   * @param  {object} layout The layout object\r\n   * @returns {object} The layout object with padding\r\n   */\r\n  extractAndPadLayout(layout: Record<string, string[]>): Record<string, (string | number)[][]> {\r\n    const qwertyRowLengths = [14, 14, 13, 12, 3]; // Number of keys per QWERTY row\r\n\r\n    const processedLayout: Record<string, (string | number)[][]> = { default: [], shift: [] };\r\n\r\n    for (const type of ['default', 'shift']) {\r\n      if (!layout[type]) continue; // Skip if layout type is missing\r\n\r\n      const rows = layout[type].map((row) => row.split(' '));\r\n\r\n      for (let i = 0; i < qwertyRowLengths.length; i++) {\r\n        processedLayout[type][i] = rows[i] ? [...rows[i]] : [];\r\n        while (processedLayout[type][i].length < qwertyRowLengths[i]) {\r\n          processedLayout[type][i].push(-1); // Fill missing spots\r\n        }\r\n      }\r\n    }\r\n\r\n    return processedLayout;\r\n  }\r\n\r\n  /**\r\n   * Maps a layout object to event codes\r\n   * @param  {object} layout The layout object\r\n   * @returns {object} The layout object with event codes\r\n   */\r\n\r\n  mapLayoutToEventCodes(layout: Record<string, (string | number)[][]>): Record<string, LayoutKeyMapping> {\r\n    const mappedLayout: Record<string, LayoutKeyMapping> = {};\r\n\r\n    const qwertyRows = [\r\n      [\r\n        'Backquote',\r\n        'Digit1',\r\n        'Digit2',\r\n        'Digit3',\r\n        'Digit4',\r\n        'Digit5',\r\n        'Digit6',\r\n        'Digit7',\r\n        'Digit8',\r\n        'Digit9',\r\n        'Digit0',\r\n        'Minus',\r\n        'Equal',\r\n        'Backspace',\r\n      ],\r\n      [\r\n        'Tab',\r\n        'KeyQ',\r\n        'KeyW',\r\n        'KeyE',\r\n        'KeyR',\r\n        'KeyT',\r\n        'KeyY',\r\n        'KeyU',\r\n        'KeyI',\r\n        'KeyO',\r\n        'KeyP',\r\n        'BracketLeft',\r\n        'BracketRight',\r\n        'Backslash',\r\n      ],\r\n      [\r\n        'CapsLock',\r\n        'KeyA',\r\n        'KeyS',\r\n        'KeyD',\r\n        'KeyF',\r\n        'KeyG',\r\n        'KeyH',\r\n        'KeyJ',\r\n        'KeyK',\r\n        'KeyL',\r\n        'Semicolon',\r\n        'Quote',\r\n        'Enter',\r\n      ],\r\n      ['ShiftLeft', 'KeyZ', 'KeyX', 'KeyC', 'KeyV', 'KeyB', 'KeyN', 'KeyM', 'Comma', 'Period', 'Slash', 'ShiftRight'],\r\n      ['ControlLeft', 'AltLeft', 'Space'],\r\n    ];\r\n\r\n    for (let rowIndex = 0; rowIndex < qwertyRows.length; rowIndex++) {\r\n      for (let colIndex = 0; colIndex < qwertyRows[rowIndex].length; colIndex++) {\r\n        const eventCode = qwertyRows[rowIndex][colIndex];\r\n        const normalKey = layout.default[rowIndex][colIndex] ?? '';\r\n        const shiftKey = layout.shift[rowIndex][colIndex] ?? '';\r\n\r\n        mappedLayout[eventCode] = {\r\n          normal: normalKey !== -1 ? normalKey : '',\r\n          shift: shiftKey !== -1 ? shiftKey : '',\r\n        };\r\n      }\r\n    }\r\n\r\n    return mappedLayout;\r\n  }\r\n\r\n  isModifierKey = (e: KeyboardEvent): boolean => {\r\n    return (\r\n      e.altKey ||\r\n      e.ctrlKey ||\r\n      e.shiftKey ||\r\n      ['Tab', 'CapsLock', 'Esc', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(\r\n        e.code || e.key || this.keyCodeToKey(e?.keyCode)\r\n      )\r\n    );\r\n  };\r\n}\r\n\r\nexport default PhysicalKeyboard;\r\n","import { KeyboardLayoutObject } from \"../interfaces\";\r\n\r\nexport const getDefaultLayout = (): KeyboardLayoutObject => {\r\n  return {\r\n    default: [\r\n      \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\r\n      \"{tab} q w e r t y u i o p [ ] \\\\\",\r\n      \"{lock} a s d f g h j k l ; ' {enter}\",\r\n      \"{shift} z x c v b n m , . / {shift}\",\r\n      \".com @ {space}\",\r\n    ],\r\n    shift: [\r\n      \"~ ! @ # $ % ^ & * ( ) _ + {bksp}\",\r\n      \"{tab} Q W E R T Y U I O P { } |\",\r\n      '{lock} A S D F G H J K L : \" {enter}',\r\n      \"{shift} Z X C V B N M < > ? {shift}\",\r\n      \".com @ {space}\",\r\n    ],\r\n  };\r\n};\r\n","import './css/CandidateBox.css';\r\nimport Utilities from '../services/Utilities';\r\nimport { CandidateBoxParams, CandidateBoxRenderParams, CandidateBoxShowParams, KeyboardOptions } from './../interfaces';\r\n\r\nclass CandidateBox {\r\n  utilities: Utilities;\r\n  options: KeyboardOptions;\r\n  candidateBoxElement: HTMLDivElement | null = null;\r\n  pageIndex = 0;\r\n  pageSize: number;\r\n  private activeIndex = 0;\r\n  private candidateOptions: HTMLLIElement[] = [];\r\n  private globalLiveRegionElement: HTMLElement | null = document.querySelector('.hg-live-region');\r\n  static isOpen = false;\r\n\r\n  constructor({ utilities, options }: CandidateBoxParams) {\r\n    this.utilities = utilities;\r\n    this.options = options;\r\n    Utilities.bindMethods(CandidateBox, this);\r\n    this.pageSize = this.utilities.getOptions().layoutCandidatesPageSize || 5;\r\n  }\r\n\r\n  destroy(): void {\r\n    if (this.candidateBoxElement) {\r\n      setTimeout(() => {\r\n        if (this.candidateBoxElement) {\r\n          this.candidateBoxElement.remove();\r\n          this.candidateBoxElement = null;\r\n        }\r\n        CandidateBox.isOpen = false;\r\n      }, 30);\r\n    }\r\n\r\n    this.activeIndex = 0;\r\n    this.candidateOptions = [];\r\n\r\n    // Ensure no keyboard nav leaks persist\r\n    const oldListbox = document.querySelector('.hg-candidate-box-list');\r\n    if (oldListbox) {\r\n      oldListbox.replaceWith(oldListbox.cloneNode(true)); // remove all listeners\r\n    }\r\n\r\n    this.pageIndex = 0;\r\n  }\r\n\r\n  show({ candidateValue, targetElement, onSelect }: CandidateBoxShowParams): void {\r\n    if (!candidateValue || !candidateValue.length) return;\r\n\r\n    const candidateListPages = this.utilities.chunkArray(candidateValue.split(' '), this.pageSize);\r\n\r\n    this.renderPage({\r\n      candidateListPages,\r\n      targetElement,\r\n      pageIndex: this.pageIndex,\r\n      nbPages: candidateListPages.length,\r\n      onItemSelected: (selectedCandidate: string, e: MouseEvent) => {\r\n        onSelect(selectedCandidate, e);\r\n        this.destroy();\r\n      },\r\n    });\r\n\r\n    CandidateBox.isOpen = true;\r\n  }\r\n\r\n  renderPage({ candidateListPages, targetElement, pageIndex, nbPages, onItemSelected }: CandidateBoxRenderParams) {\r\n    this.candidateBoxElement?.remove();\r\n\r\n    this.candidateBoxElement = document.createElement('div');\r\n    this.candidateBoxElement.className = 'hg-candidate-box';\r\n    this.candidateBoxElement.setAttribute('role', 'dialog');\r\n    this.candidateBoxElement.setAttribute('aria-label', 'Character Suggestions');\r\n    this.candidateBoxElement.setAttribute('aria-describedby', 'candidate-box-instructions');\r\n\r\n    this.candidateBoxElement.addEventListener('keydown', (e: KeyboardEvent) => {\r\n      if (e.key !== 'Tab') return;\r\n\r\n      const focusable = this.candidateBoxElement?.querySelectorAll<HTMLElement>(\r\n        '[tabindex]:not([tabindex=\"-1\"]), button, [href], input, select, textarea'\r\n      );\r\n\r\n      if (!focusable?.length) return;\r\n\r\n      const first = focusable[0];\r\n      const last = focusable[focusable.length - 1];\r\n\r\n      if (e.shiftKey && document.activeElement === first) {\r\n        e.preventDefault();\r\n        last.focus();\r\n      } else if (!e.shiftKey && document.activeElement === last) {\r\n        e.preventDefault();\r\n        first.focus();\r\n      }\r\n    });\r\n\r\n    const instructionsElement = document.createElement('div');\r\n    instructionsElement.id = 'candidate-box-instructions';\r\n    instructionsElement.classList.add('hg-candidate-box-instructions', 'sr-only');\r\n    instructionsElement.innerHTML = 'Use up and down arrow keys to navigate, Enter to select.';\r\n    this.candidateBoxElement.appendChild(instructionsElement);\r\n\r\n    const candidateListULElement = document.createElement('ul');\r\n    candidateListULElement.className = 'hg-candidate-box-list';\r\n    candidateListULElement.setAttribute('role', 'listbox');\r\n    candidateListULElement.setAttribute('tabindex', '0');\r\n\r\n    candidateListPages[pageIndex].forEach((candidateListItem, i) => {\r\n      const candidateListLIElement = document.createElement('li');\r\n      candidateListLIElement.setAttribute('role', 'option');\r\n      candidateListLIElement.setAttribute('tabindex', '-1');\r\n      candidateListLIElement.setAttribute('aria-selected', i === 0 ? 'true' : 'false');\r\n      candidateListLIElement.id = `candidate-${i}`;\r\n      candidateListLIElement.className = 'hg-candidate-box-list-item';\r\n      candidateListLIElement.innerHTML = this.options.display?.[candidateListItem] || candidateListItem;\r\n\r\n      const getMouseEvent = () => {\r\n        const mouseEvent = new (this.options.useTouchEvents ? TouchEvent : MouseEvent)('click');\r\n        Object.defineProperty(mouseEvent, 'target', { value: candidateListLIElement });\r\n        return mouseEvent;\r\n      };\r\n\r\n      candidateListLIElement.onclick = (e = getMouseEvent() as MouseEvent) => {\r\n        if (this.globalLiveRegionElement) {\r\n          const label = candidateListLIElement.textContent?.trim();\r\n          this.globalLiveRegionElement.textContent = `Inserted: ${label}`;\r\n        }\r\n        onItemSelected(candidateListItem, e);\r\n      };\r\n\r\n      if (this.options.useTouchEvents) {\r\n        candidateListLIElement.ontouchstart = (e: any) => {\r\n          if (this.globalLiveRegionElement) {\r\n            const label = candidateListLIElement.textContent?.trim();\r\n            this.globalLiveRegionElement.textContent = `Inserted: ${label}`;\r\n          }\r\n          onItemSelected(candidateListItem, e || getMouseEvent());\r\n        };\r\n      }\r\n\r\n      candidateListULElement.appendChild(candidateListLIElement);\r\n    });\r\n\r\n    const isPrevBtnElementActive = pageIndex > 0;\r\n    const prevBtnElement = document.createElement('div');\r\n    prevBtnElement.classList.add('hg-candidate-box-prev');\r\n    if (isPrevBtnElementActive) prevBtnElement.classList.add('hg-candidate-box-btn-active');\r\n\r\n    prevBtnElement.onclick = () => {\r\n      if (!isPrevBtnElementActive) return;\r\n      this.renderPage({ candidateListPages, targetElement, pageIndex: pageIndex - 1, nbPages, onItemSelected });\r\n    };\r\n\r\n    const isNextBtnElementActive = pageIndex < nbPages - 1;\r\n    const nextBtnElement = document.createElement('div');\r\n    nextBtnElement.classList.add('hg-candidate-box-next');\r\n    if (isNextBtnElementActive) nextBtnElement.classList.add('hg-candidate-box-btn-active');\r\n\r\n    nextBtnElement.onclick = () => {\r\n      if (!isNextBtnElementActive) return;\r\n      this.renderPage({ candidateListPages, targetElement, pageIndex: pageIndex + 1, nbPages, onItemSelected });\r\n    };\r\n\r\n    this.candidateBoxElement.appendChild(prevBtnElement);\r\n    this.candidateBoxElement.appendChild(candidateListULElement);\r\n    this.candidateBoxElement.appendChild(nextBtnElement);\r\n\r\n    this.candidateBoxElement.addEventListener('keydown', (e: KeyboardEvent) => {\r\n      if (e.key === 'Escape') {\r\n        e.preventDefault();\r\n        this.destroy();\r\n      }\r\n    });\r\n\r\n    targetElement.prepend(this.candidateBoxElement);\r\n\r\n    candidateListULElement.focus();\r\n    this.setupKeyboardNav(candidateListULElement);\r\n  }\r\n\r\n  private setupKeyboardNav(listbox: HTMLUListElement) {\r\n    this.candidateOptions = Array.from(listbox.querySelectorAll('[role=\"option\"]'));\r\n    this.candidateOptions.forEach((option, i) => {\r\n      if (!option.id) option.id = `candidate-${i}`;\r\n    });\r\n\r\n    this.setActiveOption(0);\r\n\r\n    listbox.addEventListener('keydown', (e: KeyboardEvent) => {\r\n      if (e.key === 'ArrowDown') {\r\n        e.preventDefault();\r\n        this.updateActiveIndex((this.activeIndex + 1) % this.candidateOptions.length);\r\n      } else if (e.key === 'ArrowUp') {\r\n        e.preventDefault();\r\n        this.updateActiveIndex((this.activeIndex - 1 + this.candidateOptions.length) % this.candidateOptions.length);\r\n      } else if (e.key === 'Enter' || e.key === ' ') {\r\n        e.preventDefault();\r\n        this.activateSelectedOption();\r\n      }\r\n    });\r\n  }\r\n\r\n  private setActiveOption(index: number): void {\r\n    this.activeIndex = index;\r\n    this.updateActiveIndex(index);\r\n  }\r\n\r\n  private updateActiveIndex(newIndex: number): void {\r\n    const prev = this.candidateOptions[this.activeIndex];\r\n    const next = this.candidateOptions[newIndex];\r\n\r\n    if (prev) {\r\n      prev.setAttribute('aria-selected', 'false');\r\n      prev.classList.remove('active');\r\n    }\r\n\r\n    this.activeIndex = newIndex;\r\n\r\n    if (next) {\r\n      next.setAttribute('aria-selected', 'true');\r\n      next.classList.add('active');\r\n      next.scrollIntoView({ block: 'nearest' });\r\n\r\n      if (this.globalLiveRegionElement) {\r\n        const total = this.candidateOptions.length;\r\n        const label = next.textContent?.trim();\r\n        this.globalLiveRegionElement.textContent = `${newIndex + 1} of ${total}: ${label}`;\r\n      }\r\n\r\n      if (!this.candidateBoxElement) return;\r\n\r\n      const listbox = this.candidateBoxElement.querySelector('.hg-candidate-box-list');\r\n      if (listbox) {\r\n        listbox.setAttribute('aria-activedescendant', next.id);\r\n      }\r\n    }\r\n  }\r\n\r\n  private activateSelectedOption(): void {\r\n    const activeOption = this.candidateOptions[this.activeIndex];\r\n    if (!activeOption) return;\r\n\r\n    // ✅ Update live region before triggering the click\r\n    if (this.globalLiveRegionElement) {\r\n      const label = activeOption.textContent?.trim();\r\n      this.globalLiveRegionElement.textContent = `Inserted: ${label}`;\r\n    }\r\n\r\n    // ✅ Then trigger selection\r\n    activeOption.click();\r\n  }\r\n}\r\n\r\nexport default CandidateBox;\r\n","import './css/Keyboard.css';\r\n\r\nimport { getDefaultLayout } from '../services/KeyboardLayout';\r\nimport PhysicalKeyboard from '../services/PhysicalKeyboard';\r\nimport Utilities from '../services/Utilities';\r\nimport {\r\n  KeyboardOptions,\r\n  KeyboardInput,\r\n  KeyboardButtonElements,\r\n  KeyboardHandlerEvent,\r\n  KeyboardElement,\r\n  SKWindow,\r\n} from '../interfaces';\r\nimport CandidateBox from './CandidateBox';\r\n\r\n/**\r\n * Root class for simple-keyboard.\r\n * This class:\r\n * - Parses the options\r\n * - Renders the rows and buttons\r\n * - Handles button functionality\r\n */\r\nclass SimpleKeyboard {\r\n  input!: KeyboardInput;\r\n  options!: KeyboardOptions;\r\n  utilities!: Utilities;\r\n  caretPosition!: number | null;\r\n  caretPositionEnd!: number | null;\r\n  keyboardDOM!: KeyboardElement;\r\n  keyboardPluginClasses!: string;\r\n  keyboardDOMClass!: string;\r\n  buttonElements!: KeyboardButtonElements;\r\n  currentInstanceName!: string;\r\n  allKeyboardInstances!: { [key: string]: SimpleKeyboard };\r\n  keyboardInstanceNames!: string[];\r\n  isFirstKeyboardInstance!: boolean;\r\n  physicalKeyboard!: PhysicalKeyboard;\r\n  modules!: { [key: string]: any };\r\n  activeButtonClass!: string;\r\n  holdInteractionTimeout!: number;\r\n  holdTimeout!: number;\r\n  isMouseHold!: boolean;\r\n  initialized!: boolean;\r\n  candidateBox!: CandidateBox | null;\r\n  keyboardRowsDOM!: KeyboardElement;\r\n  defaultName = 'default';\r\n  activeInputElement: HTMLInputElement | HTMLTextAreaElement | null = null;\r\n  keyboardInstructions: HTMLElement | null = null;\r\n  keyboardHeader: HTMLElement | null = null;\r\n  instructions: string | null = null;\r\n  listenersAdded = false;\r\n  ariaLiveTimer: ReturnType<typeof setTimeout> | null = null;\r\n  useLiveRegion = true;\r\n  liveRegionMode: 'assertive' | 'polite' = 'polite';\r\n  liveRegionDelay = 0;\r\n  ariaLabel = '';\r\n  handleKeyDownBound!: (event: KeyboardEvent) => void;\r\n  handleInternalKeyNavBound!: (event: KeyboardEvent) => void;\r\n  handleKeyUpBound!: (event: KeyboardEvent) => void;\r\n  handleMouseDownBound!: (event: MouseEvent) => void;\r\n  handleMouseUpBound!: (event: MouseEvent) => void;\r\n  handleTouchEndBound!: (event: TouchEvent) => void;\r\n  handleSelectBound!: (event: Event) => void;\r\n  handleSelectionChangeBound!: (event: Event) => void;\r\n  NAV_KEYS = new Set(['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Tab', 'Home', 'End', 'PageUp', 'PageDown']);\r\n  MODIFIER_KEYS = new Set(['Shift', 'Control', 'Alt', 'Meta', 'CapsLock', 'NumLock', 'ScrollLock', 'Fn', 'FnLock']);\r\n  NAMED_KEYS_TO_ANNOUNCE = new Set(['Enter', 'Backspace', 'Delete', 'Escape', ' ', 'Spacebar']);\r\n  NAMED_READABLE: Record<string, string> = {\r\n    ' ': 'Space',\r\n    Spacebar: 'Space',\r\n  };\r\n  private announcerEl: HTMLDivElement | null = null;\r\n\r\n  /**\r\n   * Creates an instance of SimpleKeyboard\r\n   * @param {Array} selectorOrOptions If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\r\n   */\r\n  constructor(selectorOrOptions?: string | HTMLDivElement | KeyboardOptions, keyboardOptions?: KeyboardOptions) {\r\n    if (typeof window === 'undefined') return;\r\n\r\n    const { keyboardDOMClass, keyboardDOM, options = {} } = this.handleParams(selectorOrOptions, keyboardOptions);\r\n\r\n    /**\r\n     * Implementing Announcer\r\n     */\r\n    if (!keyboardDOM) throw new Error('Keyboard root not found');\r\n\r\n    // Reuse or create announcer; safe before/after attachment\r\n    this.announcerEl = this.ensureAnnouncer(keyboardDOM);\r\n\r\n    /**\r\n     * Initializing Utilities\r\n     */\r\n    this.utilities = new Utilities({\r\n      getOptions: this.getOptions,\r\n      getCaretPosition: this.getCaretPosition,\r\n      getCaretPositionEnd: this.getCaretPositionEnd,\r\n      dispatch: this.dispatch,\r\n    });\r\n\r\n    /**\r\n     * Caret position\r\n     */\r\n    this.caretPosition = null;\r\n\r\n    /**\r\n     * Caret position end\r\n     */\r\n    this.caretPositionEnd = null;\r\n\r\n    /**\r\n     * Processing options\r\n     */\r\n    this.keyboardDOM = keyboardDOM;\r\n\r\n    /**\r\n     * @type {object}\r\n     * @property {object} layout Modify the keyboard layout.\r\n     * @property {string} layoutName Specifies which layout should be used.\r\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\r\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\r\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\r\n     * @property {array} buttonTheme A prop to add your own css classes to one or several buttons.\r\n     * @property {array} buttonAttributes A prop to add your own attributes to one or several buttons.\r\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\r\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\r\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\r\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\r\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\r\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\r\n     * @property {boolean} physicalKeyboardHighlightPress Presses keys highlighted by physicalKeyboardHighlight\r\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\r\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\r\n     * @property {boolean} physicalKeyboardHighlightPressUseClick Whether physicalKeyboardHighlightPress should use clicks to trigger buttons.\r\n     * @property {boolean} physicalKeyboardHighlightPressUsePointerEvents Whether physicalKeyboardHighlightPress should use pointer events to trigger buttons.\r\n     * @property {boolean} physicalKeyboardHighlightPreventDefault Whether physicalKeyboardHighlight should use preventDefault to disable default browser actions.\r\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\r\n     * @property {boolean} preventMouseUpDefault Calling preventDefault for the mouseup events.\r\n     * @property {boolean} stopMouseDownPropagation Stops pointer down events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {boolean} stopMouseUpPropagation Stops pointer up events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\r\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\r\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n     * @property {function(keyboard: Keyboard):void} beforeInputUpdate Perform an action before any input change\r\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\r\n     * @property {boolean} useButtonTag Render buttons as a button element instead of a div element.\r\n     * @property {boolean} disableCaretPositioning A prop to ensure characters are always be added/removed at the end of the string.\r\n     * @property {object} inputPattern Restrains input(s) change to the defined regular expression pattern.\r\n     * @property {boolean} useTouchEvents Instructs simple-keyboard to use touch events instead of click events.\r\n     * @property {boolean} autoUseTouchEvents Enable useTouchEvents automatically when touch device is detected.\r\n     * @property {boolean} useMouseEvents Opt out of PointerEvents handling, falling back to the prior mouse event logic.\r\n     * @property {function} destroy Clears keyboard listeners and DOM elements.\r\n     * @property {boolean} disableButtonHold Disable button hold action.\r\n     * @property {boolean} rtl Adds unicode right-to-left control characters to input return values.\r\n     * @property {function} onKeyReleased Executes the callback function on key release.\r\n     * @property {array} modules Module classes to be loaded by simple-keyboard.\r\n     * @property {boolean} enableLayoutCandidates Enable input method editor candidate list support.\r\n     * @property {object} excludeFromLayout Buttons to exclude from layout\r\n     * @property {number} layoutCandidatesPageSize Determines size of layout candidate list\r\n     * @property {boolean} layoutCandidatesCaseSensitiveMatch Determines whether layout candidate match should be case sensitive.\r\n     * @property {boolean} disableCandidateNormalization Disables the automatic normalization for selected layout candidates\r\n     * @property {boolean} enableLayoutCandidatesKeyPress Enables onKeyPress triggering for layoutCandidate items\r\n     * @property {boolean} updateCaretOnSelectionChange Updates caret when selectionchange event is fired\r\n     * @property {boolean} clickOnMouseDown When useMouseEvents is enabled, this option allows you to trigger a button click event on mousedown\r\n     */\r\n    this.options = {\r\n      layoutName: 'default',\r\n      theme: 'hg-theme-default',\r\n      inputName: 'default',\r\n      preventMouseDownDefault: false,\r\n      enableLayoutCandidates: true,\r\n      excludeFromLayout: {},\r\n      ...options,\r\n    };\r\n\r\n    /**\r\n     * @type {object} Classes identifying loaded plugins\r\n     */\r\n    this.keyboardPluginClasses = '';\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(SimpleKeyboard, this);\r\n\r\n    /**\r\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\r\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\r\n     * @example\r\n     * // To get entered input\r\n     * const input = keyboard.getInput();\r\n     *\r\n     * // To clear entered input.\r\n     * keyboard.clearInput();\r\n     *\r\n     * @type {object}\r\n     * @property {object} default Default SimpleKeyboard internal input.\r\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\r\n     */\r\n    const { inputName = this.defaultName } = this.options;\r\n    this.input = {};\r\n    this.input[inputName] = '';\r\n\r\n    /**\r\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\r\n     */\r\n    this.keyboardDOMClass = keyboardDOMClass;\r\n\r\n    /**\r\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\r\n     */\r\n    this.buttonElements = {};\r\n\r\n    /**\r\n     * Simple-keyboard Instances\r\n     * This enables multiple simple-keyboard support with easier management\r\n     */\r\n    if (!(window as SKWindow)['SimpleKeyboardInstances']) (window as SKWindow)['SimpleKeyboardInstances'] = {};\r\n\r\n    this.currentInstanceName = this.utilities.camelCase(this.keyboardDOMClass);\r\n    (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName] = this;\r\n\r\n    /**\r\n     * Instance vars\r\n     */\r\n    this.allKeyboardInstances = (window as SKWindow)['SimpleKeyboardInstances'];\r\n    this.keyboardInstanceNames = Object.keys((window as SKWindow)['SimpleKeyboardInstances']);\r\n    this.isFirstKeyboardInstance = this.keyboardInstanceNames[0] === this.currentInstanceName;\r\n\r\n    /**\r\n     * Physical Keyboard support\r\n     */\r\n    this.physicalKeyboard = new PhysicalKeyboard({\r\n      dispatch: this.dispatch,\r\n      getOptions: this.getOptions,\r\n    });\r\n\r\n    /**\r\n     * Initializing CandidateBox\r\n     */\r\n    this.candidateBox = this.options.enableLayoutCandidates\r\n      ? new CandidateBox({\r\n          utilities: this.utilities,\r\n          options: this.options,\r\n        })\r\n      : null;\r\n\r\n    /**\r\n     * Rendering keyboard\r\n     */\r\n    if (this.keyboardDOM) this.render();\r\n    else {\r\n      console.warn(`\".${keyboardDOMClass}\" was not found in the DOM.`);\r\n      throw new Error('KEYBOARD_DOM_ERROR');\r\n    }\r\n\r\n    /**\r\n     * Modules\r\n     */\r\n    this.modules = {};\r\n    this.loadModules();\r\n  }\r\n\r\n  /**\r\n   * Accessibility Announcer\r\n   * This module is responsible for announcing changes in the keyboard state to assistive technologies.\r\n   */\r\n  private ensureAnnouncer(keyboardEl: Element): HTMLDivElement {\r\n    const parentEl = keyboardEl.parentElement;\r\n\r\n    // Prefer sibling announcer\r\n    if (parentEl) {\r\n      let announcerEl = parentEl.querySelector<HTMLDivElement>(':scope > .hg-live-region');\r\n      if (!announcerEl) {\r\n        announcerEl = document.createElement('div');\r\n        announcerEl.className = 'hg-live-region sr-only';\r\n        announcerEl.setAttribute('role', 'status');\r\n        announcerEl.setAttribute('aria-live', 'polite');\r\n        announcerEl.setAttribute('aria-atomic', 'false');\r\n        keyboardEl.insertAdjacentElement('afterend', announcerEl);\r\n      } else {\r\n        announcerEl.textContent = '';\r\n      }\r\n      return announcerEl;\r\n    }\r\n\r\n    // Fallback: insert inside root but outside key rows\r\n    let announcerEl = keyboardEl.querySelector<HTMLDivElement>(':scope > .hg-live-region');\r\n    if (!announcerEl) {\r\n      announcerEl = document.createElement('div');\r\n      announcerEl.className = 'hg-live-region sr-only';\r\n      announcerEl.setAttribute('role', 'status');\r\n      announcerEl.setAttribute('aria-live', 'polite');\r\n      announcerEl.setAttribute('aria-atomic', 'false');\r\n\r\n      const rowsEl = keyboardEl.querySelector(':scope > .hg-rows');\r\n      if (rowsEl && rowsEl.nextSibling) {\r\n        keyboardEl.insertBefore(announcerEl, rowsEl.nextSibling);\r\n      } else {\r\n        keyboardEl.appendChild(announcerEl);\r\n      }\r\n    } else {\r\n      announcerEl.textContent = '';\r\n    }\r\n\r\n    return announcerEl;\r\n  }\r\n\r\n  /**\r\n   * parseParams\r\n   */\r\n  handleParams = (\r\n    selectorOrOptions?: string | HTMLDivElement | KeyboardOptions,\r\n    keyboardOptions?: KeyboardOptions\r\n  ): {\r\n    keyboardDOMClass: string;\r\n    keyboardDOM: KeyboardElement;\r\n    options: Partial<KeyboardOptions | undefined>;\r\n  } => {\r\n    let keyboardDOMClass;\r\n    let keyboardDOM;\r\n    let options;\r\n\r\n    /**\r\n     * If first parameter is a string:\r\n     * Consider it as an element's class\r\n     */\r\n    if (typeof selectorOrOptions === 'string') {\r\n      keyboardDOMClass = selectorOrOptions.split('.').join('');\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`) as KeyboardElement;\r\n      options = keyboardOptions;\r\n\r\n      /**\r\n       * If first parameter is an KeyboardElement\r\n       * Consider it as the keyboard DOM element\r\n       */\r\n    } else if (selectorOrOptions instanceof HTMLDivElement) {\r\n      /**\r\n       * This element must have a class, otherwise throw\r\n       */\r\n      if (!selectorOrOptions.className) {\r\n        console.warn('Any DOM element passed as parameter must have a class.');\r\n        throw new Error('KEYBOARD_DOM_CLASS_ERROR');\r\n      }\r\n\r\n      keyboardDOMClass = selectorOrOptions.className.split(' ')[0];\r\n      keyboardDOM = selectorOrOptions;\r\n      options = keyboardOptions;\r\n\r\n      /**\r\n       * Otherwise, search for .simple-keyboard DOM element\r\n       */\r\n    } else {\r\n      keyboardDOMClass = 'simple-keyboard';\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`) as KeyboardElement;\r\n      options = selectorOrOptions;\r\n    }\r\n\r\n    return {\r\n      keyboardDOMClass,\r\n      keyboardDOM,\r\n      options,\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Getters\r\n   */\r\n  getOptions = (): KeyboardOptions => this.options;\r\n  getCaretPosition = (): number | null => this.caretPosition;\r\n  getCaretPositionEnd = (): number | null => this.caretPositionEnd;\r\n\r\n  /**\r\n   * Changes the internal caret position\r\n   * @param {number} position The caret's start position\r\n   * @param {number} positionEnd The caret's end position\r\n   */\r\n  setCaretPosition(position: number | null, endPosition = position): void {\r\n    this.caretPosition = position;\r\n    this.caretPositionEnd = endPosition;\r\n  }\r\n\r\n  /**\r\n   * Retrieve the candidates for a given input\r\n   * @param input The input string to check\r\n   */\r\n  getInputCandidates(input: string): { candidateKey: string; candidateValue: string } | Record<string, never> {\r\n    const { layoutCandidates: layoutCandidatesObj, layoutCandidatesCaseSensitiveMatch } = this.options;\r\n\r\n    if (!layoutCandidatesObj || typeof layoutCandidatesObj !== 'object') {\r\n      return {};\r\n    }\r\n\r\n    const layoutCandidates = Object.keys(layoutCandidatesObj).filter((layoutCandidate: string) => {\r\n      const inputSubstr = input.substring(0, this.getCaretPositionEnd() || 0) || input;\r\n      const regexp = new RegExp(\r\n        `${this.utilities.escapeRegex(layoutCandidate)}$`,\r\n        layoutCandidatesCaseSensitiveMatch ? 'g' : 'gi'\r\n      );\r\n      const matches = [...inputSubstr.matchAll(regexp)];\r\n      return !!matches.length;\r\n    });\r\n\r\n    if (layoutCandidates.length > 1) {\r\n      const candidateKey = layoutCandidates.sort((a, b) => b.length - a.length)[0];\r\n      return {\r\n        candidateKey,\r\n        candidateValue: layoutCandidatesObj[candidateKey],\r\n      };\r\n    } else if (layoutCandidates.length) {\r\n      const candidateKey = layoutCandidates[0];\r\n      return {\r\n        candidateKey,\r\n        candidateValue: layoutCandidatesObj[candidateKey],\r\n      };\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows a suggestion box with a list of candidate words\r\n   * @param candidates The chosen candidates string as defined in the layoutCandidates option\r\n   * @param targetElement The element next to which the candidates box will be shown\r\n   */\r\n  showCandidatesBox(candidateKey: string, candidateValue: string, targetElement: KeyboardElement): void {\r\n    if (this.candidateBox) {\r\n      this.candidateBox.show({\r\n        candidateValue,\r\n        targetElement,\r\n        onSelect: (selectedCandidate: string, e: MouseEvent) => {\r\n          const { layoutCandidatesCaseSensitiveMatch, disableCandidateNormalization, enableLayoutCandidatesKeyPress } =\r\n            this.options;\r\n\r\n          let candidateStr = selectedCandidate;\r\n\r\n          if (!disableCandidateNormalization) {\r\n            /**\r\n             * Making sure that our suggestions are not composed characters\r\n             */\r\n            candidateStr = selectedCandidate.normalize('NFD');\r\n          }\r\n\r\n          /**\r\n           * Perform an action before any input change\r\n           */\r\n          if (typeof this.options.beforeInputUpdate === 'function') {\r\n            this.options.beforeInputUpdate(this);\r\n          }\r\n\r\n          const currentInput = this.getInput(this.options.inputName, true);\r\n          const initialCaretPosition = this.getCaretPositionEnd() || 0;\r\n          const inputSubstr = currentInput.substring(0, initialCaretPosition || 0) || currentInput;\r\n\r\n          const regexp = new RegExp(\r\n            `${this.utilities.escapeRegex(candidateKey)}$`,\r\n            layoutCandidatesCaseSensitiveMatch ? 'g' : 'gi'\r\n          );\r\n          const newInputSubstr = inputSubstr.replace(regexp, candidateStr);\r\n          const newInput = currentInput.replace(inputSubstr, newInputSubstr);\r\n\r\n          const caretPositionDiff = newInputSubstr.length - inputSubstr.length;\r\n          let newCaretPosition = (initialCaretPosition || currentInput.length) + caretPositionDiff;\r\n\r\n          if (newCaretPosition < 0) newCaretPosition = 0;\r\n\r\n          this.setInput(newInput, this.options.inputName, true);\r\n          this.setCaretPosition(newCaretPosition);\r\n\r\n          /**\r\n           * Calling onKeyPress\r\n           * We pass in the composed candidate instead of the decomposed one\r\n           * To prevent confusion for users\r\n           */\r\n          if (enableLayoutCandidatesKeyPress && typeof this.options.onKeyPress === 'function') {\r\n            this.options.onKeyPress(selectedCandidate, e);\r\n          }\r\n\r\n          if (typeof this.options.onChange === 'function') {\r\n            this.options.onChange(this.getInput(this.options.inputName, true), e);\r\n          }\r\n\r\n          /**\r\n           * Calling onChangeAll\r\n           */\r\n          if (typeof this.options.onChangeAll === 'function') this.options.onChangeAll(this.getAllInputs(), e);\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles clicks made to keyboard buttons\r\n   * @param  {string} button The button's layout name.\r\n   */\r\n  handleButtonClicked(button: string, e?: KeyboardHandlerEvent): void {\r\n    const { inputName = this.defaultName, debug } = this.options;\r\n    /**\r\n     * Ignoring placeholder buttons\r\n     */\r\n    if (button === '{//}') return;\r\n\r\n    /**\r\n     * Creating inputName if it doesn't exist\r\n     */\r\n    if (!this.input[inputName]) this.input[inputName] = '';\r\n\r\n    /**\r\n     * Perform an action before any input change\r\n     */\r\n    if (typeof this.options.beforeInputUpdate === 'function') {\r\n      this.options.beforeInputUpdate(this);\r\n    }\r\n\r\n    /**\r\n     * Calculating new input\r\n     */\r\n    const updatedInput = this.utilities.getUpdatedInput(\r\n      button,\r\n      this.input[inputName],\r\n      this.caretPosition,\r\n      this.caretPositionEnd\r\n    );\r\n\r\n    /**\r\n     * EDGE CASE: Check for whole input selection changes that will yield same updatedInput\r\n     */\r\n    if (this.utilities.isStandardButton(button) && this.activeInputElement) {\r\n      const isEntireInputSelection =\r\n        this.input[inputName] &&\r\n        this.input[inputName] === updatedInput &&\r\n        this.caretPosition === 0 &&\r\n        this.caretPositionEnd === updatedInput.length;\r\n\r\n      if (isEntireInputSelection) {\r\n        this.setInput('', this.options.inputName, true);\r\n        this.setCaretPosition(0);\r\n        this.activeInputElement.value = '';\r\n        this.activeInputElement.setSelectionRange(0, 0);\r\n        this.handleButtonClicked(button, e);\r\n        return;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Calling onKeyPress\r\n     */\r\n    if (typeof this.options.onKeyPress === 'function') this.options.onKeyPress(button, e);\r\n\r\n    if (\r\n      // If input will change as a result of this button press\r\n      this.input[inputName] !== updatedInput &&\r\n      // This pertains to the \"inputPattern\" option:\r\n      // If inputPattern isn't set\r\n      (!this.options.inputPattern ||\r\n        // Or, if it is set and if the pattern is valid - we proceed.\r\n        (this.options.inputPattern && this.inputPatternIsValid(updatedInput)))\r\n    ) {\r\n      /**\r\n       * If maxLength and handleMaxLength yield true, halting\r\n       */\r\n      if (this.options.maxLength && this.utilities.handleMaxLength(this.input, updatedInput)) {\r\n        return;\r\n      }\r\n\r\n      /**\r\n       * Updating input\r\n       */\r\n      const newInputValue = this.utilities.getUpdatedInput(\r\n        button,\r\n        this.input[inputName],\r\n        this.caretPosition,\r\n        this.caretPositionEnd,\r\n        true\r\n      );\r\n\r\n      this.setInput(newInputValue, this.options.inputName, true);\r\n\r\n      if (debug) console.log('Input changed:', this.getAllInputs());\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          'Caret at: ',\r\n          this.getCaretPosition(),\r\n          this.getCaretPositionEnd(),\r\n          `(${this.keyboardDOMClass})`,\r\n          e?.type\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Enforce syncInstanceInputs, if set\r\n       */\r\n      if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n\r\n      /**\r\n       * Calling onChange\r\n       */\r\n      if (typeof this.options.onChange === 'function')\r\n        this.options.onChange(this.getInput(this.options.inputName, true), e);\r\n\r\n      /**\r\n       * Calling onChangeAll\r\n       */\r\n      if (typeof this.options.onChangeAll === 'function') this.options.onChangeAll(this.getAllInputs(), e);\r\n\r\n      /**\r\n       * Check if this new input has candidates (suggested words)\r\n       */\r\n      if (e?.target && this.options.enableLayoutCandidates) {\r\n        const { candidateKey, candidateValue } = this.getInputCandidates(updatedInput);\r\n\r\n        if (candidateKey && candidateValue) {\r\n          this.showCandidatesBox(candidateKey, candidateValue, this.keyboardDOM);\r\n        } else {\r\n          this.candidateBox?.destroy();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * After a button is clicked the selection (if any) will disappear\r\n     * we should reflect this in our state, as applicable\r\n     */\r\n    if (this.caretPositionEnd && this.caretPosition !== this.caretPositionEnd) {\r\n      this.setCaretPosition(this.caretPositionEnd, this.caretPositionEnd);\r\n\r\n      if (this.activeInputElement) {\r\n        this.activeInputElement.setSelectionRange(this.caretPositionEnd, this.caretPositionEnd);\r\n      }\r\n\r\n      if (this.options.debug) {\r\n        console.log('Caret position aligned', this.caretPosition);\r\n      }\r\n    }\r\n\r\n    if (debug) {\r\n      console.log('Key pressed:', button);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get mouse hold state\r\n   */\r\n  getMouseHold() {\r\n    return this.isMouseHold;\r\n  }\r\n\r\n  /**\r\n   * Mark mouse hold state as set\r\n   */\r\n  setMouseHold(value: boolean) {\r\n    if (this.options.syncInstanceInputs) {\r\n      this.dispatch((instance: SimpleKeyboard) => {\r\n        instance.isMouseHold = value;\r\n      });\r\n    } else {\r\n      this.isMouseHold = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mousedown\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonMouseDown(button: string, e: KeyboardHandlerEvent): void {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseDownDefault) e.preventDefault();\r\n      if (this.options.stopMouseDownPropagation) e.stopPropagation();\r\n\r\n      /**\r\n       * Add active class\r\n       */\r\n      e.target.classList.add(this.activeButtonClass);\r\n    }\r\n\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n    if (this.holdTimeout) clearTimeout(this.holdTimeout);\r\n\r\n    /**\r\n     * @type {boolean} Whether the mouse is being held onKeyPress\r\n     */\r\n    this.setMouseHold(true);\r\n\r\n    /**\r\n     * @type {object} Time to wait until a key hold is detected\r\n     */\r\n    if (!this.options.disableButtonHold) {\r\n      this.holdTimeout = window.setTimeout(() => {\r\n        if (\r\n          (this.getMouseHold() &&\r\n            // TODO: This needs to be configurable through options\r\n            ((!button.includes('{') && !button.includes('}')) ||\r\n              button === '{delete}' ||\r\n              button === '{backspace}' ||\r\n              button === '{bksp}' ||\r\n              button === '{space}' ||\r\n              button === '{tab}')) ||\r\n          button === '{arrowright}' ||\r\n          button === '{arrowleft}' ||\r\n          button === '{arrowup}' ||\r\n          button === '{arrowdown}'\r\n        ) {\r\n          if (this.options.debug) console.log('Button held:', button);\r\n\r\n          this.handleButtonHold(button);\r\n        }\r\n        clearTimeout(this.holdTimeout);\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mouseup\r\n   */\r\n  handleButtonMouseUp(button?: string, e?: KeyboardHandlerEvent): void {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseUpDefault && e.preventDefault) e.preventDefault();\r\n      if (this.options.stopMouseUpPropagation && e.stopPropagation) e.stopPropagation();\r\n\r\n      /* istanbul ignore next */\r\n      const isKeyboard =\r\n        e.target === this.keyboardDOM ||\r\n        (e.target && this.keyboardDOM.contains(e.target)) ||\r\n        (this.candidateBox &&\r\n          this.candidateBox.candidateBoxElement &&\r\n          (e.target === this.candidateBox.candidateBoxElement ||\r\n            (e.target && this.candidateBox.candidateBoxElement.contains(e.target))));\r\n\r\n      /**\r\n       * On click outside, remove candidateBox\r\n       */\r\n      if (!isKeyboard && this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Remove active class\r\n     */\r\n    this.recurseButtons((buttonElement: Element) => {\r\n      buttonElement.classList.remove(this.activeButtonClass);\r\n    });\r\n\r\n    this.setMouseHold(false);\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * Calling onKeyReleased\r\n     */\r\n    if (button && typeof this.options.onKeyReleased === 'function') this.options.onKeyReleased(button, e);\r\n  }\r\n\r\n  /**\r\n   * Handles container mousedown\r\n   */\r\n  handleKeyboardContainerMouseDown(e: KeyboardHandlerEvent): void {\r\n    /**\r\n     * Handle event options\r\n     */\r\n    if (this.options.preventMouseDownDefault) e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Handles button hold\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonHold(button: string): void {\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * @type {object} Timeout dictating the speed of key hold iterations\r\n     */\r\n    this.holdInteractionTimeout = window.setTimeout(() => {\r\n      if (this.getMouseHold()) {\r\n        this.handleButtonClicked(button);\r\n        this.handleButtonHold(button);\r\n      } else {\r\n        clearTimeout(this.holdInteractionTimeout);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances (if you have several instances).\r\n   */\r\n  syncInstanceInputs(): void {\r\n    this.dispatch((instance: SimpleKeyboard) => {\r\n      instance.replaceInput(this.input);\r\n      instance.setCaretPosition(this.caretPosition, this.caretPositionEnd);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the keyboard’s input.\r\n   * @param {string} [inputName] optional - the internal input to select\r\n   */\r\n  clearInput(inputName: string = this.options.inputName || this.defaultName): void {\r\n    this.input[inputName] = '';\r\n\r\n    /**\r\n     * Reset caretPosition\r\n     */\r\n    this.setCaretPosition(0);\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Get the keyboard’s input (You can also get it from the onChange prop).\r\n   * @param  {string} [inputName] optional - the internal input to select\r\n   */\r\n  getInput(inputName: string = this.options.inputName || this.defaultName, skipSync = false): string {\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs && !skipSync) this.syncInstanceInputs();\r\n\r\n    if (this.options.rtl) {\r\n      // Remove existing control chars\r\n      const inputWithoutRTLControl = this.input[inputName].replace('\\u202B', '').replace('\\u202C', '');\r\n\r\n      return '\\u202B' + inputWithoutRTLControl + '\\u202C';\r\n    } else {\r\n      return this.input[inputName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all simple-keyboard inputs\r\n   */\r\n  getAllInputs(): KeyboardInput {\r\n    const output = {} as KeyboardInput;\r\n    const inputNames = Object.keys(this.input);\r\n\r\n    inputNames.forEach((inputName) => {\r\n      output[inputName] = this.getInput(inputName, true);\r\n    });\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Set the keyboard’s input.\r\n   * @param  {string} input the input value\r\n   * @param  {string} inputName optional - the internal input to select\r\n   */\r\n  setInput(input: string, inputName: string = this.options.inputName || this.defaultName, skipSync?: boolean): void {\r\n    this.input[inputName] = input;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (!skipSync && this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Replace the input object (`keyboard.input`)\r\n   * @param  {object} inputObj The input object\r\n   */\r\n  replaceInput(inputObj: KeyboardInput): void {\r\n    this.input = inputObj;\r\n  }\r\n\r\n  /**\r\n   * Set new option or modify existing ones after initialization.\r\n   * @param  {object} options The options to set\r\n   */\r\n  setOptions(options = {}): void {\r\n    const changedOptions = this.changedOptions(options);\r\n    this.options = Object.assign(this.options, options);\r\n\r\n    if (changedOptions.length) {\r\n      if (this.options.debug) {\r\n        console.log('changedOptions', changedOptions);\r\n      }\r\n\r\n      /**\r\n       * Some option changes require adjustments before re-render\r\n       */\r\n      this.onSetOptions(changedOptions);\r\n\r\n      /**\r\n       * Rendering\r\n       */\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detecting changes to non-function options\r\n   * This allows us to ascertain whether a button re-render is needed\r\n   */\r\n  changedOptions(newOptions: Partial<KeyboardOptions>): string[] {\r\n    return Object.keys(newOptions).filter(\r\n      (optionName) => JSON.stringify(newOptions[optionName]) !== JSON.stringify(this.options[optionName])\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Executing actions depending on changed options\r\n   * @param  {object} options The options to set\r\n   */\r\n  onSetOptions(changedOptions: string[] = []): void {\r\n    /**\r\n     * Changed: layoutName\r\n     */\r\n    if (changedOptions.includes('layoutName')) {\r\n      /**\r\n       * Reset candidateBox\r\n       */\r\n      if (this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Changed: layoutCandidatesPageSize, layoutCandidates\r\n     */\r\n    if (changedOptions.includes('layoutCandidatesPageSize') || changedOptions.includes('layoutCandidates')) {\r\n      /**\r\n       * Reset and recreate candidateBox\r\n       */\r\n      if (this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n        this.candidateBox = new CandidateBox({\r\n          utilities: this.utilities,\r\n          options: this.options,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all keyboard rows and reset keyboard values.\r\n   * Used internally between re-renders.\r\n   */\r\n  resetRows(): void {\r\n    if (this.keyboardRowsDOM) {\r\n      this.keyboardRowsDOM.remove();\r\n    }\r\n\r\n    this.keyboardDOM.className = this.keyboardDOMClass;\r\n    this.keyboardDOM.setAttribute('data-skInstance', this.currentInstanceName);\r\n    this.buttonElements = {};\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\r\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\r\n   */\r\n  // eslint-disable-next-line no-unused-vars\r\n  dispatch(callback: (instance: SimpleKeyboard, key?: string) => void): void {\r\n    if (!(window as SKWindow)['SimpleKeyboardInstances']) {\r\n      console.warn(`SimpleKeyboardInstances is not defined. Dispatch cannot be called.`);\r\n      throw new Error('INSTANCES_VAR_ERROR');\r\n    }\r\n\r\n    return Object.keys((window as SKWindow)['SimpleKeyboardInstances']).forEach((key) => {\r\n      callback((window as SKWindow)['SimpleKeyboardInstances'][key], key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  addButtonTheme(buttons: string, className: string): void {\r\n    if (!className || !buttons) return;\r\n\r\n    buttons.split(' ').forEach((button) => {\r\n      className.split(' ').forEach((classNameItem) => {\r\n        if (!this.options.buttonTheme) this.options.buttonTheme = [];\r\n\r\n        let classNameFound = false;\r\n\r\n        /**\r\n         * If class is already defined, we add button to class definition\r\n         */\r\n        this.options.buttonTheme.map((buttonTheme) => {\r\n          if (buttonTheme?.class.split(' ').includes(classNameItem)) {\r\n            classNameFound = true;\r\n\r\n            const buttonThemeArray = buttonTheme.buttons.split(' ');\r\n            if (!buttonThemeArray.includes(button)) {\r\n              classNameFound = true;\r\n              buttonThemeArray.push(button);\r\n              buttonTheme.buttons = buttonThemeArray.join(' ');\r\n            }\r\n          }\r\n          return buttonTheme;\r\n        });\r\n\r\n        /**\r\n         * If class is not defined, we create a new entry\r\n         */\r\n        if (!classNameFound) {\r\n          this.options.buttonTheme.push({\r\n            class: classNameItem,\r\n            buttons: buttons,\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  removeButtonTheme(buttons: string, className: string): void {\r\n    /**\r\n     * When called with empty parameters, remove all button themes\r\n     */\r\n    if (!buttons && !className) {\r\n      this.options.buttonTheme = [];\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * If buttons are passed and buttonTheme has items\r\n     */\r\n    if (buttons && Array.isArray(this.options.buttonTheme) && this.options.buttonTheme.length) {\r\n      const buttonArray = buttons.split(' ');\r\n      buttonArray.forEach((button) => {\r\n        this.options?.buttonTheme?.map((buttonTheme, index) => {\r\n          /**\r\n           * If className is set, we affect the buttons only for that class\r\n           * Otherwise, we afect all classes\r\n           */\r\n          if ((buttonTheme && className && className.includes(buttonTheme.class)) || !className) {\r\n            const filteredButtonArray = buttonTheme?.buttons.split(' ').filter((item) => item !== button);\r\n\r\n            /**\r\n             * If buttons left, return them, otherwise, remove button Theme\r\n             */\r\n            if (buttonTheme && filteredButtonArray?.length) {\r\n              buttonTheme.buttons = filteredButtonArray.join(' ');\r\n            } else {\r\n              this.options.buttonTheme?.splice(index, 1);\r\n              buttonTheme = null;\r\n            }\r\n          }\r\n\r\n          return buttonTheme;\r\n        });\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\r\n   * @param  {string} button The button layout name to select\r\n   */\r\n  getButtonElement(button: string): KeyboardElement | KeyboardElement[] | undefined {\r\n    let output;\r\n\r\n    const buttonArr = this.buttonElements[button];\r\n    if (buttonArr) {\r\n      if (buttonArr.length > 1) {\r\n        output = buttonArr;\r\n      } else {\r\n        output = buttonArr[0];\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * This handles the \"inputPattern\" option\r\n   * by checking if the provided inputPattern passes\r\n   */\r\n  inputPatternIsValid(inputVal: string): boolean {\r\n    const inputPatternRaw = this.options.inputPattern;\r\n    let inputPattern;\r\n\r\n    /**\r\n     * Check if input pattern is global or targeted to individual inputs\r\n     */\r\n    if (inputPatternRaw instanceof RegExp) {\r\n      inputPattern = inputPatternRaw;\r\n    } else {\r\n      inputPattern = inputPatternRaw[this.options.inputName || this.defaultName];\r\n    }\r\n\r\n    if (inputPattern && inputVal) {\r\n      const didInputMatch = inputPattern.test(inputVal);\r\n\r\n      if (this.options.debug) {\r\n        console.log(`inputPattern (\"${inputPattern}\"): ${didInputMatch ? 'passed' : 'did not pass!'}`);\r\n      }\r\n\r\n      return didInputMatch;\r\n    } else {\r\n      /**\r\n       * inputPattern doesn't seem to be set for the current input, or input is empty. Pass.\r\n       */\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the removal of event listers before initializing new ones\r\n   * This is useful when changing options that require a fresh set of event listeners\r\n   */\r\n\r\n  removeEventListeners(): void {\r\n    console.log('Removing event listeners...');\r\n\r\n    document.removeEventListener('keydown', this.handleKeyDownBound);\r\n    document.removeEventListener('keyup', this.handleKeyUpBound);\r\n    document.removeEventListener('mouseup', this.handleMouseUpBound);\r\n    document.removeEventListener('touchend', this.handleTouchEndBound);\r\n    document.removeEventListener('select', this.handleSelectBound);\r\n\r\n    if (this.options.updateCaretOnSelectionChange) {\r\n      document.removeEventListener('selectionchange', this.handleSelectionChangeBound);\r\n    }\r\n\r\n    this.listenersAdded = false; // Allow re-adding if necessary\r\n  }\r\n  /**\r\n   * Handles simple-keyboard event listeners\r\n   */\r\n  setEventListeners(): void {\r\n    /**\r\n     * Only first instance should set the event listeners\r\n     */\r\n    if (this.isFirstKeyboardInstance || !this.allKeyboardInstances) {\r\n      if (this.options.debug) {\r\n        console.log(`Caret handling started (${this.keyboardDOMClass})`);\r\n      }\r\n\r\n      // LPJr: Prevent duplicate listeners\r\n      if (this.listenersAdded) {\r\n        console.log('Event listeners already set. Skipping...');\r\n        return;\r\n      }\r\n\r\n      // Ensure existing listeners are removed before adding new ones\r\n      this.removeEventListeners();\r\n\r\n      // LPJr: added named event handlers instead of anonymous functions\r\n      this.handleKeyDownBound = this.handleKeyDown.bind(this);\r\n      this.handleInternalKeyNavBound = this.handleInternalKeyNav.bind(this);\r\n      this.keyboardDOM.addEventListener('keydown', this.handleInternalKeyNavBound as EventListener);\r\n\r\n      this.handleKeyUpBound = this.handleKeyUp.bind(this);\r\n      this.handleMouseUpBound = this.handleMouseUp.bind(this);\r\n      this.handleTouchEndBound = () => this.handleTouchEnd(this);\r\n      this.handleSelectBound = () => this.handleSelect(this);\r\n      this.handleSelectionChangeBound = this.handleSelectionChange.bind(this);\r\n\r\n      document.addEventListener('keydown', this.handleKeyDownBound);\r\n      document.addEventListener('keyup', this.handleKeyUpBound);\r\n      document.addEventListener('mouseup', this.handleMouseUpBound);\r\n      document.addEventListener('touchend', this.handleTouchEndBound);\r\n\r\n      if (this.options.updateCaretOnSelectionChange) {\r\n        document.addEventListener('selectionchange', this.handleSelectionChangeBound);\r\n      }\r\n\r\n      document.addEventListener('select', this.handleSelectBound);\r\n\r\n      // Mark listeners as added to prevent duplicates\r\n      this.listenersAdded = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Debug Logger\r\n   */\r\n  logEventType(tag: string, event: Event) {\r\n    console.log(`[${tag}] Event type:`, event.type, '→', event.constructor.name);\r\n  }\r\n\r\n  isSupportedEvent(event: Event): boolean {\r\n    return (\r\n      event instanceof KeyboardEvent ||\r\n      event instanceof MouseEvent ||\r\n      event instanceof TouchEvent ||\r\n      event instanceof PointerEvent\r\n    );\r\n  }\r\n\r\n  handleGetButtonAndAnnounce(event: KeyboardHandlerEvent): void {\r\n    if (!this.isSupportedEvent(event)) return;\r\n    console.log('I am handling get button and announce');\r\n    this.getButtonAndAnnounce(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyUp\r\n   */\r\n  handleKeyUp(event: KeyboardHandlerEvent): void {\r\n    if (this.options.physicalKeyboardHighlightPreventDefault) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    this.caretEventHandler(event);\r\n\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyUp(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyDown\r\n   */\r\n  handleKeyDown(event: KeyboardHandlerEvent): void {\r\n    // eslint-disable-next-line no-debugger\r\n    // debugger;\r\n\r\n    const shouldSuppressKeyAnnounce = CandidateBox.isOpen;\r\n    if (shouldSuppressKeyAnnounce) {\r\n      console.log('CandidateBox is open');\r\n      return; // Let CandidateBox handle all announcements\r\n    }\r\n\r\n    const bypassKeys = new Set(['Tab', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', ' ', 'Spacebar']);\r\n\r\n    if (\r\n      this.options.physicalKeyboardHighlightPreventDefault &&\r\n      event instanceof KeyboardEvent &&\r\n      !bypassKeys.has(event.key)\r\n    ) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    // Only use Enter key for virtual button activation to avoid conflicts with physical keyboard\r\n    if (event instanceof KeyboardEvent && event.key === 'Enter') {\r\n      const active = document.activeElement as HTMLElement;\r\n\r\n      if (active?.hasAttribute('data-skbtn')) {\r\n        const buttonLabel =\r\n          active.getAttribute('data-skbtn') || active.getAttribute('aria-label') || active.textContent?.trim();\r\n\r\n        if (buttonLabel) {\r\n          event.preventDefault(); // Prevent form submission\r\n          console.log('[SIMULATE] Virtual key press:', buttonLabel);\r\n          this.handleButtonClicked(buttonLabel, event);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.logEventType('Keyboard', event);\r\n\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyDown(event);\r\n    }\r\n\r\n    this.handleGetButtonAndAnnounce(event);\r\n  }\r\n\r\n  /**\r\n   * Check if the physical key pressed matches the button that would be triggered\r\n   * by the physical keyboard system. This prevents double triggering.\r\n   */\r\n  isPhysicalKeyMatchingButton(event: KeyboardEvent, buttonLabel: string): boolean {\r\n    // For space keys, only match if we're on the spacebar button\r\n    if (event.key === ' ' || event.key === 'Spacebar') {\r\n      return buttonLabel === '{space}' || buttonLabel.toLowerCase().includes('space');\r\n    }\r\n\r\n    // For other keys, we need to check if the physical key would trigger this exact button\r\n    // This is a simplified check - in reality, the PhysicalKeyboard service has complex mapping logic\r\n    // But for our use case, we mainly care about preventing space key double-triggering\r\n    \r\n    // For standard alphanumeric characters\r\n    if (event.key.length === 1) {\r\n      return buttonLabel === event.key.toLowerCase() || buttonLabel === event.key.toUpperCase();\r\n    }\r\n\r\n    // For special keys like Enter\r\n    if (event.key === 'Enter') {\r\n      return buttonLabel === '{enter}' || buttonLabel.toLowerCase().includes('enter');\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getAnnounceLabel(pressedKey: string): string | null {\r\n    const isNamedKey = this.NAMED_KEYS_TO_ANNOUNCE.has(pressedKey);\r\n    const isPrintable = pressedKey.length === 1;\r\n\r\n    const focused = document.activeElement as HTMLElement;\r\n    const focusedLabel =\r\n      focused?.getAttribute('aria-label') || focused?.textContent?.trim() || focused?.getAttribute('data-skbtn');\r\n\r\n    if (isNamedKey && focusedLabel && focusedLabel !== pressedKey) {\r\n      return focusedLabel;\r\n    }\r\n\r\n    if (!isPrintable && !isNamedKey) return null;\r\n\r\n    return this.NAMED_READABLE[pressedKey] || pressedKey;\r\n  }\r\n\r\n  /**\r\n   * Determine if announcements should be suppressed based on current context\r\n   */\r\n  shouldSuppressAnnouncements(): boolean {\r\n    // Always respect the useLiveRegion setting\r\n    if (!this.options.useLiveRegion) return true;\r\n\r\n    // Respect announcement mode\r\n    const announceMode = this.options.liveRegionAnnounceMode || 'actions';\r\n    if (announceMode === 'none') return true;\r\n\r\n    // Check if we should suppress when input is focused\r\n    if (this.options.suppressAnnouncementsOnInputFocus) {\r\n      const activeElement = document.activeElement;\r\n      if (activeElement && (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA')) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Get the content result for a button press (for content-mode announcements)\r\n   */\r\n  getContentForButton(buttonLabel: string): string | null {\r\n    // Handle special buttons\r\n    if (buttonLabel === '{space}') return 'space';\r\n    if (buttonLabel === '{enter}') return 'new line';\r\n    if (buttonLabel === '{bksp}' || buttonLabel === '{backspace}') return 'deleted';\r\n    if (buttonLabel === '{tab}') return 'tab';\r\n    if (buttonLabel === '{delete}') return 'deleted';\r\n    \r\n    // For regular character buttons, return the character itself\r\n    if (buttonLabel.length === 1) {\r\n      return buttonLabel;\r\n    }\r\n    \r\n    // For other special buttons, try to get display name\r\n    const displayName = this.utilities.getButtonDisplayName(\r\n      buttonLabel,\r\n      this.options.display,\r\n      this.options.mergeDisplay\r\n    );\r\n    \r\n    return displayName !== buttonLabel ? displayName : null;\r\n  }\r\n\r\n  /**\r\n   * Get the Button Element for Live Region announcements\r\n   * Backward-compatible entry point; now internally gated.\r\n   */\r\n  getButtonAndAnnounce(event: Event): void {\r\n    if (!this.isSupportedEvent(event)) return;\r\n\r\n    // Check if announcements should be suppressed\r\n    if (this.shouldSuppressAnnouncements()) return;\r\n\r\n    let pressedKey: string | null = null;\r\n    let buttonLabel: string | null = null;\r\n\r\n    // 1. KeyboardEvent path\r\n    if (event instanceof KeyboardEvent) {\r\n      if (event.isComposing || event.repeat) return;\r\n      pressedKey = event.key;\r\n    }\r\n\r\n    // 2. Pointer/touch path\r\n    if (event instanceof MouseEvent || event instanceof PointerEvent || event instanceof TouchEvent) {\r\n      const target = (event.target as HTMLElement)?.closest?.('[data-skbtn]');\r\n      if (!target || !this.keyboardDOM.contains(target)) return;\r\n\r\n      buttonLabel = target.getAttribute('data-skbtn');\r\n      pressedKey = target.getAttribute('aria-label') || target.textContent?.trim() || buttonLabel;\r\n    }\r\n\r\n    if (!pressedKey) return;\r\n\r\n    const announceMode = this.options.liveRegionAnnounceMode || 'actions';\r\n    \r\n    if (announceMode === 'none') return;\r\n\r\n    // Announce button action\r\n    if (announceMode === 'actions' || announceMode === 'both') {\r\n      const actionLabel = this.getAnnounceLabel(pressedKey);\r\n      if (actionLabel) {\r\n        this.announceLiveRegion(actionLabel, 'pressed');\r\n      }\r\n    }\r\n\r\n    // Announce content result\r\n    if ((announceMode === 'content' || announceMode === 'both') && buttonLabel) {\r\n      const contentResult = this.getContentForButton(buttonLabel);\r\n      if (contentResult) {\r\n        // Small delay to avoid conflicts with action announcement\r\n        setTimeout(() => {\r\n          this.announceLiveRegion(contentResult, '');\r\n        }, announceMode === 'both' ? 200 : 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * WCAG 2.1 Live Region for announcing key focus changes\r\n   * This is used to announce key focus changes for screen readers\r\n   */\r\n\r\n  announceLiveRegion(keyLabel: string, context = 'pressed'): void {\r\n    if (!this.options.useLiveRegion || !this.announcerEl) return;\r\n\r\n    console.log('[Announce] Fired:', {\r\n      keyLabel,\r\n      context,\r\n    });\r\n\r\n    if (this.ariaLiveTimer) clearTimeout(this.ariaLiveTimer);\r\n\r\n    this.ariaLiveTimer = setTimeout(() => {\r\n      if (this.announcerEl) {\r\n        this.announcerEl.textContent = '';\r\n        requestAnimationFrame(() => {\r\n          if (this.announcerEl) {\r\n            this.announcerEl.textContent = `Key ${keyLabel} ${context}`;\r\n          }\r\n        });\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: Internal Key Navigation\r\n   */\r\n  handleInternalKeyNav(event: KeyboardEvent): void {\r\n    if (!(event instanceof KeyboardEvent)) return;\r\n\r\n    const { key } = event;\r\n\r\n    if (!['ArrowRight', 'ArrowLeft', 'ArrowDown', 'ArrowUp'].includes(key)) return;\r\n\r\n    event.preventDefault();\r\n\r\n    const focused = document.activeElement as HTMLElement;\r\n\r\n    // Find the currently focused button\r\n    if (!focused || !focused.hasAttribute('data-skbtn')) return;\r\n\r\n    // Implement directional logic\r\n    let nextButton: HTMLElement | null = null;\r\n\r\n    switch (key) {\r\n      case 'ArrowRight':\r\n        nextButton = this.findNextButton(focused);\r\n        break;\r\n      case 'ArrowLeft':\r\n        nextButton = this.findPreviousButton(focused);\r\n        break;\r\n      case 'ArrowDown':\r\n        nextButton = this.findVerticalButton(focused, 'down');\r\n        break;\r\n      case 'ArrowUp':\r\n        nextButton = this.findVerticalButton(focused, 'up');\r\n        break;\r\n    }\r\n\r\n    if (nextButton) {\r\n      focused.setAttribute('tabindex', '-1');\r\n      nextButton.setAttribute('tabindex', '0');\r\n      nextButton.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find the next button in the keyboard layout\r\n   */\r\n  findNextButton(current: HTMLElement): HTMLElement | null {\r\n    const allButtons = Array.from(this.keyboardDOM.querySelectorAll('[data-skBtn]')) as HTMLElement[];\r\n\r\n    const idx = allButtons.indexOf(current);\r\n    return allButtons[idx + 1] || null;\r\n  }\r\n\r\n  /**\r\n   * Find the previous button in the keyboard layout\r\n   */\r\n  findPreviousButton(current: HTMLElement): HTMLElement | null {\r\n    const allButtons = Array.from(this.keyboardDOM.querySelectorAll('[data-skBtn]')) as HTMLElement[];\r\n\r\n    const idx = allButtons.indexOf(current);\r\n    return allButtons[idx - 1] || null;\r\n  }\r\n\r\n  /**\r\n   * Find the vertically closest button above or below the current one.\r\n   */\r\n  findVerticalButton(current: HTMLElement, direction: 'up' | 'down'): HTMLElement | null {\r\n    const rows = Array.from(this.keyboardDOM.querySelectorAll('.hg-row')) as HTMLElement[];\r\n    const currentRow = current.closest('.hg-row') as HTMLElement | null;\r\n    if (!currentRow) return null;\r\n\r\n    const rowIndex = rows.indexOf(currentRow);\r\n    const targetIndex = direction === 'up' ? rowIndex - 1 : rowIndex + 1;\r\n    const targetRow = rows[targetIndex];\r\n    if (!targetRow) return null; // already at top or bottom\r\n\r\n    const currentRect = current.getBoundingClientRect();\r\n    const currentCenterX = currentRect.left + currentRect.width / 2;\r\n\r\n    const candidates = Array.from(targetRow.querySelectorAll<HTMLElement>('[data-skBtn]'));\r\n    if (!candidates.length) return null;\r\n\r\n    // Find the key in target row closest in X to the current key\r\n    let closest = candidates[0];\r\n    let minDelta = Number.POSITIVE_INFINITY;\r\n\r\n    for (const el of candidates) {\r\n      const rect = el.getBoundingClientRect();\r\n      const centerX = rect.left + rect.width / 2;\r\n      const delta = Math.abs(centerX - currentCenterX);\r\n      if (delta < minDelta) {\r\n        minDelta = delta;\r\n        closest = el;\r\n      }\r\n    }\r\n\r\n    return closest;\r\n  }\r\n\r\n  /**\r\n   * Event Handler: MouseUp\r\n   */\r\n  handleMouseUp(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n\r\n    this.logEventType('Mouse', event);\r\n\r\n    this.handleGetButtonAndAnnounce(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: TouchEnd\r\n   */\r\n  /* istanbul ignore next */\r\n  handleTouchEnd(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n\r\n    this.logEventType('Touch', event);\r\n\r\n    this.handleGetButtonAndAnnounce(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: Select\r\n   */\r\n  /* istanbul ignore next */\r\n  handleSelect(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: SelectionChange\r\n   */\r\n  /* istanbul ignore next */\r\n  handleSelectionChange(event: KeyboardHandlerEvent): void {\r\n    /**\r\n     * Firefox is not reporting the correct caret position through this event\r\n     * https://github.com/hodgef/simple-keyboard/issues/1839\r\n     */\r\n    if (navigator.userAgent.includes('Firefox')) {\r\n      return;\r\n    }\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Called by {@link setEventListeners} when an event that warrants a cursor position update is triggered\r\n   */\r\n  caretEventHandler(event: KeyboardHandlerEvent): void {\r\n    const target = event?.target as HTMLElement | null;\r\n\r\n    let targetTagName = '';\r\n    if (target?.tagName) {\r\n      targetTagName = target.tagName.toLowerCase();\r\n    }\r\n    this.dispatch((instance) => {\r\n      let isKeyboard =\r\n        event.target === instance.keyboardDOM || (event.target && instance.keyboardDOM.contains(event.target));\r\n\r\n      /**\r\n       * If syncInstanceInputs option is enabled, make isKeyboard match any instance\r\n       * not just the current one\r\n       */\r\n      if (this.options.syncInstanceInputs && Array.isArray(event.path)) {\r\n        isKeyboard = event.path.some((item: HTMLElement) => item?.hasAttribute?.('data-skInstance'));\r\n      }\r\n\r\n      if (\r\n        (targetTagName === 'textarea' ||\r\n          (targetTagName === 'input' && ['text', 'search', 'url', 'tel', 'password'].includes(event.target.type))) &&\r\n        !instance.options.disableCaretPositioning\r\n      ) {\r\n        /**\r\n         * Tracks current cursor position\r\n         * As keys are pressed, text will be added/removed at that position within the input.\r\n         */\r\n        let selectionStart = event.target.selectionStart;\r\n        let selectionEnd = event.target.selectionEnd;\r\n\r\n        if (instance.options.rtl) {\r\n          selectionStart = instance.utilities.getRtlOffset(selectionStart, instance.getInput());\r\n          selectionEnd = instance.utilities.getRtlOffset(selectionEnd, instance.getInput());\r\n        }\r\n\r\n        instance.setCaretPosition(selectionStart, selectionEnd);\r\n\r\n        /**\r\n         * Tracking current input in order to handle caret positioning edge cases\r\n         */\r\n        instance.activeInputElement = event.target;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(\r\n            'Caret at: ',\r\n            instance.getCaretPosition(),\r\n            instance.getCaretPositionEnd(),\r\n            event && event.target.tagName.toLowerCase(),\r\n            `(${instance.keyboardDOMClass})`,\r\n            event?.type\r\n          );\r\n        }\r\n      } else if ((instance.options.disableCaretPositioning || !isKeyboard) && event?.type !== 'selectionchange') {\r\n        /**\r\n         * If we toggled off disableCaretPositioning, we must ensure caretPosition doesn't persist once reactivated.\r\n         */\r\n        instance.setCaretPosition(null);\r\n\r\n        /**\r\n         * Resetting activeInputElement\r\n         */\r\n        instance.activeInputElement = null;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(`Caret position reset due to \"${event?.type}\" event`, event);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute an operation on each button\r\n   */\r\n  recurseButtons(fn: any): void {\r\n    if (!fn) return;\r\n\r\n    Object.keys(this.buttonElements).forEach((buttonName) => this.buttonElements[buttonName].forEach(fn));\r\n  }\r\n\r\n  /**\r\n   * Destroy keyboard listeners and DOM elements\r\n   */\r\n  destroy(): void {\r\n    if (this.options.debug) console.log(`Destroying simple-keyboard instance: ${this.currentInstanceName}`);\r\n\r\n    const { physicalKeyboardHighlightPreventDefault = false } = this.options;\r\n\r\n    /**\r\n     * Remove document listeners\r\n     */\r\n    document.removeEventListener('keyup', this.handleKeyUpBound);\r\n    document.removeEventListener('keydown', this.handleKeyDownBound);\r\n    document.removeEventListener('mouseup', this.handleMouseUpBound);\r\n    document.removeEventListener('touchend', this.handleTouchEndBound);\r\n    document.removeEventListener('select', this.handleSelectBound);\r\n\r\n    // selectionchange is causing caret update issues on Chrome\r\n    // https://github.com/hodgef/simple-keyboard/issues/2346\r\n    if (this.options.updateCaretOnSelectionChange) {\r\n      document.removeEventListener('selectionchange', this.handleSelectionChangeBound);\r\n    }\r\n\r\n    document.onpointerup = null;\r\n    document.ontouchend = null;\r\n    document.ontouchcancel = null;\r\n    document.onmouseup = null;\r\n\r\n    /**\r\n     * Remove buttons\r\n     */\r\n    const deleteButton = (buttonElement: KeyboardElement | null) => {\r\n      if (buttonElement) {\r\n        buttonElement.onpointerdown = null;\r\n        buttonElement.onpointerup = null;\r\n        buttonElement.onpointercancel = null;\r\n        buttonElement.ontouchstart = null;\r\n        buttonElement.ontouchend = null;\r\n        buttonElement.ontouchcancel = null;\r\n        buttonElement.onclick = null;\r\n        buttonElement.onmousedown = null;\r\n        buttonElement.onmouseup = null;\r\n\r\n        buttonElement.remove();\r\n        buttonElement = null;\r\n      }\r\n    };\r\n\r\n    this.recurseButtons(deleteButton);\r\n\r\n    /**\r\n     * Remove wrapper events\r\n     */\r\n    this.keyboardDOM.onpointerdown = null;\r\n    this.keyboardDOM.ontouchstart = null;\r\n    this.keyboardDOM.onmousedown = null;\r\n\r\n    /**\r\n     * Clearing keyboard rows\r\n     */\r\n    this.resetRows();\r\n\r\n    /**\r\n     * Candidate box\r\n     */\r\n    if (this.candidateBox) {\r\n      this.candidateBox.destroy();\r\n      this.candidateBox = null;\r\n    }\r\n\r\n    /**\r\n     * Clearing activeInputElement\r\n     */\r\n    this.activeInputElement = null;\r\n\r\n    /**\r\n     * Removing instance attribute\r\n     */\r\n    this.keyboardDOM.removeAttribute('data-skInstance');\r\n\r\n    /**\r\n     * Clearing keyboardDOM\r\n     */\r\n    this.keyboardDOM.innerHTML = '';\r\n\r\n    /**\r\n     * Remove instance\r\n     */\r\n    (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName] = null;\r\n    delete (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName];\r\n\r\n    /**\r\n     * Reset initialized flag\r\n     */\r\n    this.initialized = false;\r\n  }\r\n\r\n  /**\r\n   * Process buttonTheme option\r\n   */\r\n  getButtonThemeClasses(button: string): string[] {\r\n    const buttonTheme = this.options.buttonTheme;\r\n    let buttonClasses: string[] = [];\r\n\r\n    if (Array.isArray(buttonTheme)) {\r\n      buttonTheme.forEach((themeObj) => {\r\n        if (\r\n          themeObj &&\r\n          themeObj.class &&\r\n          typeof themeObj.class === 'string' &&\r\n          themeObj.buttons &&\r\n          typeof themeObj.buttons === 'string'\r\n        ) {\r\n          const themeObjClasses = themeObj.class.split(' ');\r\n          const themeObjButtons = themeObj.buttons.split(' ');\r\n\r\n          if (themeObjButtons.includes(button)) {\r\n            buttonClasses = [...buttonClasses, ...themeObjClasses];\r\n          }\r\n        } else {\r\n          console.warn(`Incorrect \"buttonTheme\". Please check the documentation.`, themeObj);\r\n        }\r\n      });\r\n    }\r\n\r\n    return buttonClasses;\r\n  }\r\n\r\n  /**\r\n   * Process buttonAttributes option\r\n   */\r\n  setDOMButtonAttributes(button: string, callback: any): void {\r\n    const buttonAttributes = this.options.buttonAttributes;\r\n\r\n    if (Array.isArray(buttonAttributes)) {\r\n      buttonAttributes.forEach((attrObj) => {\r\n        if (\r\n          attrObj.attribute &&\r\n          typeof attrObj.attribute === 'string' &&\r\n          attrObj.value &&\r\n          typeof attrObj.value === 'string' &&\r\n          attrObj.buttons &&\r\n          typeof attrObj.buttons === 'string'\r\n        ) {\r\n          const attrObjButtons = attrObj.buttons.split(' ');\r\n\r\n          if (attrObjButtons.includes(button)) {\r\n            callback(attrObj.attribute, attrObj.value);\r\n          }\r\n        } else {\r\n          console.warn(`Incorrect \"buttonAttributes\". Please check the documentation.`, attrObj);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onTouchDeviceDetected() {\r\n    /**\r\n     * Processing autoTouchEvents\r\n     */\r\n    this.processAutoTouchEvents();\r\n\r\n    /**\r\n     * Disabling contextual window on touch devices\r\n     */\r\n    this.disableContextualWindow();\r\n  }\r\n\r\n  /**\r\n   * Disabling contextual window for hg-button\r\n   */\r\n  /* istanbul ignore next */\r\n  disableContextualWindow() {\r\n    window.oncontextmenu = (event: KeyboardHandlerEvent) => {\r\n      if (event.target.classList.contains('hg-button')) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process autoTouchEvents option\r\n   */\r\n  processAutoTouchEvents() {\r\n    if (this.options.autoUseTouchEvents) {\r\n      this.options.useTouchEvents = true;\r\n\r\n      if (this.options.debug) {\r\n        console.log(`autoUseTouchEvents: Touch device detected, useTouchEvents enabled.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n   */\r\n  onInit() {\r\n    if (this.options.debug) {\r\n      console.log(`${this.keyboardDOMClass} Initialized`);\r\n    }\r\n\r\n    //Initialize Announcer\r\n    this.announcerEl = this.ensureAnnouncer(this.keyboardDOM);\r\n    const announcers = document.querySelectorAll('.hg-live-region');\r\n    console.debug('[a11y] on Init announcers:', announcers.length, announcers);\r\n    console.debug('[a11y] on Init announcerConnected:', !!(this.announcerEl && this.announcerEl.isConnected));\r\n\r\n    /**\r\n     * setEventListeners\r\n     */\r\n    this.setEventListeners();\r\n\r\n    // Handle autoFocus after full initialization - ensures DOM is complete and painted\r\n    if (this.options.autoFocus) {\r\n      this.handleAutoFocus();\r\n    }\r\n\r\n    if (typeof this.options.onInit === 'function') this.options.onInit(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeFirstRender() {\r\n    /**\r\n     * Performing actions when touch device detected\r\n     */\r\n    if (this.utilities.isTouchDevice()) {\r\n      this.onTouchDeviceDetected();\r\n    }\r\n\r\n    if (typeof this.options.beforeFirstRender === 'function') this.options.beforeFirstRender(this);\r\n\r\n    /**\r\n     * Notify about PointerEvents usage\r\n     */\r\n    if (\r\n      this.isFirstKeyboardInstance &&\r\n      this.utilities.pointerEventsSupported() &&\r\n      !this.options.useTouchEvents &&\r\n      !this.options.useMouseEvents\r\n    ) {\r\n      if (this.options.debug) {\r\n        console.log('Using PointerEvents as it is supported by this browser');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Notify about touch events usage\r\n     */\r\n    if (this.options.useTouchEvents) {\r\n      if (this.options.debug) {\r\n        console.log('useTouchEvents has been enabled. Only touch events will be used.');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeRender() {\r\n    if (typeof this.options.beforeRender === 'function') this.options.beforeRender(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n   */\r\n  onRender() {\r\n    if (typeof this.options.onRender === 'function') this.options.onRender(this);\r\n\r\n    this.announcerEl = this.ensureAnnouncer(this.keyboardDOM);\r\n    const announcers = document.querySelectorAll('.hg-live-region');\r\n    console.debug('[a11y] on Render announcers:', announcers.length, announcers);\r\n    console.debug('[a11y] on Render announcerConnected:', !!(this.announcerEl && this.announcerEl.isConnected));\r\n  }\r\n\r\n  /**\r\n   * Handles automatic focus to the first key when autoFocus option is enabled\r\n   * Called from onInit to ensure DOM is fully complete and painted\r\n   */\r\n  handleAutoFocus(): void {\r\n    // Double-buffer with setTimeout + requestAnimationFrame to ensure DOM is fully painted\r\n    setTimeout(() => {\r\n      requestAnimationFrame(() => {\r\n        const firstFocusableButton = this.keyboardDOM.querySelector('[data-skBtn][tabindex=\"0\"]') as HTMLElement;\r\n        \r\n        if (firstFocusableButton) {\r\n          firstFocusableButton.focus();\r\n          \r\n          if (this.options.debug) {\r\n            console.log('AutoFocus: Focused first keyboard button');\r\n          }\r\n        } else {\r\n          // Fallback: Find any button with tabindex=\"0\" or the first button\r\n          const fallbackButton = \r\n            this.keyboardDOM.querySelector('[data-skBtn][tabindex=\"0\"]') as HTMLElement ||\r\n            this.keyboardDOM.querySelector('[data-skBtn]') as HTMLElement;\r\n            \r\n          if (fallbackButton) {\r\n            // Make sure it's focusable\r\n            fallbackButton.setAttribute('tabindex', '0');\r\n            fallbackButton.focus();\r\n            \r\n            if (this.options.debug) {\r\n              console.log('AutoFocus: Focused fallback keyboard button');\r\n            }\r\n          } else {\r\n            if (this.options.debug) {\r\n              console.warn('AutoFocus: No keyboard buttons found for focus!');\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once all modules have been loaded\r\n   */\r\n  onModulesLoaded() {\r\n    if (typeof this.options.onModulesLoaded === 'function') this.options.onModulesLoaded(this);\r\n  }\r\n\r\n  /**\r\n   * Register module\r\n   */\r\n  registerModule = (name: string, initCallback: any) => {\r\n    if (!this.modules[name]) this.modules[name] = {};\r\n\r\n    initCallback(this.modules[name]);\r\n  };\r\n\r\n  /**\r\n   * Load modules\r\n   */\r\n  loadModules() {\r\n    if (Array.isArray(this.options.modules)) {\r\n      this.options.modules.forEach((KeyboardModule) => {\r\n        const keyboardModule = this.utilities.isConstructor(KeyboardModule)\r\n          ? new KeyboardModule(this)\r\n          : KeyboardModule(this);\r\n\r\n        keyboardModule.init && keyboardModule.init(this);\r\n      });\r\n\r\n      this.keyboardPluginClasses = 'modules-loaded';\r\n\r\n      this.render();\r\n      this.onModulesLoaded();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get module prop\r\n   */\r\n  getModuleProp(name: string, prop: string) {\r\n    if (!this.modules[name]) return false;\r\n\r\n    return this.modules[name][prop];\r\n  }\r\n\r\n  /**\r\n   * getModulesList\r\n   */\r\n  getModulesList() {\r\n    return Object.keys(this.modules);\r\n  }\r\n\r\n  /**\r\n   * Parse Row DOM containers\r\n   */\r\n  parseRowDOMContainers(\r\n    rowDOM: HTMLDivElement,\r\n    rowIndex: number,\r\n    containerStartIndexes: number[],\r\n    containerEndIndexes: number[]\r\n  ) {\r\n    const rowDOMArray = Array.from(rowDOM.children);\r\n    let removedElements = 0;\r\n\r\n    if (rowDOMArray.length) {\r\n      containerStartIndexes.forEach((startIndex, arrIndex) => {\r\n        const endIndex = containerEndIndexes[arrIndex];\r\n\r\n        /**\r\n         * If there exists a respective end index\r\n         * if end index comes after start index\r\n         */\r\n        if (!endIndex || !(endIndex > startIndex)) {\r\n          return false;\r\n        }\r\n\r\n        /**\r\n         * Updated startIndex, endIndex\r\n         * This is since the removal of buttons to place a single button container\r\n         * results in a modified array size\r\n         */\r\n        const updated_startIndex = startIndex - removedElements;\r\n        const updated_endIndex = endIndex - removedElements;\r\n\r\n        /**\r\n         * Create button container\r\n         */\r\n        const containerDOM = document.createElement('div');\r\n        containerDOM.className += 'hg-button-container';\r\n        const containerUID = `${this.options.layoutName}-r${rowIndex}c${arrIndex}`;\r\n        containerDOM.setAttribute('data-skUID', containerUID);\r\n\r\n        /**\r\n         * Taking elements due to be inserted into container\r\n         */\r\n        const containedElements = rowDOMArray.splice(updated_startIndex, updated_endIndex - updated_startIndex + 1);\r\n        removedElements += updated_endIndex - updated_startIndex;\r\n\r\n        /**\r\n         * Inserting elements to container\r\n         */\r\n        containedElements.forEach((element) => containerDOM.appendChild(element));\r\n\r\n        /**\r\n         * Adding container at correct position within rowDOMArray\r\n         */\r\n        rowDOMArray.splice(updated_startIndex, 0, containerDOM);\r\n\r\n        /**\r\n         * Clearing old rowDOM children structure\r\n         */\r\n        rowDOM.innerHTML = '';\r\n\r\n        /**\r\n         * Appending rowDOM new children list\r\n         */\r\n        rowDOMArray.forEach((element) => rowDOM.appendChild(element));\r\n\r\n        if (this.options.debug) {\r\n          console.log('rowDOMContainer', containedElements, updated_startIndex, updated_endIndex, removedElements + 1);\r\n        }\r\n      });\r\n    }\r\n\r\n    return rowDOM;\r\n  }\r\n\r\n  /**\r\n   * getKeyboardClassString\r\n   */\r\n  getKeyboardClassString = (...baseDOMClasses: any[]) => {\r\n    const keyboardClasses = [this.keyboardDOMClass, ...baseDOMClasses].filter((DOMClass) => !!DOMClass);\r\n\r\n    return keyboardClasses.join(' ');\r\n  };\r\n\r\n  /**\r\n   * Renders rows and buttons as per options\r\n   */\r\n  render() {\r\n    /**\r\n     * Clear keyboard\r\n     */\r\n    this.resetRows();\r\n\r\n    /**\r\n     * Calling beforeFirstRender\r\n     */\r\n    if (!this.initialized) {\r\n      this.beforeFirstRender();\r\n    }\r\n\r\n    /**\r\n     * Calling beforeRender\r\n     */\r\n    this.beforeRender();\r\n\r\n    const layoutClass = `hg-layout-${this.options.layoutName}`;\r\n    const layout = this.options.layout || getDefaultLayout();\r\n    const useTouchEvents = this.options.useTouchEvents || false;\r\n    const useTouchEventsClass = useTouchEvents ? 'hg-touch-events' : '';\r\n    const useMouseEvents = this.options.useMouseEvents || false;\r\n    const disableRowButtonContainers = this.options.disableRowButtonContainers;\r\n\r\n    /**\r\n     * Adding themeClass, layoutClass to keyboardDOM\r\n     */\r\n    this.keyboardDOM.className = this.getKeyboardClassString(\r\n      this.options.theme,\r\n      layoutClass,\r\n      this.keyboardPluginClasses,\r\n      useTouchEventsClass\r\n    );\r\n\r\n    /**\r\n     * Adding keyboard identifier\r\n     */\r\n    this.keyboardDOM.setAttribute('data-skInstance', this.currentInstanceName);\r\n\r\n    /**\r\n     * Add WCAG 2.1 compliance attributes - LPJr\r\n     * https://www.w3.org/WAI/WCAG21/Understanding/keyboard.html\r\n     */\r\n\r\n    /**\r\n     * WCAG 2.1 / Section 508a Accessibility Compliance - LPJr\r\n     *\r\n     * This virtual keyboard component follows best-effort WCAG 2.1 Level AA and 508a compliance practices:\r\n     *\r\n     * Keyboard Navigability (2.1.1)\r\n     *    - All keys are operable via arrow keys and focus management\r\n     *    - `Tab` and `Shift+Tab` allow exiting and re-entering the keyboard area\r\n     *\r\n     * Focus Visibility (2.4.7)\r\n     *    - Each key uses `tabIndex` and is visibly highlighted when focused\r\n     *\r\n     * Name, Role, Value (4.1.2)\r\n     *    - Each key has `role=\"button\"` (if not native <button>)\r\n     *    - Each key has an `aria-label` and visible text\r\n     *    - Keyboard container has `role=\"application\"` and a programmatic label\r\n     *\r\n     * Live Region Announcements\r\n     *    - Not implemented to avoid screen reader overload\r\n     *    - Optional feature per WCAG; not required for conformance\r\n     *    - Output is assumed to be visually accessible or programmatically exposed elsewhere\r\n     *\r\n     * Customization\r\n     *    - `aria-label` for the keyboard can be overridden via `options.ariaLabel`\r\n     *    - Accessible layout is language-agnostic and screen reader-friendly\r\n     */\r\n\r\n    this.options.useLiveRegion ??= true;\r\n    this.options.liveRegionMode ??= 'polite';\r\n    this.options.liveRegionDelay ??= 100;\r\n    this.options.ariaLabel ??= 'Virtual Keyboard';\r\n\r\n    this.keyboardDOM.setAttribute('role', 'application');\r\n    this.keyboardDOM.setAttribute('aria-label', this.options.ariaLabel || 'Virtual Keyboard');\r\n    // this.keyboardDOM.setAttribute('tabindex', '0');\r\n\r\n    this.instructions =\r\n      this.options.instructions ||\r\n      'Arrow keys navigate. Enter to select. Tab to exit keyboard, Shift+Tab to return.';\r\n\r\n    // Add layout header for context\r\n    this.keyboardHeader = document.createElement('h2');\r\n    this.keyboardHeader.classList.add('hg-header', 'sr-only');\r\n    this.keyboardHeader.id = 'hg-virtual-keyboard-header';\r\n    this.keyboardHeader.textContent = 'QWERTY Virtual Keyboard';\r\n    this.keyboardDOM.appendChild(this.keyboardHeader);\r\n\r\n    this.keyboardInstructions = document.createElement('p');\r\n    this.keyboardInstructions.classList.add('hg-instructions', 'sr-only');\r\n    this.keyboardInstructions.id = 'hg-virtual-keyboard-instructions';\r\n    this.keyboardInstructions.setAttribute('role', 'note');\r\n    this.keyboardInstructions.textContent = this.instructions;\r\n    this.keyboardDOM.appendChild(this.keyboardInstructions);\r\n    \r\n    // Update ARIA attributes to reference both header and instructions\r\n    this.keyboardDOM.setAttribute('aria-labelledby', this.keyboardHeader.id);\r\n    this.keyboardDOM.setAttribute('aria-describedby', this.keyboardInstructions.id);\r\n\r\n    /**\r\n     * Create row wrapper\r\n     */\r\n    this.keyboardRowsDOM = document.createElement('div');\r\n    this.keyboardRowsDOM.className = 'hg-rows';\r\n\r\n    /**\r\n     * Iterating through each row\r\n     */\r\n    layout[this.options.layoutName || this.defaultName].forEach((row: string, rIndex: number) => {\r\n      let rowArray = row.split(' ');\r\n\r\n      /**\r\n       * Enforce excludeFromLayout\r\n       */\r\n      if (\r\n        this.options.excludeFromLayout &&\r\n        this.options.excludeFromLayout[this.options.layoutName || this.defaultName]\r\n      ) {\r\n        rowArray = rowArray.filter(\r\n          (buttonName) =>\r\n            this.options.excludeFromLayout &&\r\n            !this.options.excludeFromLayout[this.options.layoutName || this.defaultName].includes(buttonName)\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Creating empty row\r\n       */\r\n      let rowDOM = document.createElement('div');\r\n      rowDOM.className += 'hg-row';\r\n\r\n      /**\r\n       * Tracking container indicators in rows\r\n       */\r\n      const containerStartIndexes: number[] = [];\r\n      const containerEndIndexes: number[] = [];\r\n\r\n      /**\r\n       * Iterating through each button in row\r\n       */\r\n      rowArray.forEach((button, bIndex) => {\r\n        /**\r\n         * Check if button has a container indicator\r\n         */\r\n        const buttonHasContainerStart =\r\n          !disableRowButtonContainers && typeof button === 'string' && button.length > 1 && button.indexOf('[') === 0;\r\n\r\n        const buttonHasContainerEnd =\r\n          !disableRowButtonContainers &&\r\n          typeof button === 'string' &&\r\n          button.length > 1 &&\r\n          button.indexOf(']') === button.length - 1;\r\n\r\n        /**\r\n         * Save container start index, if applicable\r\n         */\r\n        if (buttonHasContainerStart) {\r\n          containerStartIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\[/g, '');\r\n        }\r\n\r\n        if (buttonHasContainerEnd) {\r\n          containerEndIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\]/g, '');\r\n        }\r\n\r\n        /**\r\n         * Processing button options\r\n         */\r\n        const fctBtnClass = this.utilities.getButtonClass(button);\r\n        const buttonDisplayName = this.utilities.getButtonDisplayName(\r\n          button,\r\n          this.options.display,\r\n          this.options.mergeDisplay\r\n        );\r\n\r\n        /**\r\n         * Creating button\r\n         */\r\n        const buttonType = this.options.useButtonTag ? 'button' : 'div';\r\n        const buttonDOM = document.createElement(buttonType);\r\n        buttonDOM.className += `hg-button ${fctBtnClass}`;\r\n\r\n        /**\r\n         * Adding buttonTheme\r\n         */\r\n        buttonDOM.classList.add(...this.getButtonThemeClasses(button));\r\n\r\n        /**\r\n         * Adding buttonAttributes\r\n         */\r\n        this.setDOMButtonAttributes(button, (attribute: string, value: string) => {\r\n          buttonDOM.setAttribute(attribute, value);\r\n        });\r\n\r\n        this.activeButtonClass = 'hg-activeButton';\r\n\r\n        /**\r\n         * Handle button click event\r\n         */\r\n        /* istanbul ignore next */\r\n        if (this.utilities.pointerEventsSupported() && !useTouchEvents && !useMouseEvents) {\r\n          /**\r\n           * Handle PointerEvents\r\n           */\r\n          buttonDOM.onpointerdown = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonClicked(button, e);\r\n            this.handleButtonMouseDown(button, e);\r\n          };\r\n          buttonDOM.onpointerup = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n          buttonDOM.onpointercancel = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n        } else {\r\n          /**\r\n           * Fallback for browsers not supporting PointerEvents\r\n           */\r\n          if (useTouchEvents) {\r\n            /**\r\n             * Handle touch events\r\n             */\r\n            buttonDOM.ontouchstart = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonClicked(button, e);\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.ontouchend = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n            buttonDOM.ontouchcancel = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          } else {\r\n            /**\r\n             * Handle mouse events\r\n             */\r\n            buttonDOM.onclick = (e: KeyboardHandlerEvent) => {\r\n              this.setMouseHold(false);\r\n              /**\r\n               * Fire button handler in onclick for compatibility reasons\r\n               * This fires handler before onKeyReleased, therefore when that option is set we will fire the handler\r\n               * in onmousedown instead\r\n               */\r\n              if (\r\n                typeof this.options.onKeyReleased !== 'function' &&\r\n                !(this.options.useMouseEvents && this.options.clickOnMouseDown)\r\n              ) {\r\n                this.handleButtonClicked(button, e);\r\n              }\r\n            };\r\n            buttonDOM.onmousedown = (e: KeyboardHandlerEvent) => {\r\n              /**\r\n               * Fire button handler for onKeyReleased use-case\r\n               */\r\n              if (\r\n                (typeof this.options.onKeyReleased === 'function' ||\r\n                  (this.options.useMouseEvents && this.options.clickOnMouseDown)) &&\r\n                !this.isMouseHold\r\n              ) {\r\n                this.handleButtonClicked(button, e);\r\n              }\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.onmouseup = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          }\r\n        }\r\n\r\n        /**\r\n         * Adding identifier\r\n         */\r\n        buttonDOM.setAttribute('data-skBtn', button);\r\n\r\n        /**\r\n         * Adding unique id\r\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\r\n         */\r\n        const buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\r\n        buttonDOM.setAttribute('data-skBtnUID', buttonUID);\r\n\r\n        /**\r\n         * Adding WCAG 2.1 compliance attributes - LPjr\r\n         */\r\n        // Accessibility: Set role and focus management\r\n        if (buttonType === 'div') {\r\n          buttonDOM.setAttribute('role', 'button');\r\n        }\r\n\r\n        buttonDOM.setAttribute('tabindex', '-1'); // Only one key should be tabbable at a time\r\n        buttonDOM.setAttribute('aria-label', buttonDisplayName);\r\n\r\n        // Optional: Title attribute for screen readers\r\n        buttonDOM.setAttribute('title', buttonDisplayName);\r\n\r\n        // Example: If this is the first key, make it focusable\r\n        if (rIndex === 0 && bIndex === 0) {\r\n          buttonDOM.setAttribute('tabindex', '0');\r\n        }\r\n\r\n        /**\r\n         * Adding button label to button\r\n         */\r\n        const buttonSpanDOM = document.createElement('span');\r\n        buttonSpanDOM.innerHTML = buttonDisplayName;\r\n        buttonDOM.appendChild(buttonSpanDOM);\r\n\r\n        /**\r\n         * Adding to buttonElements\r\n         */\r\n        if (!this.buttonElements[button]) this.buttonElements[button] = [];\r\n\r\n        this.buttonElements[button].push(buttonDOM);\r\n\r\n        /**\r\n         * Appending button to row\r\n         */\r\n        rowDOM.appendChild(buttonDOM);\r\n      });\r\n\r\n      /**\r\n       * Parse containers in row\r\n       */\r\n      rowDOM = this.parseRowDOMContainers(rowDOM, rIndex, containerStartIndexes, containerEndIndexes);\r\n\r\n      /**\r\n       * Appending row to hg-rows\r\n       */\r\n      this.keyboardRowsDOM.appendChild(rowDOM);\r\n    });\r\n\r\n    /**\r\n     * Appending row to keyboard\r\n     */\r\n    this.keyboardDOM.appendChild(this.keyboardRowsDOM);\r\n\r\n    /**\r\n     * Calling onRender\r\n     */\r\n    this.onRender();\r\n\r\n    if (!this.initialized) {\r\n      /**\r\n       * Ensures that onInit and beforeFirstRender are only called once per instantiation\r\n       */\r\n      this.initialized = true;\r\n\r\n      /**\r\n       * Handling parent events\r\n       */\r\n      /* istanbul ignore next */\r\n      if (this.utilities.pointerEventsSupported() && !useTouchEvents && !useMouseEvents) {\r\n        document.onpointerup = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        this.keyboardDOM.onpointerdown = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      } else if (useTouchEvents) {\r\n        /**\r\n         * Handling ontouchend, ontouchcancel\r\n         */\r\n        document.ontouchend = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        document.ontouchcancel = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n\r\n        this.keyboardDOM.ontouchstart = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      } else if (!useTouchEvents) {\r\n        /**\r\n         * Handling mouseup\r\n         */\r\n        document.onmouseup = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        this.keyboardDOM.onmousedown = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      }\r\n\r\n      /**\r\n       * Calling onInit\r\n       */\r\n      this.onInit();\r\n    }\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboard;\r\n","import SimpleKeyboard from \"./components/Keyboard\";\r\nexport { SimpleKeyboard };\r\nexport default SimpleKeyboard;\r\n"],"names":["Utilities","_ref","getOptions","getCaretPosition","getCaretPositionEnd","dispatch","_classCallCheck","_defineProperty","button","length","this","bindMethods","key","value","includes","buttonTypeClass","getButtonType","buttonWithoutBraces","replace","buttonNormalized","concat","display","arguments","undefined","Object","assign","getDefaultDisplay","input","caretPos","caretPosEnd","moveCaret","options","commonParams","output","removeAt","apply","removeForwardsAt","addStringAt","tabCharOnTab","newLineOnEnter","Number","isInteger","debug","console","log","minus","newCaretPos","updateCaretPosAction","instance","setCaretPosition","caretPosition","source","str","position","positionEnd","slice","join","isMaxLengthReached","updateCaretPos","emojiMatchedReg","substring","match","substr","inputObj","updatedInput","maxLength","currentInput","inputName","condition","maxLengthReached","_typeof","Boolean","window","navigator","maxTouchPoints","PointerEvent","toLowerCase","trim","split","reduce","word","toUpperCase","arr","size","_toConsumableArray","Array","Math","ceil","map","_","i","index","newIndex","startMarkerIndex","indexOf","f","Reflect","construct","String","e","myClass","_step","_iterator","_createForOfIteratorHelper","getOwnPropertyNames","prototype","s","n","done","myMethod","bind","err","PhysicalKeyboard","_this","Set","altKey","ctrlKey","shiftKey","code","keyCodeToKey","keyCode","layout","_this$getOptions","lastLayout","layoutJSON","mapLayoutToEventCodes","extractAndPadLayout","default","shift","shiftActive","capslockActive","buttonPressed","getSimpleKeyboardLayoutKey","buttonDOM","buttonName","standardButtonPressed","getButtonElement","functionButtonPressed","_buttonDOM$","_buttonDOM$$onpointer","_buttonDOM","_buttonDOM$onpointerd","applyButtonStyle","buttonElement","style","background","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","isArray","forEach","physicalKeyboardHighlightPress","physicalKeyboardHighlightPressUsePointerEvents","onpointerdown","call","physicalKeyboardHighlightPressUseClick","_buttonDOM$2","click","handleButtonClicked","_buttonDOM$3","_buttonDOM$3$onpointe","_buttonDOM$onpointeru","removeAttribute","onpointerup","STANDARD_CODES","has","upper","rawKey","shiftleft","shiftright","controlleft","controlright","altleft","altright","metaleft","metaright","backspace","capslock","enter","tab","_options$layout$defau","_options$layout","_document$activeEleme","currentLayout","_options$layout2","eCode","normalizeToStandardCode","layoutEntry","toString","normal","normalizeOutput","fallbackKeys","warn","userAgent","platform","language","imeMode","document","activeElement","inputMode","isEditable","isContentEditable","time","Date","toISOString","qwertyRowLengths","processedLayout","_i","_arr","type","rows","row","push","mappedLayout","qwertyRows","rowIndex","colIndex","_layout$default$rowIn","_layout$shift$rowInde","eventCode","normalKey","CandidateBox","utilities","querySelector","pageSize","layoutCandidatesPageSize","candidateBoxElement","setTimeout","remove","isOpen","activeIndex","candidateOptions","oldListbox","replaceWith","cloneNode","pageIndex","_ref2","_this2","candidateValue","targetElement","onSelect","candidateListPages","chunkArray","renderPage","nbPages","onItemSelected","selectedCandidate","destroy","_ref3","_this$candidateBoxEle","_this3","createElement","className","setAttribute","addEventListener","_this3$candidateBoxEl","focusable","querySelectorAll","first","last","preventDefault","focus","instructionsElement","id","classList","add","innerHTML","appendChild","candidateListULElement","candidateListItem","_this3$options$displa","candidateListLIElement","getMouseEvent","mouseEvent","useTouchEvents","TouchEvent","MouseEvent","defineProperty","onclick","globalLiveRegionElement","_candidateListLIEleme","label","textContent","ontouchstart","_candidateListLIEleme2","isPrevBtnElementActive","prevBtnElement","isNextBtnElementActive","nextBtnElement","prepend","setupKeyboardNav","listbox","_this4","from","option","setActiveOption","updateActiveIndex","activateSelectedOption","prev","next","scrollIntoView","block","_next$textContent","total","activeOption","_activeOption$textCon","SimpleKeyboard","selectorOrOptions","keyboardOptions","Spacebar","keyboardDOMClass","keyboardDOM","HTMLDivElement","Error","caretPositionEnd","name","initCallback","modules","_len","baseDOMClasses","_key","filter","DOMClass","_this$handleParams","handleParams","_this$handleParams$op","announcerEl","ensureAnnouncer","_objectSpread","layoutName","theme","preventMouseDownDefault","enableLayoutCandidates","excludeFromLayout","keyboardPluginClasses","_this$options$inputNa","defaultName","buttonElements","currentInstanceName","camelCase","allKeyboardInstances","keyboardInstanceNames","keys","isFirstKeyboardInstance","physicalKeyboard","candidateBox","render","loadModules","keyboardEl","parentEl","parentElement","insertAdjacentElement","rowsEl","nextSibling","insertBefore","endPosition","_this$options","layoutCandidatesObj","layoutCandidates","layoutCandidatesCaseSensitiveMatch","layoutCandidate","inputSubstr","regexp","RegExp","escapeRegex","matchAll","candidateKey","sort","a","b","show","_this3$options","disableCandidateNormalization","enableLayoutCandidatesKeyPress","candidateStr","normalize","beforeInputUpdate","getInput","initialCaretPosition","newInputSubstr","newInput","caretPositionDiff","newCaretPosition","setInput","onKeyPress","onChange","onChangeAll","getAllInputs","_this$options2","_this$options2$inputN","getUpdatedInput","isStandardButton","activeInputElement","setSelectionRange","inputPattern","inputPatternIsValid","handleMaxLength","newInputValue","syncInstanceInputs","target","_this$candidateBox","_this$getInputCandida","getInputCandidates","showCandidatesBox","isMouseHold","stopMouseDownPropagation","stopPropagation","activeButtonClass","holdInteractionTimeout","clearTimeout","holdTimeout","setMouseHold","disableButtonHold","getMouseHold","handleButtonHold","_this5","preventMouseUpDefault","stopMouseUpPropagation","contains","recurseButtons","onKeyReleased","_this6","_this7","replaceInput","skipSync","rtl","_this8","changedOptions","onSetOptions","newOptions","_this9","optionName","JSON","stringify","keyboardRowsDOM","callback","buttons","_this0","classNameItem","buttonTheme","classNameFound","buttonThemeArray","class","_this1","_this1$options","_buttonTheme","_this1$options$button","filteredButtonArray","item","splice","buttonArr","inputVal","inputPatternRaw","didInputMatch","test","removeEventListener","handleKeyDownBound","handleKeyUpBound","handleMouseUpBound","handleTouchEndBound","handleSelectBound","updateCaretOnSelectionChange","handleSelectionChangeBound","listenersAdded","_this10","removeEventListeners","handleKeyDown","handleInternalKeyNavBound","handleInternalKeyNav","handleKeyUp","handleMouseUp","handleTouchEnd","handleSelect","handleSelectionChange","tag","event","constructor","KeyboardEvent","isSupportedEvent","getButtonAndAnnounce","physicalKeyboardHighlightPreventDefault","caretEventHandler","physicalKeyboardHighlight","handleHighlightKeyUp","bypassKeys","active","hasAttribute","_active$textContent","buttonLabel","getAttribute","logEventType","handleHighlightKeyDown","handleGetButtonAndAnnounce","pressedKey","_focused$textContent","isNamedKey","NAMED_KEYS_TO_ANNOUNCE","isPrintable","focused","focusedLabel","NAMED_READABLE","useLiveRegion","liveRegionAnnounceMode","suppressAnnouncementsOnInputFocus","tagName","displayName","getButtonDisplayName","mergeDisplay","_this11","shouldSuppressAnnouncements","isComposing","repeat","_event$target","_event$target$closest","_target$textContent","closest","announceMode","actionLabel","getAnnounceLabel","announceLiveRegion","contentResult","getContentForButton","keyLabel","_this12","context","ariaLiveTimer","requestAnimationFrame","nextButton","findNextButton","findPreviousButton","findVerticalButton","current","allButtons","idx","direction","currentRow","targetRow","currentRect","getBoundingClientRect","currentCenterX","left","width","candidates","minDelta","POSITIVE_INFINITY","_candidates","el","rect","centerX","delta","abs","_this13","targetTagName","isKeyboard","path","some","_item$hasAttribute","disableCaretPositioning","selectionStart","selectionEnd","getRtlOffset","fn","_this14","ontouchend","ontouchcancel","onmouseup","onpointercancel","onmousedown","resetRows","initialized","buttonClasses","themeObj","themeObjClasses","buttonAttributes","attrObj","attribute","processAutoTouchEvents","disableContextualWindow","oncontextmenu","autoUseTouchEvents","announcers","isConnected","setEventListeners","autoFocus","handleAutoFocus","onInit","isTouchDevice","onTouchDeviceDetected","beforeFirstRender","pointerEventsSupported","useMouseEvents","beforeRender","onRender","_this15","firstFocusableButton","fallbackButton","onModulesLoaded","_this16","KeyboardModule","keyboardModule","isConstructor","init","prop","rowDOM","containerStartIndexes","containerEndIndexes","_this17","rowDOMArray","children","removedElements","startIndex","arrIndex","endIndex","updated_startIndex","updated_endIndex","containerDOM","containerUID","containedElements","element","_this$options3","_this$options3$useLiv","_this$options4","_this$options4$liveRe","_this$options5","_this$options5$liveRe","_this$options6","_this$options6$ariaLa","_this18","layoutClass","useTouchEventsClass","disableRowButtonContainers","getKeyboardClassString","liveRegionMode","liveRegionDelay","ariaLabel","instructions","keyboardHeader","keyboardInstructions","rIndex","rowArray","bIndex","_buttonDOM$classList","buttonHasContainerStart","buttonHasContainerEnd","fctBtnClass","getButtonClass","buttonDisplayName","buttonType","useButtonTag","getButtonThemeClasses","setDOMButtonAttributes","handleButtonMouseDown","handleButtonMouseUp","clickOnMouseDown","buttonUID","buttonSpanDOM","parseRowDOMContainers","handleKeyboardContainerMouseDown"],"sourceRoot":""}