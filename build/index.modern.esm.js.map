{"version":3,"file":"index.modern.esm.js","mappings":"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","sources":["webpack://simple-keyboard/./src/lib/services/Utilities.ts","webpack://simple-keyboard/./src/lib/services/PhysicalKeyboard.ts","webpack://simple-keyboard/./src/lib/services/KeyboardLayout.ts","webpack://simple-keyboard/./src/lib/components/CandidateBox.ts","webpack://simple-keyboard/./src/lib/components/Keyboard.ts","webpack://simple-keyboard/./src/lib/index.modern.ts"],"sourcesContent":["import { KeyboardInput } from \"./../interfaces\";\r\nimport { KeyboardOptions, UtilitiesParams } from \"../interfaces\";\r\n\r\n/**\r\n * Utility Service\r\n */\r\nclass Utilities {\r\n  getOptions: () => KeyboardOptions;\r\n  getCaretPosition: () => number | null;\r\n  getCaretPositionEnd: () => number | null;\r\n  dispatch: any;\r\n  maxLengthReached!: boolean;\r\n\r\n  /**\r\n   * Creates an instance of the Utility service\r\n   */\r\n  constructor({\r\n    getOptions,\r\n    getCaretPosition,\r\n    getCaretPositionEnd,\r\n    dispatch,\r\n  }: UtilitiesParams) {\r\n    this.getOptions = getOptions;\r\n    this.getCaretPosition = getCaretPosition;\r\n    this.getCaretPositionEnd = getCaretPositionEnd;\r\n    this.dispatch = dispatch;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(Utilities, this);\r\n  }\r\n\r\n  /**\r\n   * Retrieve button type\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The button type\r\n   */\r\n  getButtonType(button: string): string {\r\n    return button.includes(\"{\") && button.includes(\"}\") && button !== \"{//}\"\r\n      ? \"functionBtn\"\r\n      : \"standardBtn\";\r\n  }\r\n\r\n  /**\r\n   * Adds default classes to a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The classes to be added to the button\r\n   */\r\n  getButtonClass(button: string): string {\r\n    const buttonTypeClass = this.getButtonType(button);\r\n    const buttonWithoutBraces = button.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    let buttonNormalized = \"\";\r\n\r\n    if (buttonTypeClass !== \"standardBtn\")\r\n      buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\r\n\r\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\r\n  }\r\n\r\n  /**\r\n   * Default button display labels\r\n   */\r\n  getDefaultDiplay() {\r\n    return {\r\n      \"{bksp}\": \"backspace\",\r\n      \"{backspace}\": \"backspace\",\r\n      \"{enter}\": \"< enter\",\r\n      \"{shift}\": \"shift\",\r\n      \"{shiftleft}\": \"shift\",\r\n      \"{shiftright}\": \"shift\",\r\n      \"{alt}\": \"alt\",\r\n      \"{s}\": \"shift\",\r\n      \"{tab}\": \"tab\",\r\n      \"{lock}\": \"caps\",\r\n      \"{capslock}\": \"caps\",\r\n      \"{accept}\": \"Submit\",\r\n      \"{space}\": \" \",\r\n      \"{//}\": \" \",\r\n      \"{esc}\": \"esc\",\r\n      \"{escape}\": \"esc\",\r\n      \"{f1}\": \"f1\",\r\n      \"{f2}\": \"f2\",\r\n      \"{f3}\": \"f3\",\r\n      \"{f4}\": \"f4\",\r\n      \"{f5}\": \"f5\",\r\n      \"{f6}\": \"f6\",\r\n      \"{f7}\": \"f7\",\r\n      \"{f8}\": \"f8\",\r\n      \"{f9}\": \"f9\",\r\n      \"{f10}\": \"f10\",\r\n      \"{f11}\": \"f11\",\r\n      \"{f12}\": \"f12\",\r\n      \"{numpaddivide}\": \"/\",\r\n      \"{numlock}\": \"lock\",\r\n      \"{arrowup}\": \"↑\",\r\n      \"{arrowleft}\": \"←\",\r\n      \"{arrowdown}\": \"↓\",\r\n      \"{arrowright}\": \"→\",\r\n      \"{prtscr}\": \"print\",\r\n      \"{scrolllock}\": \"scroll\",\r\n      \"{pause}\": \"pause\",\r\n      \"{insert}\": \"ins\",\r\n      \"{home}\": \"home\",\r\n      \"{pageup}\": \"up\",\r\n      \"{delete}\": \"del\",\r\n      \"{forwarddelete}\": \"del\",\r\n      \"{end}\": \"end\",\r\n      \"{pagedown}\": \"down\",\r\n      \"{numpadmultiply}\": \"*\",\r\n      \"{numpadsubtract}\": \"-\",\r\n      \"{numpadadd}\": \"+\",\r\n      \"{numpadenter}\": \"enter\",\r\n      \"{period}\": \".\",\r\n      \"{numpaddecimal}\": \".\",\r\n      \"{numpad0}\": \"0\",\r\n      \"{numpad1}\": \"1\",\r\n      \"{numpad2}\": \"2\",\r\n      \"{numpad3}\": \"3\",\r\n      \"{numpad4}\": \"4\",\r\n      \"{numpad5}\": \"5\",\r\n      \"{numpad6}\": \"6\",\r\n      \"{numpad7}\": \"7\",\r\n      \"{numpad8}\": \"8\",\r\n      \"{numpad9}\": \"9\",\r\n    };\r\n  }\r\n  /**\r\n   * Returns the display (label) name for a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {object} display The provided display option\r\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\r\n   */\r\n  getButtonDisplayName(\r\n    button: string,\r\n    display: KeyboardOptions[\"display\"],\r\n    mergeDisplay = false\r\n  ) {\r\n    if (mergeDisplay) {\r\n      display = Object.assign({}, this.getDefaultDiplay(), display);\r\n    } else {\r\n      display = display || this.getDefaultDiplay();\r\n    }\r\n\r\n    return display[button] || button;\r\n  }\r\n\r\n  /**\r\n   * Returns the updated input resulting from clicking a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {string} input The input string\r\n   * @param  {number} caretPos The cursor's current position\r\n   * @param  {number} caretPosEnd The cursor's current end position\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  getUpdatedInput(\r\n    button: string,\r\n    input: string,\r\n    caretPos: any,\r\n    caretPosEnd = caretPos,\r\n    moveCaret = false\r\n  ) {\r\n    const options = this.getOptions();\r\n    const commonParams: [number | undefined, number | undefined, boolean] = [\r\n      caretPos,\r\n      caretPosEnd,\r\n      moveCaret,\r\n    ];\r\n\r\n    let output = input;\r\n\r\n    if (\r\n      (button === \"{bksp}\" || button === \"{backspace}\") &&\r\n      output.length > 0\r\n    ) {\r\n      output = this.removeAt(output, ...commonParams);\r\n    } else if (\r\n      (button === \"{delete}\" || button === \"{forwarddelete}\") &&\r\n      output.length > 0\r\n    ) {\r\n      output = this.removeForwardsAt(output, ...commonParams);\r\n    } else if (button === \"{space}\")\r\n      output = this.addStringAt(output, \" \", ...commonParams);\r\n    else if (\r\n      button === \"{tab}\" &&\r\n      !(\r\n        typeof options.tabCharOnTab === \"boolean\" &&\r\n        options.tabCharOnTab === false\r\n      )\r\n    ) {\r\n      output = this.addStringAt(output, \"\\t\", ...commonParams);\r\n    } else if (\r\n      (button === \"{enter}\" || button === \"{numpadenter}\") &&\r\n      options.newLineOnEnter\r\n    )\r\n      output = this.addStringAt(output, \"\\n\", ...commonParams);\r\n    else if (\r\n      button.includes(\"numpad\") &&\r\n      Number.isInteger(Number(button[button.length - 2]))\r\n    ) {\r\n      output = this.addStringAt(\r\n        output,\r\n        button[button.length - 2],\r\n        ...commonParams\r\n      );\r\n    } else if (button === \"{numpaddivide}\")\r\n      output = this.addStringAt(output, \"/\", ...commonParams);\r\n    else if (button === \"{numpadmultiply}\")\r\n      output = this.addStringAt(output, \"*\", ...commonParams);\r\n    else if (button === \"{numpadsubtract}\")\r\n      output = this.addStringAt(output, \"-\", ...commonParams);\r\n    else if (button === \"{numpadadd}\")\r\n      output = this.addStringAt(output, \"+\", ...commonParams);\r\n    else if (button === \"{numpaddecimal}\")\r\n      output = this.addStringAt(output, \".\", ...commonParams);\r\n    else if (button === \"{\" || button === \"}\")\r\n      output = this.addStringAt(output, button, ...commonParams);\r\n    else if (!button.includes(\"{\") && !button.includes(\"}\"))\r\n      output = this.addStringAt(output, button, ...commonParams);\r\n\r\n    if(options.debug){\r\n      console.log(\"Input will be: \"+ output);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Moves the cursor position by a given amount\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPos(length: number, minus = false) {\r\n    const newCaretPos = this.updateCaretPosAction(length, minus);\r\n\r\n    this.dispatch((instance: any) => {\r\n      instance.setCaretPosition(newCaretPos);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Action method of updateCaretPos\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPosAction(length: number, minus = false) {\r\n    const options = this.getOptions();\r\n    let caretPosition = this.getCaretPosition();\r\n\r\n    if (caretPosition != null) {\r\n      if (minus) {\r\n        if (caretPosition > 0) caretPosition = caretPosition - length;\r\n      } else {\r\n        caretPosition = caretPosition + length;\r\n      }\r\n    }\r\n\r\n    if (options.debug) {\r\n      console.log(\"Caret at:\", caretPosition);\r\n    }\r\n\r\n    return caretPosition;\r\n  }\r\n\r\n  /**\r\n   * Adds a string to the input at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {string} str The string to add\r\n   * @param  {number} position The (cursor) position where the string should be added\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  addStringAt(\r\n    source: string,\r\n    str: string,\r\n    position = source.length,\r\n    positionEnd = source.length,\r\n    moveCaret = false\r\n  ) {\r\n    let output;\r\n\r\n    if (!position && position !== 0) {\r\n      output = source + str;\r\n    } else {\r\n      output = [source.slice(0, position), str, source.slice(positionEnd)].join(\r\n        \"\"\r\n      );\r\n\r\n      /**\r\n       * Avoid caret position change when maxLength is set\r\n       */\r\n      if (!this.isMaxLengthReached()) {\r\n        if (moveCaret) this.updateCaretPos(str.length);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Check whether the button is a standard button\r\n   */\r\n  isStandardButton = (button: string) =>\r\n    button && !(button[0] === \"{\" && button[button.length - 1] === \"}\");\r\n\r\n  /**\r\n   * Removes an amount of characters before a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  removeAt(\r\n    source: string,\r\n    position = source.length,\r\n    positionEnd = source.length,\r\n    moveCaret = false\r\n  ) {\r\n    if (position === 0 && positionEnd === 0) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      let prevTwoChars;\r\n      let emojiMatched;\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      if (position && position >= 0) {\r\n        prevTwoChars = source.substring(position - 2, position);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.substr(0, position - 2) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.substr(0, position - 1) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      } else {\r\n        prevTwoChars = source.slice(-2);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.slice(0, -2);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.slice(0, -1);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch((instance: any) => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Removes an amount of characters after a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   */\r\n  removeForwardsAt(\r\n    source: string,\r\n    position: number = source.length,\r\n    positionEnd: number = source.length,\r\n    moveCaret = false\r\n  ) {\r\n    if (!source?.length || position === null) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      const nextTwoChars = source.substring(position, position + 2);\r\n      const emojiMatched = nextTwoChars.match(emojiMatchedReg);\r\n\r\n      if (emojiMatched) {\r\n        output = source.substr(0, position) + source.substr(position + 2);\r\n      } else {\r\n        output = source.substr(0, position) + source.substr(position + 1);\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch((instance: any) => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\r\n   *\r\n   * @param  {object} inputObj\r\n   * @param  {string} updatedInput\r\n   */\r\n  handleMaxLength(inputObj: KeyboardInput, updatedInput: string) {\r\n    const options = this.getOptions();\r\n    const maxLength = options.maxLength;\r\n    const currentInput = inputObj[options.inputName || \"default\"];\r\n    const condition = updatedInput.length - 1 >= maxLength;\r\n\r\n    if (\r\n      /**\r\n       * If pressing this button won't add more characters\r\n       * We exit out of this limiter function\r\n       */\r\n      updatedInput.length <= currentInput.length\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (Number.isInteger(maxLength)) {\r\n      if (options.debug) {\r\n        console.log(\"maxLength (num) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        /**\r\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\r\n         */\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (typeof maxLength === \"object\") {\r\n      const condition =\r\n        updatedInput.length - 1 >= maxLength[options.inputName || \"default\"];\r\n\r\n      if (options.debug) {\r\n        console.log(\"maxLength (obj) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of maxLengthReached\r\n   */\r\n  isMaxLengthReached() {\r\n    return Boolean(this.maxLengthReached);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a touch device is being used\r\n   */\r\n  isTouchDevice() {\r\n    return \"ontouchstart\" in window || navigator.maxTouchPoints;\r\n  }\r\n\r\n  /**\r\n   * Determines whether pointer events are supported\r\n   */\r\n  pointerEventsSupported() {\r\n    return !!window.PointerEvent;\r\n  }\r\n\r\n  /**\r\n   * Bind all methods in a given class\r\n   */\r\n\r\n  static bindMethods(myClass: any, instance: any) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (const myMethod of Object.getOwnPropertyNames(myClass.prototype)) {\r\n      const excludeMethod =\r\n        myMethod === \"constructor\" || myMethod === \"bindMethods\";\r\n      if (!excludeMethod) {\r\n        instance[myMethod] = instance[myMethod].bind(instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transforms an arbitrary string to camelCase\r\n   *\r\n   * @param  {string} str The string to transform.\r\n   */\r\n  camelCase(str: string): string {\r\n    if (!str) return \"\";\r\n\r\n    return str\r\n      .toLowerCase()\r\n      .trim()\r\n      .split(/[.\\-_\\s]/g)\r\n      .reduce((str, word) =>\r\n        word.length ? str + word[0].toUpperCase() + word.slice(1) : str\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Split array into chunks\r\n   */\r\n  chunkArray<T>(arr: T[], size: number): T[][] {\r\n    return [...Array(Math.ceil(arr.length / size))].map((_, i) =>\r\n      arr.slice(size * i, size + size * i)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Escape regex input\r\n   */\r\n  escapeRegex(str: string) {\r\n    return str.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\r\n  }\r\n\r\n  /**\r\n   * Calculate caret position offset when using rtl option\r\n   */\r\n  getRtlOffset(index: number, input: string) {\r\n    let newIndex = index;\r\n    const startMarkerIndex = input.indexOf(\"\\u202B\");\r\n    const endMarkerIndex = input.indexOf(\"\\u202C\");\r\n\r\n    if(startMarkerIndex < index && startMarkerIndex != -1){ newIndex--; }\r\n    if(endMarkerIndex < index && startMarkerIndex != -1){ newIndex--; }\r\n\r\n    return newIndex < 0 ? 0 : newIndex;\r\n  }\r\n\r\n  /**\r\n   * Reusable empty function\r\n   */\r\n  static noop = () => {};\r\n\r\n  /**\r\n   * Check if a function is a constructor\r\n   */\r\n  isConstructor(f: any) {\r\n    try {\r\n      Reflect.construct(String, [], f);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default Utilities;\r\n","import { KeyboardOptions, PhysicalKeyboardParams } from '../interfaces';\r\nimport Utilities from '../services/Utilities';\r\nimport { getDefaultLayout } from '../services/KeyboardLayout';\r\n\r\n/**\r\n * Layout Key Mapping Interface\r\n */\r\ninterface LayoutKeyMapping {\r\n  normal: string | number;\r\n  shift: string | number;\r\n}\r\n\r\n/**\r\n * Physical Keyboard Service\r\n */\r\nclass PhysicalKeyboard {\r\n  getOptions: () => KeyboardOptions;\r\n  dispatch: any;\r\n  layoutJSON: Record<string, LayoutKeyMapping> | null = null;\r\n  lastLayout = '';\r\n  shiftActive = false;\r\n  capslockActive = false;\r\n\r\n  /**\r\n   * Creates an instance of the PhysicalKeyboard service\r\n   */\r\n  constructor({ dispatch, getOptions }: PhysicalKeyboardParams) {\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.dispatch = dispatch;\r\n    this.getOptions = getOptions;\r\n\r\n    if (this.getOptions() && this.getOptions().layout) {\r\n      this.lastLayout = this.getOptions()?.layout?.default?.[1] || '';\r\n      const layout = this.getOptions().layout;\r\n      if (layout) {\r\n        this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(layout));\r\n      }\r\n    } else {\r\n      this.lastLayout = getDefaultLayout().default[1];\r\n      this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(getDefaultLayout()));\r\n    }\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(PhysicalKeyboard, this);\r\n  }\r\n\r\n  handleHighlightKeyDown(e: KeyboardEvent) {\r\n    const options = this.getOptions();\r\n\r\n    // if (options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)) {\r\n    //   e.preventDefault();\r\n    //   e.stopImmediatePropagation();\r\n    // }\r\n\r\n    if ((e.code === 'ShiftLeft' || e.code === 'ShiftRight') && !this.shiftActive) {\r\n      this.shiftActive = !this.shiftActive;\r\n    }\r\n\r\n    if (e.code === 'CapsLock') {\r\n      this.capslockActive = !this.capslockActive;\r\n    }\r\n\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\r\n\r\n    this.dispatch((instance: any) => {\r\n      const standardButtonPressed = instance.getButtonElement(buttonPressed);\r\n      const functionButtonPressed = instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      let buttonDOM;\r\n      let buttonName: string;\r\n\r\n      if (standardButtonPressed) {\r\n        buttonDOM = standardButtonPressed;\r\n        buttonName = buttonPressed;\r\n      } else if (functionButtonPressed) {\r\n        buttonDOM = functionButtonPressed;\r\n        buttonName = `{${buttonPressed}}`;\r\n      } else {\r\n        return;\r\n      }\r\n\r\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\r\n        buttonElement.style.background = options.physicalKeyboardHighlightBgColor || '#dadce4';\r\n        buttonElement.style.color = options.physicalKeyboardHighlightTextColor || 'black';\r\n      };\r\n\r\n      if (buttonDOM) {\r\n        if (Array.isArray(buttonDOM)) {\r\n          buttonDOM.forEach((buttonElement) => applyButtonStyle(buttonElement));\r\n\r\n          // Even though we have an array of buttons, we just want to press one of them\r\n          if (options.physicalKeyboardHighlightPress) {\r\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n              buttonDOM[0]?.onpointerdown?.(e);\r\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\r\n              buttonDOM[0]?.click();\r\n            } else {\r\n              instance.handleButtonClicked(buttonName, e);\r\n            }\r\n          }\r\n        } else {\r\n          applyButtonStyle(buttonDOM);\r\n\r\n          if (options.physicalKeyboardHighlightPress) {\r\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n              buttonDOM?.onpointerdown?.(e);\r\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\r\n              buttonDOM.click();\r\n            } else {\r\n              instance.handleButtonClicked(buttonName, e);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  handleHighlightKeyUp(e: KeyboardEvent) {\r\n    const options = this.getOptions();\r\n\r\n    // if (options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)) {\r\n    //   e.preventDefault();\r\n    //   e.stopImmediatePropagation();\r\n    // }\r\n\r\n    if (e.code === 'ShiftLeft' || e.code === 'ShiftRight') {\r\n      this.shiftActive = false;\r\n    }\r\n\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\r\n\r\n    this.dispatch((instance: any) => {\r\n      const buttonDOM = instance.getButtonElement(buttonPressed) || instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\r\n        if (buttonElement.removeAttribute) {\r\n          buttonElement.removeAttribute('style');\r\n        }\r\n      };\r\n\r\n      if (buttonDOM) {\r\n        if (Array.isArray(buttonDOM)) {\r\n          buttonDOM.forEach((buttonElement) => applyButtonStyle(buttonElement));\r\n\r\n          // Even though we have an array of buttons, we just want to press one of them\r\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n            buttonDOM[0]?.onpointerup?.(e);\r\n          }\r\n        } else {\r\n          applyButtonStyle(buttonDOM);\r\n\r\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n            buttonDOM?.onpointerup?.(e);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  STANDARD_CODES = new Set([\r\n    // Alphanumeric\r\n    'Backquote',\r\n    'Digit0',\r\n    'Digit1',\r\n    'Digit2',\r\n    'Digit3',\r\n    'Digit4',\r\n    'Digit5',\r\n    'Digit6',\r\n    'Digit7',\r\n    'Digit8',\r\n    'Digit9',\r\n    'KeyA',\r\n    'KeyB',\r\n    'KeyC',\r\n    'KeyD',\r\n    'KeyE',\r\n    'KeyF',\r\n    'KeyG',\r\n    'KeyH',\r\n    'KeyI',\r\n    'KeyJ',\r\n    'KeyK',\r\n    'KeyL',\r\n    'KeyM',\r\n    'KeyN',\r\n    'KeyO',\r\n    'KeyP',\r\n    'KeyQ',\r\n    'KeyR',\r\n    'KeyS',\r\n    'KeyT',\r\n    'KeyU',\r\n    'KeyV',\r\n    'KeyW',\r\n    'KeyX',\r\n    'KeyY',\r\n    'KeyZ',\r\n\r\n    // Control & nav\r\n    'Enter',\r\n    'Escape',\r\n    'Backspace',\r\n    'Tab',\r\n    'Space',\r\n    'ArrowLeft',\r\n    'ArrowRight',\r\n    'ArrowUp',\r\n    'ArrowDown',\r\n    'Delete',\r\n    'Insert',\r\n    'Home',\r\n    'End',\r\n    'PageUp',\r\n    'PageDown',\r\n\r\n    // Modifier keys\r\n    'ShiftLeft',\r\n    'ShiftRight',\r\n    'ControlLeft',\r\n    'ControlRight',\r\n    'AltLeft',\r\n    'AltRight',\r\n    'MetaLeft',\r\n    'MetaRight',\r\n    'CapsLock',\r\n\r\n    // Symbols & punctuation\r\n    'Minus',\r\n    'Equal',\r\n    'BracketLeft',\r\n    'BracketRight',\r\n    'Backslash',\r\n    'Semicolon',\r\n    'Quote',\r\n    'Comma',\r\n    'Period',\r\n    'Slash',\r\n\r\n    // Function keys\r\n    'F1',\r\n    'F2',\r\n    'F3',\r\n    'F4',\r\n    'F5',\r\n    'F6',\r\n    'F7',\r\n    'F8',\r\n    'F9',\r\n    'F10',\r\n    'F11',\r\n    'F12',\r\n\r\n    // Numpad\r\n    'NumLock',\r\n    'Numpad0',\r\n    'Numpad1',\r\n    'Numpad2',\r\n    'Numpad3',\r\n    'Numpad4',\r\n    'Numpad5',\r\n    'Numpad6',\r\n    'Numpad7',\r\n    'Numpad8',\r\n    'Numpad9',\r\n    'NumpadAdd',\r\n    'NumpadSubtract',\r\n    'NumpadMultiply',\r\n    'NumpadDivide',\r\n    'NumpadDecimal',\r\n    'NumpadEnter',\r\n\r\n    // Misc\r\n    'ScrollLock',\r\n    'Pause',\r\n    'PrintScreen',\r\n    'ContextMenu',\r\n  ]);\r\n\r\n  /**\r\n   * Normalize a code string to match the official `e.code` spec format.\r\n   * Returns null if no match is found.\r\n   */\r\n  normalizeToStandardCode(input: string): string | null {\r\n    if (!input || typeof input !== 'string') return null;\r\n\r\n    if (this.STANDARD_CODES.has(input)) return input;\r\n\r\n    const upper = input.trim();\r\n    for (const code of this.STANDARD_CODES) {\r\n      if (code.toLowerCase() === upper.toLowerCase()) {\r\n        return code;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  normalizeOutput(rawKey: string): string {\r\n    const normalizeKeyMap: Record<string, string> = {\r\n      shiftleft: 'shift',\r\n      shiftright: 'shift',\r\n      controlleft: 'ctrl',\r\n      controlright: 'ctrl',\r\n      altleft: 'alt',\r\n      altright: 'alt',\r\n      metaleft: 'meta',\r\n      metaright: 'meta',\r\n      backspace: 'bksp',\r\n      capslock: 'lock',\r\n      enter: 'enter',\r\n      tab: 'tab',\r\n    };\r\n\r\n    const key = rawKey.toLowerCase();\r\n    return normalizeKeyMap[key] || (key.length > 1 ? key : rawKey);\r\n  }\r\n\r\n  /**\r\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\r\n   * @param  {object} e The KeyboardEvent\r\n   * @returns {string} The simple-keyboard layout key\r\n   */\r\n  getSimpleKeyboardLayoutKey(e: KeyboardEvent): string {\r\n    let output = '';\r\n\r\n    const options = this.getOptions();\r\n    const currentLayout = options?.layout?.default?.[1] ?? getDefaultLayout().default[1];\r\n    if (this.lastLayout !== currentLayout) {\r\n      this.lastLayout = currentLayout || '';\r\n      const layout = options?.layout ?? getDefaultLayout();\r\n      this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(layout));\r\n    }\r\n\r\n    const eCode = this.normalizeToStandardCode(e.code);\r\n\r\n    // if we have a valid code and it's in the layout, return early\r\n    if (this.layoutJSON && eCode && this.layoutJSON[eCode]) {\r\n      const layoutEntry = this.layoutJSON[eCode];\r\n      output = this.shiftActive || this.capslockActive ? layoutEntry.shift.toString() : layoutEntry.normal.toString();\r\n\r\n      const normalized = this.normalizeOutput(output);\r\n      return normalized;\r\n    }\r\n\r\n    // fallback path for known safe keys\r\n    const fallbackKeys = new Set(['backspace', 'enter', 'tab', 'escape']);\r\n    const key = (e.key || '').toLowerCase();\r\n    if (fallbackKeys.has(key)) {\r\n      output = key;\r\n      const normalized = this.normalizeOutput(output);\r\n      return normalized;\r\n    }\r\n\r\n    // unmapped key — log it and return blank\r\n    console.warn('[simple-keyboard][Edge Case Triggered] Unmapped key event:', {\r\n      code: e.code,\r\n      key: e.key,\r\n      keyCode: e.keyCode,\r\n      layoutJSON: this.layoutJSON,\r\n      userAgent: navigator.userAgent, // Browser + OS info\r\n      platform: navigator.platform, // OS-level platform\r\n      language: navigator.language, // Active input language (e.g., \"ko-KR\")\r\n      imeMode:\r\n        document.activeElement && 'inputMode' in document.activeElement\r\n          ? (document.activeElement as HTMLInputElement | HTMLTextAreaElement).inputMode\r\n          : 'unknown', // Input method\r\n      isEditable: (document.activeElement as HTMLElement)?.isContentEditable || false, // Useful for composition\r\n      time: new Date().toISOString(),\r\n    });\r\n\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * Retrieve key from keyCode\r\n   */\r\n  keyCodeToKey(keyCode: number): string {\r\n    return (\r\n      {\r\n        8: 'Backspace',\r\n        9: 'Tab',\r\n        13: 'Enter',\r\n        16: 'Shift',\r\n        17: 'Ctrl',\r\n        18: 'Alt',\r\n        19: 'Pause',\r\n        20: 'CapsLock',\r\n        27: 'Esc',\r\n        32: 'Space',\r\n        33: 'PageUp',\r\n        34: 'PageDown',\r\n        35: 'End',\r\n        36: 'Home',\r\n        37: 'ArrowLeft',\r\n        38: 'ArrowUp',\r\n        39: 'ArrowRight',\r\n        40: 'ArrowDown',\r\n        45: 'Insert',\r\n        46: 'Delete',\r\n        48: '0',\r\n        49: '1',\r\n        50: '2',\r\n        51: '3',\r\n        52: '4',\r\n        53: '5',\r\n        54: '6',\r\n        55: '7',\r\n        56: '8',\r\n        57: '9',\r\n        65: 'A',\r\n        66: 'B',\r\n        67: 'C',\r\n        68: 'D',\r\n        69: 'E',\r\n        70: 'F',\r\n        71: 'G',\r\n        72: 'H',\r\n        73: 'I',\r\n        74: 'J',\r\n        75: 'K',\r\n        76: 'L',\r\n        77: 'M',\r\n        78: 'N',\r\n        79: 'O',\r\n        80: 'P',\r\n        81: 'Q',\r\n        82: 'R',\r\n        83: 'S',\r\n        84: 'T',\r\n        85: 'U',\r\n        86: 'V',\r\n        87: 'W',\r\n        88: 'X',\r\n        89: 'Y',\r\n        90: 'Z',\r\n        91: 'Meta',\r\n        96: 'Numpad0',\r\n        97: 'Numpad1',\r\n        98: 'Numpad2',\r\n        99: 'Numpad3',\r\n        100: 'Numpad4',\r\n        101: 'Numpad5',\r\n        102: 'Numpad6',\r\n        103: 'Numpad7',\r\n        104: 'Numpad8',\r\n        105: 'Numpad9',\r\n        106: 'NumpadMultiply',\r\n        107: 'NumpadAdd',\r\n        109: 'NumpadSubtract',\r\n        110: 'NumpadDecimal',\r\n        111: 'NumpadDivide',\r\n        112: 'F1',\r\n        113: 'F2',\r\n        114: 'F3',\r\n        115: 'F4',\r\n        116: 'F5',\r\n        117: 'F6',\r\n        118: 'F7',\r\n        119: 'F8',\r\n        120: 'F9',\r\n        121: 'F10',\r\n        122: 'F11',\r\n        123: 'F12',\r\n        144: 'NumLock',\r\n        145: 'ScrollLock',\r\n        186: ';',\r\n        187: '=',\r\n        188: ',',\r\n        189: '-',\r\n        190: '.',\r\n        191: '/',\r\n        192: '`',\r\n        219: '[',\r\n        220: '\\\\',\r\n        221: ']',\r\n        222: \"'\",\r\n      }[keyCode] || ''\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Extracts and pads a layout object\r\n   * @param  {object} layout The layout object\r\n   * @returns {object} The layout object with padding\r\n   */\r\n  extractAndPadLayout(layout: Record<string, string[]>): Record<string, (string | number)[][]> {\r\n    const qwertyRowLengths = [14, 14, 13, 12, 3]; // Number of keys per QWERTY row\r\n\r\n    const processedLayout: Record<string, (string | number)[][]> = { default: [], shift: [] };\r\n\r\n    for (const type of ['default', 'shift']) {\r\n      if (!layout[type]) continue; // Skip if layout type is missing\r\n\r\n      const rows = layout[type].map((row) => row.split(' '));\r\n\r\n      for (let i = 0; i < qwertyRowLengths.length; i++) {\r\n        processedLayout[type][i] = rows[i] ? [...rows[i]] : [];\r\n        while (processedLayout[type][i].length < qwertyRowLengths[i]) {\r\n          processedLayout[type][i].push(-1); // Fill missing spots\r\n        }\r\n      }\r\n    }\r\n\r\n    return processedLayout;\r\n  }\r\n\r\n  /**\r\n   * Maps a layout object to event codes\r\n   * @param  {object} layout The layout object\r\n   * @returns {object} The layout object with event codes\r\n   */\r\n\r\n  mapLayoutToEventCodes(layout: Record<string, (string | number)[][]>): Record<string, LayoutKeyMapping> {\r\n    const mappedLayout: Record<string, LayoutKeyMapping> = {};\r\n\r\n    const qwertyRows = [\r\n      [\r\n        'Backquote',\r\n        'Digit1',\r\n        'Digit2',\r\n        'Digit3',\r\n        'Digit4',\r\n        'Digit5',\r\n        'Digit6',\r\n        'Digit7',\r\n        'Digit8',\r\n        'Digit9',\r\n        'Digit0',\r\n        'Minus',\r\n        'Equal',\r\n        'Backspace',\r\n      ],\r\n      [\r\n        'Tab',\r\n        'KeyQ',\r\n        'KeyW',\r\n        'KeyE',\r\n        'KeyR',\r\n        'KeyT',\r\n        'KeyY',\r\n        'KeyU',\r\n        'KeyI',\r\n        'KeyO',\r\n        'KeyP',\r\n        'BracketLeft',\r\n        'BracketRight',\r\n        'Backslash',\r\n      ],\r\n      [\r\n        'CapsLock',\r\n        'KeyA',\r\n        'KeyS',\r\n        'KeyD',\r\n        'KeyF',\r\n        'KeyG',\r\n        'KeyH',\r\n        'KeyJ',\r\n        'KeyK',\r\n        'KeyL',\r\n        'Semicolon',\r\n        'Quote',\r\n        'Enter',\r\n      ],\r\n      ['ShiftLeft', 'KeyZ', 'KeyX', 'KeyC', 'KeyV', 'KeyB', 'KeyN', 'KeyM', 'Comma', 'Period', 'Slash', 'ShiftRight'],\r\n      ['ControlLeft', 'AltLeft', 'Space'],\r\n    ];\r\n\r\n    for (let rowIndex = 0; rowIndex < qwertyRows.length; rowIndex++) {\r\n      for (let colIndex = 0; colIndex < qwertyRows[rowIndex].length; colIndex++) {\r\n        const eventCode = qwertyRows[rowIndex][colIndex];\r\n        const normalKey = layout.default[rowIndex][colIndex] ?? '';\r\n        const shiftKey = layout.shift[rowIndex][colIndex] ?? '';\r\n\r\n        mappedLayout[eventCode] = {\r\n          normal: normalKey !== -1 ? normalKey : '',\r\n          shift: shiftKey !== -1 ? shiftKey : '',\r\n        };\r\n      }\r\n    }\r\n\r\n    return mappedLayout;\r\n  }\r\n\r\n  isModifierKey = (e: KeyboardEvent): boolean => {\r\n    return (\r\n      e.altKey ||\r\n      e.ctrlKey ||\r\n      e.shiftKey ||\r\n      ['Tab', 'CapsLock', 'Esc', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(\r\n        e.code || e.key || this.keyCodeToKey(e?.keyCode)\r\n      )\r\n    );\r\n  };\r\n}\r\n\r\nexport default PhysicalKeyboard;\r\n","import { KeyboardLayoutObject } from \"../interfaces\";\r\n\r\nexport const getDefaultLayout = (): KeyboardLayoutObject => {\r\n  return {\r\n    default: [\r\n      \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\r\n      \"{tab} q w e r t y u i o p [ ] \\\\\",\r\n      \"{lock} a s d f g h j k l ; ' {enter}\",\r\n      \"{shift} z x c v b n m , . / {shift}\",\r\n      \".com @ {space}\",\r\n    ],\r\n    shift: [\r\n      \"~ ! @ # $ % ^ & * ( ) _ + {bksp}\",\r\n      \"{tab} Q W E R T Y U I O P { } |\",\r\n      '{lock} A S D F G H J K L : \" {enter}',\r\n      \"{shift} Z X C V B N M < > ? {shift}\",\r\n      \".com @ {space}\",\r\n    ],\r\n  };\r\n};\r\n","import \"./css/CandidateBox.css\";\r\n\r\nimport Utilities from \"../services/Utilities\";\r\nimport {\r\n  CandidateBoxParams,\r\n  CandidateBoxRenderParams,\r\n  CandidateBoxShowParams,\r\n  KeyboardOptions,\r\n} from \"./../interfaces\";\r\n\r\nclass CandidateBox {\r\n  utilities: Utilities;\r\n  options: KeyboardOptions;\r\n  candidateBoxElement!: HTMLDivElement;\r\n  pageIndex = 0;\r\n  pageSize: number;\r\n\r\n  constructor({ utilities, options }: CandidateBoxParams) {\r\n    this.utilities = utilities;\r\n    this.options = options;\r\n    Utilities.bindMethods(CandidateBox, this);\r\n    this.pageSize = this.utilities.getOptions().layoutCandidatesPageSize || 5;\r\n  }\r\n\r\n  destroy() {\r\n    if (this.candidateBoxElement) {\r\n      this.candidateBoxElement.remove();\r\n      this.pageIndex = 0;\r\n    }\r\n  }\r\n\r\n  show({\r\n    candidateValue,\r\n    targetElement,\r\n    onSelect,\r\n  }: CandidateBoxShowParams): void {\r\n    if (!candidateValue || !candidateValue.length) {\r\n      return;\r\n    }\r\n\r\n    const candidateListPages = this.utilities.chunkArray(\r\n      candidateValue.split(\" \"),\r\n      this.pageSize\r\n    );\r\n\r\n    this.renderPage({\r\n      candidateListPages,\r\n      targetElement,\r\n      pageIndex: this.pageIndex,\r\n      nbPages: candidateListPages.length,\r\n      onItemSelected: (selectedCandidate: string, e: MouseEvent) => {\r\n        onSelect(selectedCandidate, e);\r\n        this.destroy();\r\n      },\r\n    });\r\n  }\r\n\r\n  renderPage({\r\n    candidateListPages,\r\n    targetElement,\r\n    pageIndex,\r\n    nbPages,\r\n    onItemSelected,\r\n  }: CandidateBoxRenderParams) {\r\n    // Remove current candidate box, if any\r\n    this.candidateBoxElement?.remove();\r\n\r\n    // Create candidate box element\r\n    this.candidateBoxElement = document.createElement(\"div\");\r\n    this.candidateBoxElement.className = \"hg-candidate-box\";\r\n\r\n    // Candidate box list\r\n    const candidateListULElement = document.createElement(\"ul\");\r\n    candidateListULElement.className = \"hg-candidate-box-list\";\r\n\r\n    // Create Candidate box list items\r\n    candidateListPages[pageIndex].forEach((candidateListItem) => {\r\n      const candidateListLIElement = document.createElement(\"li\");\r\n      const getMouseEvent = () => {\r\n        const mouseEvent = new (this.options.useTouchEvents ? TouchEvent : MouseEvent)(\"click\");\r\n        Object.defineProperty(mouseEvent, \"target\", {\r\n          value: candidateListLIElement,\r\n        });\r\n        return mouseEvent;\r\n      };\r\n\r\n      candidateListLIElement.className = \"hg-candidate-box-list-item\";\r\n      candidateListLIElement.innerHTML = this.options.display?.[candidateListItem] || candidateListItem;\r\n\r\n      if(this.options.useTouchEvents) {\r\n        candidateListLIElement.ontouchstart = (e: any) =>\r\n          onItemSelected(candidateListItem, e || getMouseEvent());\r\n      } else {\r\n        candidateListLIElement.onclick = (e = getMouseEvent() as MouseEvent) =>\r\n          onItemSelected(candidateListItem, e);\r\n      }\r\n\r\n      // Append list item to ul\r\n      candidateListULElement.appendChild(candidateListLIElement);\r\n    });\r\n\r\n    // Add previous button\r\n    const isPrevBtnElementActive = pageIndex > 0;\r\n    const prevBtnElement = document.createElement(\"div\");\r\n    prevBtnElement.classList.add(\"hg-candidate-box-prev\");\r\n    isPrevBtnElementActive &&\r\n      prevBtnElement.classList.add(\"hg-candidate-box-btn-active\");\r\n\r\n    const prevBtnElementClickAction = () => {\r\n      if (!isPrevBtnElementActive) return;\r\n      this.renderPage({\r\n        candidateListPages,\r\n        targetElement,\r\n        pageIndex: pageIndex - 1,\r\n        nbPages,\r\n        onItemSelected,\r\n      });\r\n    };\r\n\r\n    if(this.options.useTouchEvents) {\r\n      prevBtnElement.ontouchstart = prevBtnElementClickAction;\r\n    } else {\r\n      prevBtnElement.onclick = prevBtnElementClickAction;\r\n    }\r\n    \r\n    this.candidateBoxElement.appendChild(prevBtnElement);\r\n\r\n    // Add elements to container\r\n    this.candidateBoxElement.appendChild(candidateListULElement);\r\n\r\n    // Add next button\r\n    const isNextBtnElementActive = pageIndex < nbPages - 1;\r\n    const nextBtnElement = document.createElement(\"div\");\r\n    nextBtnElement.classList.add(\"hg-candidate-box-next\");\r\n    isNextBtnElementActive &&\r\n      nextBtnElement.classList.add(\"hg-candidate-box-btn-active\");\r\n\r\n    const nextBtnElementClickAction = () => {\r\n      if (!isNextBtnElementActive) return;\r\n      this.renderPage({\r\n        candidateListPages,\r\n        targetElement,\r\n        pageIndex: pageIndex + 1,\r\n        nbPages,\r\n        onItemSelected,\r\n      });\r\n    };\r\n\r\n    if(this.options.useTouchEvents) {\r\n      nextBtnElement.ontouchstart = nextBtnElementClickAction;\r\n    } else {\r\n      nextBtnElement.onclick = nextBtnElementClickAction;\r\n    }\r\n\r\n    this.candidateBoxElement.appendChild(nextBtnElement);\r\n\r\n    // Append candidate box to target element\r\n    targetElement.prepend(this.candidateBoxElement);\r\n  }\r\n}\r\n\r\nexport default CandidateBox;\r\n","import './css/Keyboard.css';\r\n\r\nimport { getDefaultLayout } from '../services/KeyboardLayout';\r\nimport PhysicalKeyboard from '../services/PhysicalKeyboard';\r\nimport Utilities from '../services/Utilities';\r\nimport {\r\n  KeyboardOptions,\r\n  KeyboardInput,\r\n  KeyboardButtonElements,\r\n  KeyboardHandlerEvent,\r\n  KeyboardElement,\r\n  SKWindow,\r\n} from '../interfaces';\r\nimport CandidateBox from './CandidateBox';\r\n\r\n/**\r\n * Root class for simple-keyboard.\r\n * This class:\r\n * - Parses the options\r\n * - Renders the rows and buttons\r\n * - Handles button functionality\r\n */\r\nclass SimpleKeyboard {\r\n  input!: KeyboardInput;\r\n  options!: KeyboardOptions;\r\n  utilities!: Utilities;\r\n  caretPosition!: number | null;\r\n  caretPositionEnd!: number | null;\r\n  keyboardDOM!: KeyboardElement;\r\n  keyboardPluginClasses!: string;\r\n  keyboardDOMClass!: string;\r\n  buttonElements!: KeyboardButtonElements;\r\n  currentInstanceName!: string;\r\n  allKeyboardInstances!: { [key: string]: SimpleKeyboard };\r\n  keyboardInstanceNames!: string[];\r\n  isFirstKeyboardInstance!: boolean;\r\n  physicalKeyboard!: PhysicalKeyboard;\r\n  modules!: { [key: string]: any };\r\n  activeButtonClass!: string;\r\n  holdInteractionTimeout!: number;\r\n  holdTimeout!: number;\r\n  isMouseHold!: boolean;\r\n  initialized!: boolean;\r\n  candidateBox!: CandidateBox | null;\r\n  keyboardRowsDOM!: KeyboardElement;\r\n  defaultName = 'default';\r\n  activeInputElement: HTMLInputElement | HTMLTextAreaElement | null = null;\r\n  listenersAdded = false;\r\n  liveRegion: HTMLElement | null = null;\r\n  ariaLiveTimer: ReturnType<typeof setTimeout> | null = null;\r\n  handleKeyDownBound!: (event: KeyboardEvent) => void;\r\n  handleInternalKeyNavBound!: (event: KeyboardEvent) => void;\r\n  handleKeyUpBound!: (event: KeyboardEvent) => void;\r\n  handleMouseDownBound!: (event: MouseEvent) => void;\r\n  handleMouseUpBound!: (event: MouseEvent) => void;\r\n  handleTouchEndBound!: (event: TouchEvent) => void;\r\n  handleSelectBound!: (event: Event) => void;\r\n  handleSelectionChangeBound!: (event: Event) => void;\r\n\r\n  /**\r\n   * Creates an instance of SimpleKeyboard\r\n   * @param {Array} selectorOrOptions If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\r\n   */\r\n  constructor(selectorOrOptions?: string | HTMLDivElement | KeyboardOptions, keyboardOptions?: KeyboardOptions) {\r\n    if (typeof window === 'undefined') return;\r\n\r\n    const { keyboardDOMClass, keyboardDOM, options = {} } = this.handleParams(selectorOrOptions, keyboardOptions);\r\n\r\n    /**\r\n     * Initializing Utilities\r\n     */\r\n    this.utilities = new Utilities({\r\n      getOptions: this.getOptions,\r\n      getCaretPosition: this.getCaretPosition,\r\n      getCaretPositionEnd: this.getCaretPositionEnd,\r\n      dispatch: this.dispatch,\r\n    });\r\n\r\n    /**\r\n     * Caret position\r\n     */\r\n    this.caretPosition = null;\r\n\r\n    /**\r\n     * Caret position end\r\n     */\r\n    this.caretPositionEnd = null;\r\n\r\n    /**\r\n     * Processing options\r\n     */\r\n    this.keyboardDOM = keyboardDOM;\r\n\r\n    /**\r\n     * @type {object}\r\n     * @property {object} layout Modify the keyboard layout.\r\n     * @property {string} layoutName Specifies which layout should be used.\r\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\r\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\r\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\r\n     * @property {array} buttonTheme A prop to add your own css classes to one or several buttons.\r\n     * @property {array} buttonAttributes A prop to add your own attributes to one or several buttons.\r\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\r\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\r\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\r\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\r\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\r\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\r\n     * @property {boolean} physicalKeyboardHighlightPress Presses keys highlighted by physicalKeyboardHighlight\r\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\r\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\r\n     * @property {boolean} physicalKeyboardHighlightPressUseClick Whether physicalKeyboardHighlightPress should use clicks to trigger buttons.\r\n     * @property {boolean} physicalKeyboardHighlightPressUsePointerEvents Whether physicalKeyboardHighlightPress should use pointer events to trigger buttons.\r\n     * @property {boolean} physicalKeyboardHighlightPreventDefault Whether physicalKeyboardHighlight should use preventDefault to disable default browser actions.\r\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\r\n     * @property {boolean} preventMouseUpDefault Calling preventDefault for the mouseup events.\r\n     * @property {boolean} stopMouseDownPropagation Stops pointer down events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {boolean} stopMouseUpPropagation Stops pointer up events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\r\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\r\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n     * @property {function(keyboard: Keyboard):void} beforeInputUpdate Perform an action before any input change\r\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\r\n     * @property {boolean} useButtonTag Render buttons as a button element instead of a div element.\r\n     * @property {boolean} disableCaretPositioning A prop to ensure characters are always be added/removed at the end of the string.\r\n     * @property {object} inputPattern Restrains input(s) change to the defined regular expression pattern.\r\n     * @property {boolean} useTouchEvents Instructs simple-keyboard to use touch events instead of click events.\r\n     * @property {boolean} autoUseTouchEvents Enable useTouchEvents automatically when touch device is detected.\r\n     * @property {boolean} useMouseEvents Opt out of PointerEvents handling, falling back to the prior mouse event logic.\r\n     * @property {function} destroy Clears keyboard listeners and DOM elements.\r\n     * @property {boolean} disableButtonHold Disable button hold action.\r\n     * @property {boolean} rtl Adds unicode right-to-left control characters to input return values.\r\n     * @property {function} onKeyReleased Executes the callback function on key release.\r\n     * @property {array} modules Module classes to be loaded by simple-keyboard.\r\n     * @property {boolean} enableLayoutCandidates Enable input method editor candidate list support.\r\n     * @property {object} excludeFromLayout Buttons to exclude from layout\r\n     * @property {number} layoutCandidatesPageSize Determines size of layout candidate list\r\n     * @property {boolean} layoutCandidatesCaseSensitiveMatch Determines whether layout candidate match should be case sensitive.\r\n     * @property {boolean} disableCandidateNormalization Disables the automatic normalization for selected layout candidates\r\n     * @property {boolean} enableLayoutCandidatesKeyPress Enables onKeyPress triggering for layoutCandidate items\r\n     * @property {boolean} updateCaretOnSelectionChange Updates caret when selectionchange event is fired\r\n     * @property {boolean} clickOnMouseDown When useMouseEvents is enabled, this option allows you to trigger a button click event on mousedown\r\n     */\r\n    this.options = {\r\n      layoutName: 'default',\r\n      theme: 'hg-theme-default',\r\n      inputName: 'default',\r\n      preventMouseDownDefault: false,\r\n      enableLayoutCandidates: true,\r\n      excludeFromLayout: {},\r\n      ...options,\r\n    };\r\n\r\n    /**\r\n     * @type {object} Classes identifying loaded plugins\r\n     */\r\n    this.keyboardPluginClasses = '';\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(SimpleKeyboard, this);\r\n\r\n    /**\r\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\r\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\r\n     * @example\r\n     * // To get entered input\r\n     * const input = keyboard.getInput();\r\n     *\r\n     * // To clear entered input.\r\n     * keyboard.clearInput();\r\n     *\r\n     * @type {object}\r\n     * @property {object} default Default SimpleKeyboard internal input.\r\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\r\n     */\r\n    const { inputName = this.defaultName } = this.options;\r\n    this.input = {};\r\n    this.input[inputName] = '';\r\n\r\n    /**\r\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\r\n     */\r\n    this.keyboardDOMClass = keyboardDOMClass;\r\n\r\n    /**\r\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\r\n     */\r\n    this.buttonElements = {};\r\n\r\n    /**\r\n     * Simple-keyboard Instances\r\n     * This enables multiple simple-keyboard support with easier management\r\n     */\r\n    if (!(window as SKWindow)['SimpleKeyboardInstances']) (window as SKWindow)['SimpleKeyboardInstances'] = {};\r\n\r\n    this.currentInstanceName = this.utilities.camelCase(this.keyboardDOMClass);\r\n    (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName] = this;\r\n\r\n    /**\r\n     * Instance vars\r\n     */\r\n    this.allKeyboardInstances = (window as SKWindow)['SimpleKeyboardInstances'];\r\n    this.keyboardInstanceNames = Object.keys((window as SKWindow)['SimpleKeyboardInstances']);\r\n    this.isFirstKeyboardInstance = this.keyboardInstanceNames[0] === this.currentInstanceName;\r\n\r\n    /**\r\n     * Physical Keyboard support\r\n     */\r\n    this.physicalKeyboard = new PhysicalKeyboard({\r\n      dispatch: this.dispatch,\r\n      getOptions: this.getOptions,\r\n    });\r\n\r\n    /**\r\n     * Initializing CandidateBox\r\n     */\r\n    this.candidateBox = this.options.enableLayoutCandidates\r\n      ? new CandidateBox({\r\n          utilities: this.utilities,\r\n          options: this.options,\r\n        })\r\n      : null;\r\n\r\n    /**\r\n     * Rendering keyboard\r\n     */\r\n    if (this.keyboardDOM) this.render();\r\n    else {\r\n      console.warn(`\".${keyboardDOMClass}\" was not found in the DOM.`);\r\n      throw new Error('KEYBOARD_DOM_ERROR');\r\n    }\r\n\r\n    /**\r\n     * Modules\r\n     */\r\n    this.modules = {};\r\n    this.loadModules();\r\n  }\r\n\r\n  /**\r\n   * parseParams\r\n   */\r\n  handleParams = (\r\n    selectorOrOptions?: string | HTMLDivElement | KeyboardOptions,\r\n    keyboardOptions?: KeyboardOptions\r\n  ): {\r\n    keyboardDOMClass: string;\r\n    keyboardDOM: KeyboardElement;\r\n    options: Partial<KeyboardOptions | undefined>;\r\n  } => {\r\n    let keyboardDOMClass;\r\n    let keyboardDOM;\r\n    let options;\r\n\r\n    /**\r\n     * If first parameter is a string:\r\n     * Consider it as an element's class\r\n     */\r\n    if (typeof selectorOrOptions === 'string') {\r\n      keyboardDOMClass = selectorOrOptions.split('.').join('');\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`) as KeyboardElement;\r\n      options = keyboardOptions;\r\n\r\n      /**\r\n       * If first parameter is an KeyboardElement\r\n       * Consider it as the keyboard DOM element\r\n       */\r\n    } else if (selectorOrOptions instanceof HTMLDivElement) {\r\n      /**\r\n       * This element must have a class, otherwise throw\r\n       */\r\n      if (!selectorOrOptions.className) {\r\n        console.warn('Any DOM element passed as parameter must have a class.');\r\n        throw new Error('KEYBOARD_DOM_CLASS_ERROR');\r\n      }\r\n\r\n      keyboardDOMClass = selectorOrOptions.className.split(' ')[0];\r\n      keyboardDOM = selectorOrOptions;\r\n      options = keyboardOptions;\r\n\r\n      /**\r\n       * Otherwise, search for .simple-keyboard DOM element\r\n       */\r\n    } else {\r\n      keyboardDOMClass = 'simple-keyboard';\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`) as KeyboardElement;\r\n      options = selectorOrOptions;\r\n    }\r\n\r\n    return {\r\n      keyboardDOMClass,\r\n      keyboardDOM,\r\n      options,\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Getters\r\n   */\r\n  getOptions = (): KeyboardOptions => this.options;\r\n  getCaretPosition = (): number | null => this.caretPosition;\r\n  getCaretPositionEnd = (): number | null => this.caretPositionEnd;\r\n\r\n  /**\r\n   * Changes the internal caret position\r\n   * @param {number} position The caret's start position\r\n   * @param {number} positionEnd The caret's end position\r\n   */\r\n  setCaretPosition(position: number | null, endPosition = position): void {\r\n    this.caretPosition = position;\r\n    this.caretPositionEnd = endPosition;\r\n  }\r\n\r\n  /**\r\n   * Retrieve the candidates for a given input\r\n   * @param input The input string to check\r\n   */\r\n  getInputCandidates(input: string): { candidateKey: string; candidateValue: string } | Record<string, never> {\r\n    const { layoutCandidates: layoutCandidatesObj, layoutCandidatesCaseSensitiveMatch } = this.options;\r\n\r\n    if (!layoutCandidatesObj || typeof layoutCandidatesObj !== 'object') {\r\n      return {};\r\n    }\r\n\r\n    const layoutCandidates = Object.keys(layoutCandidatesObj).filter((layoutCandidate: string) => {\r\n      const inputSubstr = input.substring(0, this.getCaretPositionEnd() || 0) || input;\r\n      const regexp = new RegExp(\r\n        `${this.utilities.escapeRegex(layoutCandidate)}$`,\r\n        layoutCandidatesCaseSensitiveMatch ? 'g' : 'gi'\r\n      );\r\n      const matches = [...inputSubstr.matchAll(regexp)];\r\n      return !!matches.length;\r\n    });\r\n\r\n    if (layoutCandidates.length > 1) {\r\n      const candidateKey = layoutCandidates.sort((a, b) => b.length - a.length)[0];\r\n      return {\r\n        candidateKey,\r\n        candidateValue: layoutCandidatesObj[candidateKey],\r\n      };\r\n    } else if (layoutCandidates.length) {\r\n      const candidateKey = layoutCandidates[0];\r\n      return {\r\n        candidateKey,\r\n        candidateValue: layoutCandidatesObj[candidateKey],\r\n      };\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows a suggestion box with a list of candidate words\r\n   * @param candidates The chosen candidates string as defined in the layoutCandidates option\r\n   * @param targetElement The element next to which the candidates box will be shown\r\n   */\r\n  showCandidatesBox(candidateKey: string, candidateValue: string, targetElement: KeyboardElement): void {\r\n    if (this.candidateBox) {\r\n      this.candidateBox.show({\r\n        candidateValue,\r\n        targetElement,\r\n        onSelect: (selectedCandidate: string, e: MouseEvent) => {\r\n          const { layoutCandidatesCaseSensitiveMatch, disableCandidateNormalization, enableLayoutCandidatesKeyPress } =\r\n            this.options;\r\n\r\n          let candidateStr = selectedCandidate;\r\n\r\n          if (!disableCandidateNormalization) {\r\n            /**\r\n             * Making sure that our suggestions are not composed characters\r\n             */\r\n            candidateStr = selectedCandidate.normalize('NFD');\r\n          }\r\n\r\n          /**\r\n           * Perform an action before any input change\r\n           */\r\n          if (typeof this.options.beforeInputUpdate === 'function') {\r\n            this.options.beforeInputUpdate(this);\r\n          }\r\n\r\n          const currentInput = this.getInput(this.options.inputName, true);\r\n          const initialCaretPosition = this.getCaretPositionEnd() || 0;\r\n          const inputSubstr = currentInput.substring(0, initialCaretPosition || 0) || currentInput;\r\n\r\n          const regexp = new RegExp(\r\n            `${this.utilities.escapeRegex(candidateKey)}$`,\r\n            layoutCandidatesCaseSensitiveMatch ? 'g' : 'gi'\r\n          );\r\n          const newInputSubstr = inputSubstr.replace(regexp, candidateStr);\r\n          const newInput = currentInput.replace(inputSubstr, newInputSubstr);\r\n\r\n          const caretPositionDiff = newInputSubstr.length - inputSubstr.length;\r\n          let newCaretPosition = (initialCaretPosition || currentInput.length) + caretPositionDiff;\r\n\r\n          if (newCaretPosition < 0) newCaretPosition = 0;\r\n\r\n          this.setInput(newInput, this.options.inputName, true);\r\n          this.setCaretPosition(newCaretPosition);\r\n\r\n          /**\r\n           * Calling onKeyPress\r\n           * We pass in the composed candidate instead of the decomposed one\r\n           * To prevent confusion for users\r\n           */\r\n          if (enableLayoutCandidatesKeyPress && typeof this.options.onKeyPress === 'function') {\r\n            this.options.onKeyPress(selectedCandidate, e);\r\n          }\r\n\r\n          if (typeof this.options.onChange === 'function') {\r\n            this.options.onChange(this.getInput(this.options.inputName, true), e);\r\n          }\r\n\r\n          /**\r\n           * Calling onChangeAll\r\n           */\r\n          if (typeof this.options.onChangeAll === 'function') this.options.onChangeAll(this.getAllInputs(), e);\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles clicks made to keyboard buttons\r\n   * @param  {string} button The button's layout name.\r\n   */\r\n  handleButtonClicked(button: string, e?: KeyboardHandlerEvent): void {\r\n    const { inputName = this.defaultName, debug } = this.options;\r\n    /**\r\n     * Ignoring placeholder buttons\r\n     */\r\n    if (button === '{//}') return;\r\n\r\n    /**\r\n     * Creating inputName if it doesn't exist\r\n     */\r\n    if (!this.input[inputName]) this.input[inputName] = '';\r\n\r\n    /**\r\n     * Perform an action before any input change\r\n     */\r\n    if (typeof this.options.beforeInputUpdate === 'function') {\r\n      this.options.beforeInputUpdate(this);\r\n    }\r\n\r\n    /**\r\n     * Calculating new input\r\n     */\r\n    const updatedInput = this.utilities.getUpdatedInput(\r\n      button,\r\n      this.input[inputName],\r\n      this.caretPosition,\r\n      this.caretPositionEnd\r\n    );\r\n\r\n    /**\r\n     * EDGE CASE: Check for whole input selection changes that will yield same updatedInput\r\n     */\r\n    if (this.utilities.isStandardButton(button) && this.activeInputElement) {\r\n      const isEntireInputSelection =\r\n        this.input[inputName] &&\r\n        this.input[inputName] === updatedInput &&\r\n        this.caretPosition === 0 &&\r\n        this.caretPositionEnd === updatedInput.length;\r\n\r\n      if (isEntireInputSelection) {\r\n        this.setInput('', this.options.inputName, true);\r\n        this.setCaretPosition(0);\r\n        this.activeInputElement.value = '';\r\n        this.activeInputElement.setSelectionRange(0, 0);\r\n        this.handleButtonClicked(button, e);\r\n        return;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Calling onKeyPress\r\n     */\r\n    if (typeof this.options.onKeyPress === 'function') this.options.onKeyPress(button, e);\r\n\r\n    if (\r\n      // If input will change as a result of this button press\r\n      this.input[inputName] !== updatedInput &&\r\n      // This pertains to the \"inputPattern\" option:\r\n      // If inputPattern isn't set\r\n      (!this.options.inputPattern ||\r\n        // Or, if it is set and if the pattern is valid - we proceed.\r\n        (this.options.inputPattern && this.inputPatternIsValid(updatedInput)))\r\n    ) {\r\n      /**\r\n       * If maxLength and handleMaxLength yield true, halting\r\n       */\r\n      if (this.options.maxLength && this.utilities.handleMaxLength(this.input, updatedInput)) {\r\n        return;\r\n      }\r\n\r\n      /**\r\n       * Updating input\r\n       */\r\n      const newInputValue = this.utilities.getUpdatedInput(\r\n        button,\r\n        this.input[inputName],\r\n        this.caretPosition,\r\n        this.caretPositionEnd,\r\n        true\r\n      );\r\n\r\n      this.setInput(newInputValue, this.options.inputName, true);\r\n\r\n      if (debug) console.log('Input changed:', this.getAllInputs());\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          'Caret at: ',\r\n          this.getCaretPosition(),\r\n          this.getCaretPositionEnd(),\r\n          `(${this.keyboardDOMClass})`,\r\n          e?.type\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Enforce syncInstanceInputs, if set\r\n       */\r\n      if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n\r\n      /**\r\n       * Calling onChange\r\n       */\r\n      if (typeof this.options.onChange === 'function')\r\n        this.options.onChange(this.getInput(this.options.inputName, true), e);\r\n\r\n      /**\r\n       * Calling onChangeAll\r\n       */\r\n      if (typeof this.options.onChangeAll === 'function') this.options.onChangeAll(this.getAllInputs(), e);\r\n\r\n      /**\r\n       * Check if this new input has candidates (suggested words)\r\n       */\r\n      if (e?.target && this.options.enableLayoutCandidates) {\r\n        const { candidateKey, candidateValue } = this.getInputCandidates(updatedInput);\r\n\r\n        if (candidateKey && candidateValue) {\r\n          this.showCandidatesBox(candidateKey, candidateValue, this.keyboardDOM);\r\n        } else {\r\n          this.candidateBox?.destroy();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * After a button is clicked the selection (if any) will disappear\r\n     * we should reflect this in our state, as applicable\r\n     */\r\n    if (this.caretPositionEnd && this.caretPosition !== this.caretPositionEnd) {\r\n      this.setCaretPosition(this.caretPositionEnd, this.caretPositionEnd);\r\n\r\n      if (this.activeInputElement) {\r\n        this.activeInputElement.setSelectionRange(this.caretPositionEnd, this.caretPositionEnd);\r\n      }\r\n\r\n      if (this.options.debug) {\r\n        console.log('Caret position aligned', this.caretPosition);\r\n      }\r\n    }\r\n\r\n    if (debug) {\r\n      console.log('Key pressed:', button);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get mouse hold state\r\n   */\r\n  getMouseHold() {\r\n    return this.isMouseHold;\r\n  }\r\n\r\n  /**\r\n   * Mark mouse hold state as set\r\n   */\r\n  setMouseHold(value: boolean) {\r\n    if (this.options.syncInstanceInputs) {\r\n      this.dispatch((instance: SimpleKeyboard) => {\r\n        instance.isMouseHold = value;\r\n      });\r\n    } else {\r\n      this.isMouseHold = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mousedown\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonMouseDown(button: string, e: KeyboardHandlerEvent): void {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseDownDefault) e.preventDefault();\r\n      if (this.options.stopMouseDownPropagation) e.stopPropagation();\r\n\r\n      /**\r\n       * Add active class\r\n       */\r\n      e.target.classList.add(this.activeButtonClass);\r\n    }\r\n\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n    if (this.holdTimeout) clearTimeout(this.holdTimeout);\r\n\r\n    /**\r\n     * @type {boolean} Whether the mouse is being held onKeyPress\r\n     */\r\n    this.setMouseHold(true);\r\n\r\n    /**\r\n     * @type {object} Time to wait until a key hold is detected\r\n     */\r\n    if (!this.options.disableButtonHold) {\r\n      this.holdTimeout = window.setTimeout(() => {\r\n        if (\r\n          (this.getMouseHold() &&\r\n            // TODO: This needs to be configurable through options\r\n            ((!button.includes('{') && !button.includes('}')) ||\r\n              button === '{delete}' ||\r\n              button === '{backspace}' ||\r\n              button === '{bksp}' ||\r\n              button === '{space}' ||\r\n              button === '{tab}')) ||\r\n          button === '{arrowright}' ||\r\n          button === '{arrowleft}' ||\r\n          button === '{arrowup}' ||\r\n          button === '{arrowdown}'\r\n        ) {\r\n          if (this.options.debug) console.log('Button held:', button);\r\n\r\n          this.handleButtonHold(button);\r\n        }\r\n        clearTimeout(this.holdTimeout);\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mouseup\r\n   */\r\n  handleButtonMouseUp(button?: string, e?: KeyboardHandlerEvent): void {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseUpDefault && e.preventDefault) e.preventDefault();\r\n      if (this.options.stopMouseUpPropagation && e.stopPropagation) e.stopPropagation();\r\n\r\n      /* istanbul ignore next */\r\n      const isKeyboard =\r\n        e.target === this.keyboardDOM ||\r\n        (e.target && this.keyboardDOM.contains(e.target)) ||\r\n        (this.candidateBox &&\r\n          this.candidateBox.candidateBoxElement &&\r\n          (e.target === this.candidateBox.candidateBoxElement ||\r\n            (e.target && this.candidateBox.candidateBoxElement.contains(e.target))));\r\n\r\n      /**\r\n       * On click outside, remove candidateBox\r\n       */\r\n      if (!isKeyboard && this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Remove active class\r\n     */\r\n    this.recurseButtons((buttonElement: Element) => {\r\n      buttonElement.classList.remove(this.activeButtonClass);\r\n    });\r\n\r\n    this.setMouseHold(false);\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * Calling onKeyReleased\r\n     */\r\n    if (button && typeof this.options.onKeyReleased === 'function') this.options.onKeyReleased(button, e);\r\n  }\r\n\r\n  /**\r\n   * Handles container mousedown\r\n   */\r\n  handleKeyboardContainerMouseDown(e: KeyboardHandlerEvent): void {\r\n    /**\r\n     * Handle event options\r\n     */\r\n    if (this.options.preventMouseDownDefault) e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Handles button hold\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonHold(button: string): void {\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * @type {object} Timeout dictating the speed of key hold iterations\r\n     */\r\n    this.holdInteractionTimeout = window.setTimeout(() => {\r\n      if (this.getMouseHold()) {\r\n        this.handleButtonClicked(button);\r\n        this.handleButtonHold(button);\r\n      } else {\r\n        clearTimeout(this.holdInteractionTimeout);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances (if you have several instances).\r\n   */\r\n  syncInstanceInputs(): void {\r\n    this.dispatch((instance: SimpleKeyboard) => {\r\n      instance.replaceInput(this.input);\r\n      instance.setCaretPosition(this.caretPosition, this.caretPositionEnd);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the keyboard’s input.\r\n   * @param {string} [inputName] optional - the internal input to select\r\n   */\r\n  clearInput(inputName: string = this.options.inputName || this.defaultName): void {\r\n    this.input[inputName] = '';\r\n\r\n    /**\r\n     * Reset caretPosition\r\n     */\r\n    this.setCaretPosition(0);\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Get the keyboard’s input (You can also get it from the onChange prop).\r\n   * @param  {string} [inputName] optional - the internal input to select\r\n   */\r\n  getInput(inputName: string = this.options.inputName || this.defaultName, skipSync = false): string {\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs && !skipSync) this.syncInstanceInputs();\r\n\r\n    if (this.options.rtl) {\r\n      // Remove existing control chars\r\n      const inputWithoutRTLControl = this.input[inputName].replace('\\u202B', '').replace('\\u202C', '');\r\n\r\n      return '\\u202B' + inputWithoutRTLControl + '\\u202C';\r\n    } else {\r\n      return this.input[inputName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all simple-keyboard inputs\r\n   */\r\n  getAllInputs(): KeyboardInput {\r\n    const output = {} as KeyboardInput;\r\n    const inputNames = Object.keys(this.input);\r\n\r\n    inputNames.forEach((inputName) => {\r\n      output[inputName] = this.getInput(inputName, true);\r\n    });\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Set the keyboard’s input.\r\n   * @param  {string} input the input value\r\n   * @param  {string} inputName optional - the internal input to select\r\n   */\r\n  setInput(input: string, inputName: string = this.options.inputName || this.defaultName, skipSync?: boolean): void {\r\n    this.input[inputName] = input;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (!skipSync && this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Replace the input object (`keyboard.input`)\r\n   * @param  {object} inputObj The input object\r\n   */\r\n  replaceInput(inputObj: KeyboardInput): void {\r\n    this.input = inputObj;\r\n  }\r\n\r\n  /**\r\n   * Set new option or modify existing ones after initialization.\r\n   * @param  {object} options The options to set\r\n   */\r\n  setOptions(options = {}): void {\r\n    const changedOptions = this.changedOptions(options);\r\n    this.options = Object.assign(this.options, options);\r\n\r\n    if (changedOptions.length) {\r\n      if (this.options.debug) {\r\n        console.log('changedOptions', changedOptions);\r\n      }\r\n\r\n      /**\r\n       * Some option changes require adjustments before re-render\r\n       */\r\n      this.onSetOptions(changedOptions);\r\n\r\n      /**\r\n       * Rendering\r\n       */\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detecting changes to non-function options\r\n   * This allows us to ascertain whether a button re-render is needed\r\n   */\r\n  changedOptions(newOptions: Partial<KeyboardOptions>): string[] {\r\n    return Object.keys(newOptions).filter(\r\n      (optionName) => JSON.stringify(newOptions[optionName]) !== JSON.stringify(this.options[optionName])\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Executing actions depending on changed options\r\n   * @param  {object} options The options to set\r\n   */\r\n  onSetOptions(changedOptions: string[] = []): void {\r\n    /**\r\n     * Changed: layoutName\r\n     */\r\n    if (changedOptions.includes('layoutName')) {\r\n      /**\r\n       * Reset candidateBox\r\n       */\r\n      if (this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Changed: layoutCandidatesPageSize, layoutCandidates\r\n     */\r\n    if (changedOptions.includes('layoutCandidatesPageSize') || changedOptions.includes('layoutCandidates')) {\r\n      /**\r\n       * Reset and recreate candidateBox\r\n       */\r\n      if (this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n        this.candidateBox = new CandidateBox({\r\n          utilities: this.utilities,\r\n          options: this.options,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all keyboard rows and reset keyboard values.\r\n   * Used internally between re-renders.\r\n   */\r\n  resetRows(): void {\r\n    if (this.keyboardRowsDOM) {\r\n      this.keyboardRowsDOM.remove();\r\n    }\r\n\r\n    this.keyboardDOM.className = this.keyboardDOMClass;\r\n    this.keyboardDOM.setAttribute('data-skInstance', this.currentInstanceName);\r\n    this.buttonElements = {};\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\r\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\r\n   */\r\n  // eslint-disable-next-line no-unused-vars\r\n  dispatch(callback: (instance: SimpleKeyboard, key?: string) => void): void {\r\n    if (!(window as SKWindow)['SimpleKeyboardInstances']) {\r\n      console.warn(`SimpleKeyboardInstances is not defined. Dispatch cannot be called.`);\r\n      throw new Error('INSTANCES_VAR_ERROR');\r\n    }\r\n\r\n    return Object.keys((window as SKWindow)['SimpleKeyboardInstances']).forEach((key) => {\r\n      callback((window as SKWindow)['SimpleKeyboardInstances'][key], key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  addButtonTheme(buttons: string, className: string): void {\r\n    if (!className || !buttons) return;\r\n\r\n    buttons.split(' ').forEach((button) => {\r\n      className.split(' ').forEach((classNameItem) => {\r\n        if (!this.options.buttonTheme) this.options.buttonTheme = [];\r\n\r\n        let classNameFound = false;\r\n\r\n        /**\r\n         * If class is already defined, we add button to class definition\r\n         */\r\n        this.options.buttonTheme.map((buttonTheme) => {\r\n          if (buttonTheme?.class.split(' ').includes(classNameItem)) {\r\n            classNameFound = true;\r\n\r\n            const buttonThemeArray = buttonTheme.buttons.split(' ');\r\n            if (!buttonThemeArray.includes(button)) {\r\n              classNameFound = true;\r\n              buttonThemeArray.push(button);\r\n              buttonTheme.buttons = buttonThemeArray.join(' ');\r\n            }\r\n          }\r\n          return buttonTheme;\r\n        });\r\n\r\n        /**\r\n         * If class is not defined, we create a new entry\r\n         */\r\n        if (!classNameFound) {\r\n          this.options.buttonTheme.push({\r\n            class: classNameItem,\r\n            buttons: buttons,\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  removeButtonTheme(buttons: string, className: string): void {\r\n    /**\r\n     * When called with empty parameters, remove all button themes\r\n     */\r\n    if (!buttons && !className) {\r\n      this.options.buttonTheme = [];\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * If buttons are passed and buttonTheme has items\r\n     */\r\n    if (buttons && Array.isArray(this.options.buttonTheme) && this.options.buttonTheme.length) {\r\n      const buttonArray = buttons.split(' ');\r\n      buttonArray.forEach((button) => {\r\n        this.options?.buttonTheme?.map((buttonTheme, index) => {\r\n          /**\r\n           * If className is set, we affect the buttons only for that class\r\n           * Otherwise, we afect all classes\r\n           */\r\n          if ((buttonTheme && className && className.includes(buttonTheme.class)) || !className) {\r\n            const filteredButtonArray = buttonTheme?.buttons.split(' ').filter((item) => item !== button);\r\n\r\n            /**\r\n             * If buttons left, return them, otherwise, remove button Theme\r\n             */\r\n            if (buttonTheme && filteredButtonArray?.length) {\r\n              buttonTheme.buttons = filteredButtonArray.join(' ');\r\n            } else {\r\n              this.options.buttonTheme?.splice(index, 1);\r\n              buttonTheme = null;\r\n            }\r\n          }\r\n\r\n          return buttonTheme;\r\n        });\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\r\n   * @param  {string} button The button layout name to select\r\n   */\r\n  getButtonElement(button: string): KeyboardElement | KeyboardElement[] | undefined {\r\n    let output;\r\n\r\n    const buttonArr = this.buttonElements[button];\r\n    if (buttonArr) {\r\n      if (buttonArr.length > 1) {\r\n        output = buttonArr;\r\n      } else {\r\n        output = buttonArr[0];\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * This handles the \"inputPattern\" option\r\n   * by checking if the provided inputPattern passes\r\n   */\r\n  inputPatternIsValid(inputVal: string): boolean {\r\n    const inputPatternRaw = this.options.inputPattern;\r\n    let inputPattern;\r\n\r\n    /**\r\n     * Check if input pattern is global or targeted to individual inputs\r\n     */\r\n    if (inputPatternRaw instanceof RegExp) {\r\n      inputPattern = inputPatternRaw;\r\n    } else {\r\n      inputPattern = inputPatternRaw[this.options.inputName || this.defaultName];\r\n    }\r\n\r\n    if (inputPattern && inputVal) {\r\n      const didInputMatch = inputPattern.test(inputVal);\r\n\r\n      if (this.options.debug) {\r\n        console.log(`inputPattern (\"${inputPattern}\"): ${didInputMatch ? 'passed' : 'did not pass!'}`);\r\n      }\r\n\r\n      return didInputMatch;\r\n    } else {\r\n      /**\r\n       * inputPattern doesn't seem to be set for the current input, or input is empty. Pass.\r\n       */\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the removal of event listers before initializing new ones\r\n   * This is useful when changing options that require a fresh set of event listeners\r\n   */\r\n\r\n  removeEventListeners(): void {\r\n    console.log('Removing event listeners...');\r\n\r\n    document.removeEventListener('keydown', this.handleKeyDownBound);\r\n    document.removeEventListener('keyup', this.handleKeyUpBound);\r\n    document.removeEventListener('mouseup', this.handleMouseUpBound);\r\n    document.removeEventListener('touchend', this.handleTouchEndBound);\r\n    document.removeEventListener('select', this.handleSelectBound);\r\n\r\n    if (this.options.updateCaretOnSelectionChange) {\r\n      document.removeEventListener('selectionchange', this.handleSelectionChangeBound);\r\n    }\r\n\r\n    this.listenersAdded = false; // Allow re-adding if necessary\r\n  }\r\n  /**\r\n   * Handles simple-keyboard event listeners\r\n   */\r\n  setEventListeners(): void {\r\n    /**\r\n     * Only first instance should set the event listeners\r\n     */\r\n    if (this.isFirstKeyboardInstance || !this.allKeyboardInstances) {\r\n      if (this.options.debug) {\r\n        console.log(`Caret handling started (${this.keyboardDOMClass})`);\r\n      }\r\n\r\n      // LPJr: Prevent duplicate listeners\r\n      if (this.listenersAdded) {\r\n        console.log('Event listeners already set. Skipping...');\r\n        return;\r\n      }\r\n\r\n      // Ensure existing listeners are removed before adding new ones\r\n      this.removeEventListeners();\r\n\r\n      // LPJr: added named event handlers instead of anonymous functions\r\n      this.handleKeyDownBound = this.handleKeyDown.bind(this);\r\n      this.handleInternalKeyNavBound = this.handleInternalKeyNav.bind(this);\r\n      this.keyboardDOM.addEventListener('keydown', this.handleInternalKeyNavBound as EventListener);\r\n\r\n      this.handleKeyUpBound = this.handleKeyUp.bind(this);\r\n      this.handleMouseUpBound = this.handleMouseUp.bind(this);\r\n      this.handleTouchEndBound = () => this.handleTouchEnd(this);\r\n      this.handleSelectBound = () => this.handleSelect(this);\r\n      this.handleSelectionChangeBound = this.handleSelectionChange.bind(this);\r\n\r\n      document.addEventListener('keydown', this.handleKeyDownBound);\r\n      document.addEventListener('keyup', this.handleKeyUpBound);\r\n      document.addEventListener('mouseup', this.handleMouseUpBound);\r\n      document.addEventListener('touchend', this.handleTouchEndBound);\r\n\r\n      if (this.options.updateCaretOnSelectionChange) {\r\n        document.addEventListener('selectionchange', this.handleSelectionChangeBound);\r\n      }\r\n\r\n      document.addEventListener('select', this.handleSelectBound);\r\n\r\n      // Mark listeners as added to prevent duplicates\r\n      this.listenersAdded = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyUp\r\n   */\r\n  handleKeyUp(event: KeyboardHandlerEvent): void {\r\n    if (this.options.physicalKeyboardHighlightPreventDefault) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    this.caretEventHandler(event);\r\n\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyUp(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyDown\r\n   */\r\n  handleKeyDown(event: KeyboardHandlerEvent): void {\r\n    if (this.options.physicalKeyboardHighlightPreventDefault) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyDown(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: Internal Key Navigation\r\n   */\r\n  handleInternalKeyNav(event: KeyboardEvent): void {\r\n    if (!(event instanceof KeyboardEvent)) return;\r\n\r\n    const { key } = event;\r\n\r\n    if (!['ArrowRight', 'ArrowLeft', 'ArrowDown', 'ArrowUp'].includes(key)) return;\r\n\r\n    event.preventDefault();\r\n\r\n    const focused = document.activeElement as HTMLElement;\r\n\r\n    // Find the currently focused button\r\n    if (!focused || !focused.hasAttribute('data-skBtn')) return;\r\n\r\n    // Implement directional logic\r\n    let nextButton: HTMLElement | null = null;\r\n\r\n    switch (key) {\r\n      case 'ArrowRight':\r\n        nextButton = this.findNextButton(focused);\r\n        break;\r\n      case 'ArrowLeft':\r\n        nextButton = this.findPreviousButton(focused);\r\n        break;\r\n      // Optional:\r\n      // case 'ArrowDown': ...\r\n      // case 'ArrowUp': ...\r\n    }\r\n\r\n    if (nextButton) {\r\n      focused.setAttribute('tabindex', '-1');\r\n      nextButton.setAttribute('tabindex', '0');\r\n      nextButton.focus();\r\n\r\n      if (this.liveRegion) {\r\n        const label = nextButton.getAttribute('aria-label') || nextButton.textContent || '';\r\n        // Clear previous aria live message\r\n        if (this.ariaLiveTimer !== null) {\r\n          clearTimeout(this.ariaLiveTimer);\r\n        }\r\n        this.ariaLiveTimer = setTimeout(() => {\r\n          if (this.liveRegion) {\r\n            this.liveRegion.textContent = `Key ${label} focused`;\r\n          }\r\n        }, this.options.liveRegionDelay || 100);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find the next button in the keyboard layout\r\n   */\r\n  findNextButton(current: HTMLElement): HTMLElement | null {\r\n    const allButtons = Array.from(this.keyboardDOM.querySelectorAll('[data-skBtn]')) as HTMLElement[];\r\n\r\n    const idx = allButtons.indexOf(current);\r\n    return allButtons[idx + 1] || null;\r\n  }\r\n\r\n  /**\r\n   * Find the previous button in the keyboard layout\r\n   */\r\n  findPreviousButton(current: HTMLElement): HTMLElement | null {\r\n    const allButtons = Array.from(this.keyboardDOM.querySelectorAll('[data-skBtn]')) as HTMLElement[];\r\n\r\n    const idx = allButtons.indexOf(current);\r\n    return allButtons[idx - 1] || null;\r\n  }\r\n\r\n  /**\r\n   * Event Handler: MouseUp\r\n   */\r\n  handleMouseUp(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: TouchEnd\r\n   */\r\n  /* istanbul ignore next */\r\n  handleTouchEnd(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: Select\r\n   */\r\n  /* istanbul ignore next */\r\n  handleSelect(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: SelectionChange\r\n   */\r\n  /* istanbul ignore next */\r\n  handleSelectionChange(event: KeyboardHandlerEvent): void {\r\n    /**\r\n     * Firefox is not reporting the correct caret position through this event\r\n     * https://github.com/hodgef/simple-keyboard/issues/1839\r\n     */\r\n    if (navigator.userAgent.includes('Firefox')) {\r\n      return;\r\n    }\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Called by {@link setEventListeners} when an event that warrants a cursor position update is triggered\r\n   */\r\n  caretEventHandler(event: KeyboardHandlerEvent): void {\r\n    let targetTagName: string;\r\n    if (event.target.tagName) {\r\n      targetTagName = event.target.tagName.toLowerCase();\r\n    }\r\n\r\n    this.dispatch((instance) => {\r\n      let isKeyboard =\r\n        event.target === instance.keyboardDOM || (event.target && instance.keyboardDOM.contains(event.target));\r\n\r\n      /**\r\n       * If syncInstanceInputs option is enabled, make isKeyboard match any instance\r\n       * not just the current one\r\n       */\r\n      if (this.options.syncInstanceInputs && Array.isArray(event.path)) {\r\n        isKeyboard = event.path.some((item: HTMLElement) => item?.hasAttribute?.('data-skInstance'));\r\n      }\r\n\r\n      if (\r\n        (targetTagName === 'textarea' ||\r\n          (targetTagName === 'input' && ['text', 'search', 'url', 'tel', 'password'].includes(event.target.type))) &&\r\n        !instance.options.disableCaretPositioning\r\n      ) {\r\n        /**\r\n         * Tracks current cursor position\r\n         * As keys are pressed, text will be added/removed at that position within the input.\r\n         */\r\n        let selectionStart = event.target.selectionStart;\r\n        let selectionEnd = event.target.selectionEnd;\r\n\r\n        if (instance.options.rtl) {\r\n          selectionStart = instance.utilities.getRtlOffset(selectionStart, instance.getInput());\r\n          selectionEnd = instance.utilities.getRtlOffset(selectionEnd, instance.getInput());\r\n        }\r\n\r\n        instance.setCaretPosition(selectionStart, selectionEnd);\r\n\r\n        /**\r\n         * Tracking current input in order to handle caret positioning edge cases\r\n         */\r\n        instance.activeInputElement = event.target;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(\r\n            'Caret at: ',\r\n            instance.getCaretPosition(),\r\n            instance.getCaretPositionEnd(),\r\n            event && event.target.tagName.toLowerCase(),\r\n            `(${instance.keyboardDOMClass})`,\r\n            event?.type\r\n          );\r\n        }\r\n      } else if ((instance.options.disableCaretPositioning || !isKeyboard) && event?.type !== 'selectionchange') {\r\n        /**\r\n         * If we toggled off disableCaretPositioning, we must ensure caretPosition doesn't persist once reactivated.\r\n         */\r\n        instance.setCaretPosition(null);\r\n\r\n        /**\r\n         * Resetting activeInputElement\r\n         */\r\n        instance.activeInputElement = null;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(`Caret position reset due to \"${event?.type}\" event`, event);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute an operation on each button\r\n   */\r\n  recurseButtons(fn: any): void {\r\n    if (!fn) return;\r\n\r\n    Object.keys(this.buttonElements).forEach((buttonName) => this.buttonElements[buttonName].forEach(fn));\r\n  }\r\n\r\n  /**\r\n   * Destroy keyboard listeners and DOM elements\r\n   */\r\n  destroy(): void {\r\n    if (this.options.debug) console.log(`Destroying simple-keyboard instance: ${this.currentInstanceName}`);\r\n\r\n    const { physicalKeyboardHighlightPreventDefault = false } = this.options;\r\n\r\n    /**\r\n     * Remove document listeners\r\n     */\r\n    document.removeEventListener('keyup', this.handleKeyUpBound);\r\n    document.removeEventListener('keydown', this.handleKeyDownBound);\r\n    document.removeEventListener('mouseup', this.handleMouseUpBound);\r\n    document.removeEventListener('touchend', this.handleTouchEndBound);\r\n    document.removeEventListener('select', this.handleSelectBound);\r\n\r\n    // selectionchange is causing caret update issues on Chrome\r\n    // https://github.com/hodgef/simple-keyboard/issues/2346\r\n    if (this.options.updateCaretOnSelectionChange) {\r\n      document.removeEventListener('selectionchange', this.handleSelectionChangeBound);\r\n    }\r\n\r\n    document.onpointerup = null;\r\n    document.ontouchend = null;\r\n    document.ontouchcancel = null;\r\n    document.onmouseup = null;\r\n\r\n    /**\r\n     * Remove buttons\r\n     */\r\n    const deleteButton = (buttonElement: KeyboardElement | null) => {\r\n      if (buttonElement) {\r\n        buttonElement.onpointerdown = null;\r\n        buttonElement.onpointerup = null;\r\n        buttonElement.onpointercancel = null;\r\n        buttonElement.ontouchstart = null;\r\n        buttonElement.ontouchend = null;\r\n        buttonElement.ontouchcancel = null;\r\n        buttonElement.onclick = null;\r\n        buttonElement.onmousedown = null;\r\n        buttonElement.onmouseup = null;\r\n\r\n        buttonElement.remove();\r\n        buttonElement = null;\r\n      }\r\n    };\r\n\r\n    this.recurseButtons(deleteButton);\r\n\r\n    /**\r\n     * Remove wrapper events\r\n     */\r\n    this.keyboardDOM.onpointerdown = null;\r\n    this.keyboardDOM.ontouchstart = null;\r\n    this.keyboardDOM.onmousedown = null;\r\n\r\n    /**\r\n     * Clearing keyboard rows\r\n     */\r\n    this.resetRows();\r\n\r\n    /**\r\n     * Candidate box\r\n     */\r\n    if (this.candidateBox) {\r\n      this.candidateBox.destroy();\r\n      this.candidateBox = null;\r\n    }\r\n\r\n    /**\r\n     * Clearing activeInputElement\r\n     */\r\n    this.activeInputElement = null;\r\n\r\n    /**\r\n     * Removing instance attribute\r\n     */\r\n    this.keyboardDOM.removeAttribute('data-skInstance');\r\n\r\n    /**\r\n     * Clearing keyboardDOM\r\n     */\r\n    this.keyboardDOM.innerHTML = '';\r\n\r\n    /**\r\n     * Remove instance\r\n     */\r\n    (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName] = null;\r\n    delete (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName];\r\n\r\n    /**\r\n     * Reset initialized flag\r\n     */\r\n    this.initialized = false;\r\n  }\r\n\r\n  /**\r\n   * Process buttonTheme option\r\n   */\r\n  getButtonThemeClasses(button: string): string[] {\r\n    const buttonTheme = this.options.buttonTheme;\r\n    let buttonClasses: string[] = [];\r\n\r\n    if (Array.isArray(buttonTheme)) {\r\n      buttonTheme.forEach((themeObj) => {\r\n        if (\r\n          themeObj &&\r\n          themeObj.class &&\r\n          typeof themeObj.class === 'string' &&\r\n          themeObj.buttons &&\r\n          typeof themeObj.buttons === 'string'\r\n        ) {\r\n          const themeObjClasses = themeObj.class.split(' ');\r\n          const themeObjButtons = themeObj.buttons.split(' ');\r\n\r\n          if (themeObjButtons.includes(button)) {\r\n            buttonClasses = [...buttonClasses, ...themeObjClasses];\r\n          }\r\n        } else {\r\n          console.warn(`Incorrect \"buttonTheme\". Please check the documentation.`, themeObj);\r\n        }\r\n      });\r\n    }\r\n\r\n    return buttonClasses;\r\n  }\r\n\r\n  /**\r\n   * Process buttonAttributes option\r\n   */\r\n  setDOMButtonAttributes(button: string, callback: any): void {\r\n    const buttonAttributes = this.options.buttonAttributes;\r\n\r\n    if (Array.isArray(buttonAttributes)) {\r\n      buttonAttributes.forEach((attrObj) => {\r\n        if (\r\n          attrObj.attribute &&\r\n          typeof attrObj.attribute === 'string' &&\r\n          attrObj.value &&\r\n          typeof attrObj.value === 'string' &&\r\n          attrObj.buttons &&\r\n          typeof attrObj.buttons === 'string'\r\n        ) {\r\n          const attrObjButtons = attrObj.buttons.split(' ');\r\n\r\n          if (attrObjButtons.includes(button)) {\r\n            callback(attrObj.attribute, attrObj.value);\r\n          }\r\n        } else {\r\n          console.warn(`Incorrect \"buttonAttributes\". Please check the documentation.`, attrObj);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onTouchDeviceDetected() {\r\n    /**\r\n     * Processing autoTouchEvents\r\n     */\r\n    this.processAutoTouchEvents();\r\n\r\n    /**\r\n     * Disabling contextual window on touch devices\r\n     */\r\n    this.disableContextualWindow();\r\n  }\r\n\r\n  /**\r\n   * Disabling contextual window for hg-button\r\n   */\r\n  /* istanbul ignore next */\r\n  disableContextualWindow() {\r\n    window.oncontextmenu = (event: KeyboardHandlerEvent) => {\r\n      if (event.target.classList.contains('hg-button')) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process autoTouchEvents option\r\n   */\r\n  processAutoTouchEvents() {\r\n    if (this.options.autoUseTouchEvents) {\r\n      this.options.useTouchEvents = true;\r\n\r\n      if (this.options.debug) {\r\n        console.log(`autoUseTouchEvents: Touch device detected, useTouchEvents enabled.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n   */\r\n  onInit() {\r\n    if (this.options.debug) {\r\n      console.log(`${this.keyboardDOMClass} Initialized`);\r\n    }\r\n\r\n    /**\r\n     * setEventListeners\r\n     */\r\n    this.setEventListeners();\r\n\r\n    if (typeof this.options.onInit === 'function') this.options.onInit(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeFirstRender() {\r\n    /**\r\n     * Performing actions when touch device detected\r\n     */\r\n    if (this.utilities.isTouchDevice()) {\r\n      this.onTouchDeviceDetected();\r\n    }\r\n\r\n    if (typeof this.options.beforeFirstRender === 'function') this.options.beforeFirstRender(this);\r\n\r\n    /**\r\n     * Notify about PointerEvents usage\r\n     */\r\n    if (\r\n      this.isFirstKeyboardInstance &&\r\n      this.utilities.pointerEventsSupported() &&\r\n      !this.options.useTouchEvents &&\r\n      !this.options.useMouseEvents\r\n    ) {\r\n      if (this.options.debug) {\r\n        console.log('Using PointerEvents as it is supported by this browser');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Notify about touch events usage\r\n     */\r\n    if (this.options.useTouchEvents) {\r\n      if (this.options.debug) {\r\n        console.log('useTouchEvents has been enabled. Only touch events will be used.');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeRender() {\r\n    if (typeof this.options.beforeRender === 'function') this.options.beforeRender(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n   */\r\n  onRender() {\r\n    if (typeof this.options.onRender === 'function') this.options.onRender(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once all modules have been loaded\r\n   */\r\n  onModulesLoaded() {\r\n    if (typeof this.options.onModulesLoaded === 'function') this.options.onModulesLoaded(this);\r\n  }\r\n\r\n  /**\r\n   * Register module\r\n   */\r\n  registerModule = (name: string, initCallback: any) => {\r\n    if (!this.modules[name]) this.modules[name] = {};\r\n\r\n    initCallback(this.modules[name]);\r\n  };\r\n\r\n  /**\r\n   * Load modules\r\n   */\r\n  loadModules() {\r\n    if (Array.isArray(this.options.modules)) {\r\n      this.options.modules.forEach((KeyboardModule) => {\r\n        const keyboardModule = this.utilities.isConstructor(KeyboardModule)\r\n          ? new KeyboardModule(this)\r\n          : KeyboardModule(this);\r\n\r\n        keyboardModule.init && keyboardModule.init(this);\r\n      });\r\n\r\n      this.keyboardPluginClasses = 'modules-loaded';\r\n\r\n      this.render();\r\n      this.onModulesLoaded();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get module prop\r\n   */\r\n  getModuleProp(name: string, prop: string) {\r\n    if (!this.modules[name]) return false;\r\n\r\n    return this.modules[name][prop];\r\n  }\r\n\r\n  /**\r\n   * getModulesList\r\n   */\r\n  getModulesList() {\r\n    return Object.keys(this.modules);\r\n  }\r\n\r\n  /**\r\n   * Parse Row DOM containers\r\n   */\r\n  parseRowDOMContainers(\r\n    rowDOM: HTMLDivElement,\r\n    rowIndex: number,\r\n    containerStartIndexes: number[],\r\n    containerEndIndexes: number[]\r\n  ) {\r\n    const rowDOMArray = Array.from(rowDOM.children);\r\n    let removedElements = 0;\r\n\r\n    if (rowDOMArray.length) {\r\n      containerStartIndexes.forEach((startIndex, arrIndex) => {\r\n        const endIndex = containerEndIndexes[arrIndex];\r\n\r\n        /**\r\n         * If there exists a respective end index\r\n         * if end index comes after start index\r\n         */\r\n        if (!endIndex || !(endIndex > startIndex)) {\r\n          return false;\r\n        }\r\n\r\n        /**\r\n         * Updated startIndex, endIndex\r\n         * This is since the removal of buttons to place a single button container\r\n         * results in a modified array size\r\n         */\r\n        const updated_startIndex = startIndex - removedElements;\r\n        const updated_endIndex = endIndex - removedElements;\r\n\r\n        /**\r\n         * Create button container\r\n         */\r\n        const containerDOM = document.createElement('div');\r\n        containerDOM.className += 'hg-button-container';\r\n        const containerUID = `${this.options.layoutName}-r${rowIndex}c${arrIndex}`;\r\n        containerDOM.setAttribute('data-skUID', containerUID);\r\n\r\n        /**\r\n         * Taking elements due to be inserted into container\r\n         */\r\n        const containedElements = rowDOMArray.splice(updated_startIndex, updated_endIndex - updated_startIndex + 1);\r\n        removedElements += updated_endIndex - updated_startIndex;\r\n\r\n        /**\r\n         * Inserting elements to container\r\n         */\r\n        containedElements.forEach((element) => containerDOM.appendChild(element));\r\n\r\n        /**\r\n         * Adding container at correct position within rowDOMArray\r\n         */\r\n        rowDOMArray.splice(updated_startIndex, 0, containerDOM);\r\n\r\n        /**\r\n         * Clearing old rowDOM children structure\r\n         */\r\n        rowDOM.innerHTML = '';\r\n\r\n        /**\r\n         * Appending rowDOM new children list\r\n         */\r\n        rowDOMArray.forEach((element) => rowDOM.appendChild(element));\r\n\r\n        if (this.options.debug) {\r\n          console.log('rowDOMContainer', containedElements, updated_startIndex, updated_endIndex, removedElements + 1);\r\n        }\r\n      });\r\n    }\r\n\r\n    return rowDOM;\r\n  }\r\n\r\n  /**\r\n   * getKeyboardClassString\r\n   */\r\n  getKeyboardClassString = (...baseDOMClasses: any[]) => {\r\n    const keyboardClasses = [this.keyboardDOMClass, ...baseDOMClasses].filter((DOMClass) => !!DOMClass);\r\n\r\n    return keyboardClasses.join(' ');\r\n  };\r\n\r\n  /**\r\n   * Renders rows and buttons as per options\r\n   */\r\n  render() {\r\n    /**\r\n     * Clear keyboard\r\n     */\r\n    this.resetRows();\r\n\r\n    /**\r\n     * Calling beforeFirstRender\r\n     */\r\n    if (!this.initialized) {\r\n      this.beforeFirstRender();\r\n    }\r\n\r\n    /**\r\n     * Calling beforeRender\r\n     */\r\n    this.beforeRender();\r\n\r\n    const layoutClass = `hg-layout-${this.options.layoutName}`;\r\n    const layout = this.options.layout || getDefaultLayout();\r\n    const useTouchEvents = this.options.useTouchEvents || false;\r\n    const useTouchEventsClass = useTouchEvents ? 'hg-touch-events' : '';\r\n    const useMouseEvents = this.options.useMouseEvents || false;\r\n    const disableRowButtonContainers = this.options.disableRowButtonContainers;\r\n\r\n    /**\r\n     * Adding themeClass, layoutClass to keyboardDOM\r\n     */\r\n    this.keyboardDOM.className = this.getKeyboardClassString(\r\n      this.options.theme,\r\n      layoutClass,\r\n      this.keyboardPluginClasses,\r\n      useTouchEventsClass\r\n    );\r\n\r\n    /**\r\n     * Adding keyboard identifier\r\n     */\r\n    this.keyboardDOM.setAttribute('data-skInstance', this.currentInstanceName);\r\n\r\n    /**\r\n     * Add WCAG 2.1 compliance attributes - LPJr\r\n     * https://www.w3.org/WAI/WCAG21/Understanding/keyboard.html\r\n     */\r\n\r\n    /**\r\n     * WCAG 2.1 / Section 508a Accessibility Compliance - LPJr\r\n     *\r\n     * This virtual keyboard component follows best-effort WCAG 2.1 Level AA and 508a compliance practices:\r\n     *\r\n     * Keyboard Navigability (2.1.1)\r\n     *    - All keys are operable via arrow keys and focus management\r\n     *    - `Tab` and `Shift+Tab` allow exiting and re-entering the keyboard area\r\n     *\r\n     * Focus Visibility (2.4.7)\r\n     *    - Each key uses `tabIndex` and is visibly highlighted when focused\r\n     *\r\n     * Name, Role, Value (4.1.2)\r\n     *    - Each key has `role=\"button\"` (if not native <button>)\r\n     *    - Each key has an `aria-label` and visible text\r\n     *    - Keyboard container has `role=\"application\"` and a programmatic label\r\n     *\r\n     * Live Region Announcements\r\n     *    - Not implemented to avoid screen reader overload\r\n     *    - Optional feature per WCAG; not required for conformance\r\n     *    - Output is assumed to be visually accessible or programmatically exposed elsewhere\r\n     *\r\n     * Customization\r\n     *    - `aria-label` for the keyboard can be overridden via `options.ariaLabel`\r\n     *    - Accessible layout is language-agnostic and screen reader-friendly\r\n     */\r\n\r\n    this.options.useLiveRegion ??= false;\r\n    this.options.liveRegionMode ??= 'polite';\r\n    this.options.liveRegionDelay ??= 100;\r\n    this.options.ariaLabel ??= 'Virtual Keyboard';\r\n\r\n    this.keyboardDOM.setAttribute('role', 'application');\r\n    this.keyboardDOM.setAttribute('aria-label', this.options.ariaLabel || 'Virtual Keyboard');\r\n    this.keyboardDOM.setAttribute('tabindex', '0');\r\n\r\n    if (this.options.useLiveRegion) {\r\n      this.liveRegion = document.createElement('div');\r\n      this.liveRegion.classList.add('hg-live-region', 'sr-only');\r\n      this.liveRegion.setAttribute('role', 'status');\r\n      this.liveRegion.setAttribute('aria-live', 'polite');\r\n      this.liveRegion.setAttribute('aria-atomic', 'true');\r\n      this.keyboardDOM.appendChild(this.liveRegion);\r\n    }\r\n\r\n    /**\r\n     * Create row wrapper\r\n     */\r\n    this.keyboardRowsDOM = document.createElement('div');\r\n    this.keyboardRowsDOM.className = 'hg-rows';\r\n\r\n    /**\r\n     * Iterating through each row\r\n     */\r\n    layout[this.options.layoutName || this.defaultName].forEach((row: string, rIndex: number) => {\r\n      let rowArray = row.split(' ');\r\n\r\n      /**\r\n       * Enforce excludeFromLayout\r\n       */\r\n      if (\r\n        this.options.excludeFromLayout &&\r\n        this.options.excludeFromLayout[this.options.layoutName || this.defaultName]\r\n      ) {\r\n        rowArray = rowArray.filter(\r\n          (buttonName) =>\r\n            this.options.excludeFromLayout &&\r\n            !this.options.excludeFromLayout[this.options.layoutName || this.defaultName].includes(buttonName)\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Creating empty row\r\n       */\r\n      let rowDOM = document.createElement('div');\r\n      rowDOM.className += 'hg-row';\r\n\r\n      /**\r\n       * Tracking container indicators in rows\r\n       */\r\n      const containerStartIndexes: number[] = [];\r\n      const containerEndIndexes: number[] = [];\r\n\r\n      /**\r\n       * Iterating through each button in row\r\n       */\r\n      rowArray.forEach((button, bIndex) => {\r\n        /**\r\n         * Check if button has a container indicator\r\n         */\r\n        const buttonHasContainerStart =\r\n          !disableRowButtonContainers && typeof button === 'string' && button.length > 1 && button.indexOf('[') === 0;\r\n\r\n        const buttonHasContainerEnd =\r\n          !disableRowButtonContainers &&\r\n          typeof button === 'string' &&\r\n          button.length > 1 &&\r\n          button.indexOf(']') === button.length - 1;\r\n\r\n        /**\r\n         * Save container start index, if applicable\r\n         */\r\n        if (buttonHasContainerStart) {\r\n          containerStartIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\[/g, '');\r\n        }\r\n\r\n        if (buttonHasContainerEnd) {\r\n          containerEndIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\]/g, '');\r\n        }\r\n\r\n        /**\r\n         * Processing button options\r\n         */\r\n        const fctBtnClass = this.utilities.getButtonClass(button);\r\n        const buttonDisplayName = this.utilities.getButtonDisplayName(\r\n          button,\r\n          this.options.display,\r\n          this.options.mergeDisplay\r\n        );\r\n\r\n        /**\r\n         * Creating button\r\n         */\r\n        const buttonType = this.options.useButtonTag ? 'button' : 'div';\r\n        const buttonDOM = document.createElement(buttonType);\r\n        buttonDOM.className += `hg-button ${fctBtnClass}`;\r\n\r\n        /**\r\n         * Adding buttonTheme\r\n         */\r\n        buttonDOM.classList.add(...this.getButtonThemeClasses(button));\r\n\r\n        /**\r\n         * Adding buttonAttributes\r\n         */\r\n        this.setDOMButtonAttributes(button, (attribute: string, value: string) => {\r\n          buttonDOM.setAttribute(attribute, value);\r\n        });\r\n\r\n        this.activeButtonClass = 'hg-activeButton';\r\n\r\n        /**\r\n         * Handle button click event\r\n         */\r\n        /* istanbul ignore next */\r\n        if (this.utilities.pointerEventsSupported() && !useTouchEvents && !useMouseEvents) {\r\n          /**\r\n           * Handle PointerEvents\r\n           */\r\n          buttonDOM.onpointerdown = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonClicked(button, e);\r\n            this.handleButtonMouseDown(button, e);\r\n          };\r\n          buttonDOM.onpointerup = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n          buttonDOM.onpointercancel = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n        } else {\r\n          /**\r\n           * Fallback for browsers not supporting PointerEvents\r\n           */\r\n          if (useTouchEvents) {\r\n            /**\r\n             * Handle touch events\r\n             */\r\n            buttonDOM.ontouchstart = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonClicked(button, e);\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.ontouchend = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n            buttonDOM.ontouchcancel = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          } else {\r\n            /**\r\n             * Handle mouse events\r\n             */\r\n            buttonDOM.onclick = (e: KeyboardHandlerEvent) => {\r\n              this.setMouseHold(false);\r\n              /**\r\n               * Fire button handler in onclick for compatibility reasons\r\n               * This fires handler before onKeyReleased, therefore when that option is set we will fire the handler\r\n               * in onmousedown instead\r\n               */\r\n              if (\r\n                typeof this.options.onKeyReleased !== 'function' &&\r\n                !(this.options.useMouseEvents && this.options.clickOnMouseDown)\r\n              ) {\r\n                this.handleButtonClicked(button, e);\r\n              }\r\n            };\r\n            buttonDOM.onmousedown = (e: KeyboardHandlerEvent) => {\r\n              /**\r\n               * Fire button handler for onKeyReleased use-case\r\n               */\r\n              if (\r\n                (typeof this.options.onKeyReleased === 'function' ||\r\n                  (this.options.useMouseEvents && this.options.clickOnMouseDown)) &&\r\n                !this.isMouseHold\r\n              ) {\r\n                this.handleButtonClicked(button, e);\r\n              }\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.onmouseup = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          }\r\n        }\r\n\r\n        /**\r\n         * Adding identifier\r\n         */\r\n        buttonDOM.setAttribute('data-skBtn', button);\r\n\r\n        /**\r\n         * Adding unique id\r\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\r\n         */\r\n        const buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\r\n        buttonDOM.setAttribute('data-skBtnUID', buttonUID);\r\n\r\n        /**\r\n         * Adding WCAG 2.1 compliance attributes - LPjr\r\n         */\r\n        // Accessibility: Set role and focus management\r\n        if (buttonType === 'div') {\r\n          buttonDOM.setAttribute('role', 'button');\r\n        }\r\n\r\n        buttonDOM.setAttribute('tabindex', '-1'); // Only one key should be tabbable at a time\r\n        buttonDOM.setAttribute('aria-label', buttonDisplayName);\r\n\r\n        // Optional: Title attribute for screen readers\r\n        buttonDOM.setAttribute('title', buttonDisplayName);\r\n\r\n        // Example: If this is the first key, make it focusable\r\n        if (rIndex === 0 && bIndex === 0) {\r\n          buttonDOM.setAttribute('tabindex', '0');\r\n        }\r\n\r\n        /**\r\n         * Adding button label to button\r\n         */\r\n        const buttonSpanDOM = document.createElement('span');\r\n        buttonSpanDOM.innerHTML = buttonDisplayName;\r\n        buttonDOM.appendChild(buttonSpanDOM);\r\n\r\n        /**\r\n         * Adding to buttonElements\r\n         */\r\n        if (!this.buttonElements[button]) this.buttonElements[button] = [];\r\n\r\n        this.buttonElements[button].push(buttonDOM);\r\n\r\n        /**\r\n         * Appending button to row\r\n         */\r\n        rowDOM.appendChild(buttonDOM);\r\n      });\r\n\r\n      /**\r\n       * Parse containers in row\r\n       */\r\n      rowDOM = this.parseRowDOMContainers(rowDOM, rIndex, containerStartIndexes, containerEndIndexes);\r\n\r\n      /**\r\n       * Appending row to hg-rows\r\n       */\r\n      this.keyboardRowsDOM.appendChild(rowDOM);\r\n    });\r\n\r\n    /**\r\n     * Appending row to keyboard\r\n     */\r\n    this.keyboardDOM.appendChild(this.keyboardRowsDOM);\r\n\r\n    /**\r\n     * Calling onRender\r\n     */\r\n    this.onRender();\r\n\r\n    if (!this.initialized) {\r\n      /**\r\n       * Ensures that onInit and beforeFirstRender are only called once per instantiation\r\n       */\r\n      this.initialized = true;\r\n\r\n      /**\r\n       * Handling parent events\r\n       */\r\n      /* istanbul ignore next */\r\n      if (this.utilities.pointerEventsSupported() && !useTouchEvents && !useMouseEvents) {\r\n        document.onpointerup = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        this.keyboardDOM.onpointerdown = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      } else if (useTouchEvents) {\r\n        /**\r\n         * Handling ontouchend, ontouchcancel\r\n         */\r\n        document.ontouchend = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        document.ontouchcancel = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n\r\n        this.keyboardDOM.ontouchstart = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      } else if (!useTouchEvents) {\r\n        /**\r\n         * Handling mouseup\r\n         */\r\n        document.onmouseup = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        this.keyboardDOM.onmousedown = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      }\r\n\r\n      /**\r\n       * Calling onInit\r\n       */\r\n      this.onInit();\r\n    }\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboard;\r\n","import SimpleKeyboard from \"./components/Keyboard\";\r\nexport { SimpleKeyboard };\r\nexport default SimpleKeyboard;\r\n"],"names":["Utilities","_ref","getOptions","getCaretPosition","getCaretPositionEnd","dispatch","_classCallCheck","_defineProperty","button","length","this","bindMethods","key","value","includes","buttonTypeClass","getButtonType","buttonWithoutBraces","replace","buttonNormalized","concat","display","arguments","undefined","Object","assign","getDefaultDiplay","input","caretPos","caretPosEnd","moveCaret","options","commonParams","output","removeAt","apply","removeForwardsAt","addStringAt","tabCharOnTab","newLineOnEnter","Number","isInteger","debug","console","log","minus","newCaretPos","updateCaretPosAction","instance","setCaretPosition","caretPosition","source","str","position","positionEnd","slice","join","isMaxLengthReached","updateCaretPos","emojiMatchedReg","substring","match","substr","inputObj","updatedInput","maxLength","currentInput","inputName","condition","maxLengthReached","_typeof","Boolean","window","navigator","maxTouchPoints","PointerEvent","toLowerCase","trim","split","reduce","word","toUpperCase","arr","size","_toConsumableArray","Array","Math","ceil","map","_","i","index","newIndex","startMarkerIndex","indexOf","f","Reflect","construct","String","e","myClass","_step","_iterator","_createForOfIteratorHelper","getOwnPropertyNames","prototype","s","n","done","myMethod","bind","err","PhysicalKeyboard","_this","Set","altKey","ctrlKey","shiftKey","code","keyCodeToKey","keyCode","layout","_this$getOptions","lastLayout","layoutJSON","mapLayoutToEventCodes","extractAndPadLayout","default","shift","shiftActive","capslockActive","buttonPressed","getSimpleKeyboardLayoutKey","buttonDOM","buttonName","standardButtonPressed","getButtonElement","functionButtonPressed","_buttonDOM$","_buttonDOM$$onpointer","_buttonDOM","_buttonDOM$onpointerd","applyButtonStyle","buttonElement","style","background","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","isArray","forEach","physicalKeyboardHighlightPress","physicalKeyboardHighlightPressUsePointerEvents","onpointerdown","call","physicalKeyboardHighlightPressUseClick","_buttonDOM$2","click","handleButtonClicked","_buttonDOM$3","_buttonDOM$3$onpointe","_buttonDOM$onpointeru","removeAttribute","onpointerup","STANDARD_CODES","has","upper","rawKey","shiftleft","shiftright","controlleft","controlright","altleft","altright","metaleft","metaright","backspace","capslock","enter","tab","_options$layout$defau","_options$layout","_document$activeEleme","currentLayout","_options$layout2","eCode","normalizeToStandardCode","layoutEntry","toString","normal","normalizeOutput","fallbackKeys","warn","userAgent","platform","language","imeMode","document","activeElement","inputMode","isEditable","isContentEditable","time","Date","toISOString","qwertyRowLengths","processedLayout","_i","_arr","type","rows","row","push","mappedLayout","qwertyRows","rowIndex","colIndex","_layout$default$rowIn","_layout$shift$rowInde","eventCode","normalKey","CandidateBox","utilities","pageSize","layoutCandidatesPageSize","candidateBoxElement","remove","pageIndex","_ref2","candidateValue","targetElement","onSelect","candidateListPages","chunkArray","renderPage","nbPages","onItemSelected","selectedCandidate","destroy","_ref3","_this$candidateBoxEle","_this2","createElement","className","candidateListULElement","candidateListItem","_this2$options$displa","candidateListLIElement","getMouseEvent","mouseEvent","useTouchEvents","TouchEvent","MouseEvent","defineProperty","innerHTML","ontouchstart","onclick","appendChild","isPrevBtnElementActive","prevBtnElement","classList","add","prevBtnElementClickAction","isNextBtnElementActive","nextBtnElement","nextBtnElementClickAction","prepend","SimpleKeyboard","selectorOrOptions","keyboardOptions","keyboardDOMClass","keyboardDOM","querySelector","HTMLDivElement","Error","caretPositionEnd","name","initCallback","modules","_len","baseDOMClasses","_key","filter","DOMClass","_this$handleParams","handleParams","_this$handleParams$op","_objectSpread","layoutName","theme","preventMouseDownDefault","enableLayoutCandidates","excludeFromLayout","keyboardPluginClasses","_this$options$inputNa","defaultName","buttonElements","currentInstanceName","camelCase","allKeyboardInstances","keyboardInstanceNames","keys","isFirstKeyboardInstance","physicalKeyboard","candidateBox","render","loadModules","endPosition","_this$options","layoutCandidatesObj","layoutCandidates","layoutCandidatesCaseSensitiveMatch","layoutCandidate","inputSubstr","regexp","RegExp","escapeRegex","matchAll","candidateKey","sort","a","b","_this3","show","_this3$options","disableCandidateNormalization","enableLayoutCandidatesKeyPress","candidateStr","normalize","beforeInputUpdate","getInput","initialCaretPosition","newInputSubstr","newInput","caretPositionDiff","newCaretPosition","setInput","onKeyPress","onChange","onChangeAll","getAllInputs","_this$options2","_this$options2$inputN","getUpdatedInput","isStandardButton","activeInputElement","setSelectionRange","inputPattern","inputPatternIsValid","handleMaxLength","newInputValue","syncInstanceInputs","target","_this$candidateBox","_this$getInputCandida","getInputCandidates","showCandidatesBox","isMouseHold","_this4","preventDefault","stopMouseDownPropagation","stopPropagation","activeButtonClass","holdInteractionTimeout","clearTimeout","holdTimeout","setMouseHold","disableButtonHold","setTimeout","getMouseHold","handleButtonHold","_this5","preventMouseUpDefault","stopMouseUpPropagation","contains","recurseButtons","onKeyReleased","_this6","_this7","replaceInput","skipSync","rtl","_this8","changedOptions","onSetOptions","newOptions","_this9","optionName","JSON","stringify","keyboardRowsDOM","setAttribute","callback","buttons","_this0","classNameItem","buttonTheme","classNameFound","buttonThemeArray","class","_this1","_this1$options","_buttonTheme","_this1$options$button","filteredButtonArray","item","splice","buttonArr","inputVal","inputPatternRaw","didInputMatch","test","removeEventListener","handleKeyDownBound","handleKeyUpBound","handleMouseUpBound","handleTouchEndBound","handleSelectBound","updateCaretOnSelectionChange","handleSelectionChangeBound","listenersAdded","_this10","removeEventListeners","handleKeyDown","handleInternalKeyNavBound","handleInternalKeyNav","addEventListener","handleKeyUp","handleMouseUp","handleTouchEnd","handleSelect","handleSelectionChange","event","physicalKeyboardHighlightPreventDefault","caretEventHandler","physicalKeyboardHighlight","handleHighlightKeyUp","handleHighlightKeyDown","_this11","KeyboardEvent","focused","hasAttribute","nextButton","findNextButton","findPreviousButton","focus","liveRegion","label","getAttribute","textContent","ariaLiveTimer","liveRegionDelay","current","allButtons","from","querySelectorAll","idx","targetTagName","_this12","tagName","isKeyboard","path","some","_item$hasAttribute","disableCaretPositioning","selectionStart","selectionEnd","getRtlOffset","fn","_this13","ontouchend","ontouchcancel","onmouseup","onpointercancel","onmousedown","resetRows","initialized","buttonClasses","themeObj","themeObjClasses","buttonAttributes","attrObj","attribute","processAutoTouchEvents","disableContextualWindow","oncontextmenu","autoUseTouchEvents","setEventListeners","onInit","isTouchDevice","onTouchDeviceDetected","beforeFirstRender","pointerEventsSupported","useMouseEvents","beforeRender","onRender","onModulesLoaded","_this14","KeyboardModule","keyboardModule","isConstructor","init","prop","rowDOM","containerStartIndexes","containerEndIndexes","_this15","rowDOMArray","children","removedElements","startIndex","arrIndex","endIndex","updated_startIndex","updated_endIndex","containerDOM","containerUID","containedElements","element","_this$options3","_this$options3$useLiv","_this$options4","_this$options4$liveRe","_this$options5","_this$options5$liveRe","_this$options6","_this$options6$ariaLa","_this16","layoutClass","useTouchEventsClass","disableRowButtonContainers","getKeyboardClassString","useLiveRegion","liveRegionMode","ariaLabel","rIndex","rowArray","bIndex","_buttonDOM$classList","buttonHasContainerStart","buttonHasContainerEnd","fctBtnClass","getButtonClass","buttonDisplayName","getButtonDisplayName","mergeDisplay","buttonType","useButtonTag","getButtonThemeClasses","setDOMButtonAttributes","handleButtonMouseDown","handleButtonMouseUp","clickOnMouseDown","buttonUID","buttonSpanDOM","parseRowDOMContainers","handleKeyboardContainerMouseDown"],"sourceRoot":""}