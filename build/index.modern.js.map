{"version":3,"file":"index.modern.js","mappings":"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","sources":["webpack://SimpleKeyboard/webpack/universalModuleDefinition","webpack://SimpleKeyboard/webpack/bootstrap","webpack://SimpleKeyboard/webpack/runtime/define property getters","webpack://SimpleKeyboard/webpack/runtime/hasOwnProperty shorthand","webpack://SimpleKeyboard/webpack/runtime/make namespace object","webpack://SimpleKeyboard/./src/lib/services/Utilities.ts","webpack://SimpleKeyboard/./src/lib/services/PhysicalKeyboard.ts","webpack://SimpleKeyboard/./src/lib/services/KeyboardLayout.ts","webpack://SimpleKeyboard/./src/lib/components/CandidateBox.ts","webpack://SimpleKeyboard/./src/lib/components/Keyboard.ts","webpack://SimpleKeyboard/./src/lib/index.modern.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboard\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboard\"] = factory();\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { KeyboardInput } from './../interfaces';\r\nimport { KeyboardOptions, UtilitiesParams } from '../interfaces';\r\n\r\n/**\r\n * Utility Service\r\n */\r\nclass Utilities {\r\n  getOptions: () => KeyboardOptions;\r\n  getCaretPosition: () => number | null;\r\n  getCaretPositionEnd: () => number | null;\r\n  dispatch: any;\r\n  maxLengthReached!: boolean;\r\n\r\n  /**\r\n   * Creates an instance of the Utility service\r\n   */\r\n  constructor({ getOptions, getCaretPosition, getCaretPositionEnd, dispatch }: UtilitiesParams) {\r\n    this.getOptions = getOptions;\r\n    this.getCaretPosition = getCaretPosition;\r\n    this.getCaretPositionEnd = getCaretPositionEnd;\r\n    this.dispatch = dispatch;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(Utilities, this);\r\n  }\r\n\r\n  /**\r\n   * Retrieve button type\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The button type\r\n   */\r\n  getButtonType(button: string): string {\r\n    return button.includes('{') && button.includes('}') && button !== '{//}' ? 'functionBtn' : 'standardBtn';\r\n  }\r\n\r\n  /**\r\n   * Adds default classes to a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The classes to be added to the button\r\n   */\r\n  getButtonClass(button: string): string {\r\n    const buttonTypeClass = this.getButtonType(button);\r\n    const buttonWithoutBraces = button.replace('{', '').replace('}', '');\r\n    let buttonNormalized = '';\r\n\r\n    if (buttonTypeClass !== 'standardBtn') buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\r\n\r\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\r\n  }\r\n\r\n  /**\r\n   * Default button display labels\r\n   */\r\n  getDefaultDisplay() {\r\n    return {\r\n      '{bksp}': 'backspace',\r\n      '{backspace}': 'backspace',\r\n      '{enter}': '< enter',\r\n      '{shift}': 'shift',\r\n      '{shiftleft}': 'shift',\r\n      '{shiftright}': 'shift',\r\n      '{alt}': 'alt',\r\n      '{s}': 'shift',\r\n      '{tab}': 'tab',\r\n      '{lock}': 'caps',\r\n      '{capslock}': 'caps',\r\n      '{accept}': 'Submit',\r\n      '{space}': ' ',\r\n      '{//}': ' ',\r\n      '{esc}': 'esc',\r\n      '{escape}': 'esc',\r\n      '{f1}': 'f1',\r\n      '{f2}': 'f2',\r\n      '{f3}': 'f3',\r\n      '{f4}': 'f4',\r\n      '{f5}': 'f5',\r\n      '{f6}': 'f6',\r\n      '{f7}': 'f7',\r\n      '{f8}': 'f8',\r\n      '{f9}': 'f9',\r\n      '{f10}': 'f10',\r\n      '{f11}': 'f11',\r\n      '{f12}': 'f12',\r\n      '{numpaddivide}': '/',\r\n      '{numlock}': 'lock',\r\n      '{arrowup}': '↑',\r\n      '{arrowleft}': '←',\r\n      '{arrowdown}': '↓',\r\n      '{arrowright}': '→',\r\n      '{prtscr}': 'print',\r\n      '{scrolllock}': 'scroll',\r\n      '{pause}': 'pause',\r\n      '{insert}': 'ins',\r\n      '{home}': 'home',\r\n      '{pageup}': 'up',\r\n      '{delete}': 'del',\r\n      '{forwarddelete}': 'del',\r\n      '{end}': 'end',\r\n      '{pagedown}': 'down',\r\n      '{numpadmultiply}': '*',\r\n      '{numpadsubtract}': '-',\r\n      '{numpadadd}': '+',\r\n      '{numpadenter}': 'enter',\r\n      '{period}': '.',\r\n      '{numpaddecimal}': '.',\r\n      '{numpad0}': '0',\r\n      '{numpad1}': '1',\r\n      '{numpad2}': '2',\r\n      '{numpad3}': '3',\r\n      '{numpad4}': '4',\r\n      '{numpad5}': '5',\r\n      '{numpad6}': '6',\r\n      '{numpad7}': '7',\r\n      '{numpad8}': '8',\r\n      '{numpad9}': '9',\r\n    };\r\n  }\r\n  /**\r\n   * Returns the display (label) name for a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {object} display The provided display option\r\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\r\n   */\r\n  getButtonDisplayName(button: string, display: KeyboardOptions['display'], mergeDisplay = false) {\r\n    if (mergeDisplay) {\r\n      display = Object.assign({}, this.getDefaultDisplay(), display);\r\n    } else {\r\n      display = display || this.getDefaultDisplay();\r\n    }\r\n\r\n    return display[button] || button;\r\n  }\r\n\r\n  /**\r\n   * Returns the updated input resulting from clicking a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {string} input The input string\r\n   * @param  {number} caretPos The cursor's current position\r\n   * @param  {number} caretPosEnd The cursor's current end position\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  getUpdatedInput(button: string, input: string, caretPos: any, caretPosEnd = caretPos, moveCaret = false) {\r\n    const options = this.getOptions();\r\n    const commonParams: [number | undefined, number | undefined, boolean] = [caretPos, caretPosEnd, moveCaret];\r\n\r\n    let output = input;\r\n\r\n    if ((button === '{bksp}' || button === '{backspace}') && output.length > 0) {\r\n      output = this.removeAt(output, ...commonParams);\r\n    } else if ((button === '{delete}' || button === '{forwarddelete}') && output.length > 0) {\r\n      output = this.removeForwardsAt(output, ...commonParams);\r\n    } else if (button === '{space}') output = this.addStringAt(output, ' ', ...commonParams);\r\n    else if (button === '{tab}' && !(typeof options.tabCharOnTab === 'boolean' && options.tabCharOnTab === false)) {\r\n      output = this.addStringAt(output, '\\t', ...commonParams);\r\n    } else if ((button === '{enter}' || button === '{numpadenter}') && options.newLineOnEnter)\r\n      output = this.addStringAt(output, '\\n', ...commonParams);\r\n    else if (button.includes('numpad') && Number.isInteger(Number(button[button.length - 2]))) {\r\n      output = this.addStringAt(output, button[button.length - 2], ...commonParams);\r\n    } else if (button === '{numpaddivide}') output = this.addStringAt(output, '/', ...commonParams);\r\n    else if (button === '{numpadmultiply}') output = this.addStringAt(output, '*', ...commonParams);\r\n    else if (button === '{numpadsubtract}') output = this.addStringAt(output, '-', ...commonParams);\r\n    else if (button === '{numpadadd}') output = this.addStringAt(output, '+', ...commonParams);\r\n    else if (button === '{numpaddecimal}') output = this.addStringAt(output, '.', ...commonParams);\r\n    else if (button === '{' || button === '}') output = this.addStringAt(output, button, ...commonParams);\r\n    else if (!button.includes('{') && !button.includes('}')) output = this.addStringAt(output, button, ...commonParams);\r\n\r\n    if (options.debug) {\r\n      console.log('Input will be: ' + output);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Moves the cursor position by a given amount\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPos(length: number, minus = false) {\r\n    const newCaretPos = this.updateCaretPosAction(length, minus);\r\n\r\n    this.dispatch((instance: any) => {\r\n      instance.setCaretPosition(newCaretPos);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Action method of updateCaretPos\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPosAction(length: number, minus = false) {\r\n    const options = this.getOptions();\r\n    let caretPosition = this.getCaretPosition();\r\n\r\n    if (caretPosition != null) {\r\n      if (minus) {\r\n        if (caretPosition > 0) caretPosition = caretPosition - length;\r\n      } else {\r\n        caretPosition = caretPosition + length;\r\n      }\r\n    }\r\n\r\n    if (options.debug) {\r\n      console.log('Caret at:', caretPosition);\r\n    }\r\n\r\n    return caretPosition;\r\n  }\r\n\r\n  /**\r\n   * Adds a string to the input at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {string} str The string to add\r\n   * @param  {number} position The (cursor) position where the string should be added\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  addStringAt(source: string, str: string, position = source.length, positionEnd = source.length, moveCaret = false) {\r\n    let output;\r\n\r\n    if (!position && position !== 0) {\r\n      output = source + str;\r\n    } else {\r\n      output = [source.slice(0, position), str, source.slice(positionEnd)].join('');\r\n\r\n      /**\r\n       * Avoid caret position change when maxLength is set\r\n       */\r\n      if (!this.isMaxLengthReached()) {\r\n        if (moveCaret) this.updateCaretPos(str.length);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Check whether the button is a standard button\r\n   */\r\n  isStandardButton = (button: string) => button && !(button[0] === '{' && button[button.length - 1] === '}');\r\n\r\n  /**\r\n   * Removes an amount of characters before a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  removeAt(source: string, position = source.length, positionEnd = source.length, moveCaret = false) {\r\n    if (position === 0 && positionEnd === 0) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      let prevTwoChars;\r\n      let emojiMatched;\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      if (position && position >= 0) {\r\n        prevTwoChars = source.substring(position - 2, position);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.substr(0, position - 2) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.substr(0, position - 1) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      } else {\r\n        prevTwoChars = source.slice(-2);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.slice(0, -2);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.slice(0, -1);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch((instance: any) => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Removes an amount of characters after a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   */\r\n  removeForwardsAt(\r\n    source: string,\r\n    position: number = source.length,\r\n    positionEnd: number = source.length,\r\n    moveCaret = false\r\n  ) {\r\n    if (!source?.length || position === null) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      const nextTwoChars = source.substring(position, position + 2);\r\n      const emojiMatched = nextTwoChars.match(emojiMatchedReg);\r\n\r\n      if (emojiMatched) {\r\n        output = source.substr(0, position) + source.substr(position + 2);\r\n      } else {\r\n        output = source.substr(0, position) + source.substr(position + 1);\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch((instance: any) => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\r\n   *\r\n   * @param  {object} inputObj\r\n   * @param  {string} updatedInput\r\n   */\r\n  handleMaxLength(inputObj: KeyboardInput, updatedInput: string) {\r\n    const options = this.getOptions();\r\n    const maxLength = options.maxLength;\r\n    const currentInput = inputObj[options.inputName || 'default'];\r\n    const condition = updatedInput.length - 1 >= maxLength;\r\n\r\n    if (\r\n      /**\r\n       * If pressing this button won't add more characters\r\n       * We exit out of this limiter function\r\n       */\r\n      updatedInput.length <= currentInput.length\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (Number.isInteger(maxLength)) {\r\n      if (options.debug) {\r\n        console.log('maxLength (num) reached:', condition);\r\n      }\r\n\r\n      if (condition) {\r\n        /**\r\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\r\n         */\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (typeof maxLength === 'object') {\r\n      const condition = updatedInput.length - 1 >= maxLength[options.inputName || 'default'];\r\n\r\n      if (options.debug) {\r\n        console.log('maxLength (obj) reached:', condition);\r\n      }\r\n\r\n      if (condition) {\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of maxLengthReached\r\n   */\r\n  isMaxLengthReached() {\r\n    return Boolean(this.maxLengthReached);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a touch device is being used\r\n   */\r\n  isTouchDevice() {\r\n    return 'ontouchstart' in window || navigator.maxTouchPoints;\r\n  }\r\n\r\n  /**\r\n   * Determines whether pointer events are supported\r\n   */\r\n  pointerEventsSupported() {\r\n    return !!window.PointerEvent;\r\n  }\r\n\r\n  /**\r\n   * Bind all methods in a given class\r\n   */\r\n\r\n  static bindMethods(myClass: any, instance: any) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (const myMethod of Object.getOwnPropertyNames(myClass.prototype)) {\r\n      const excludeMethod = myMethod === 'constructor' || myMethod === 'bindMethods';\r\n      if (!excludeMethod) {\r\n        instance[myMethod] = instance[myMethod].bind(instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transforms an arbitrary string to camelCase\r\n   *\r\n   * @param  {string} str The string to transform.\r\n   */\r\n  camelCase(str: string): string {\r\n    if (!str) return '';\r\n\r\n    return str\r\n      .toLowerCase()\r\n      .trim()\r\n      .split(/[.\\-_\\s]/g)\r\n      .reduce((str, word) => (word.length ? str + word[0].toUpperCase() + word.slice(1) : str));\r\n  }\r\n\r\n  /**\r\n   * Split array into chunks\r\n   */\r\n  chunkArray<T>(arr: T[], size: number): T[][] {\r\n    return [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));\r\n  }\r\n\r\n  /**\r\n   * Escape regex input\r\n   */\r\n  escapeRegex(str: string) {\r\n    return str.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n  }\r\n\r\n  /**\r\n   * Calculate caret position offset when using rtl option\r\n   */\r\n  getRtlOffset(index: number, input: string) {\r\n    let newIndex = index;\r\n    const startMarkerIndex = input.indexOf('\\u202B');\r\n    const endMarkerIndex = input.indexOf('\\u202C');\r\n\r\n    if (startMarkerIndex < index && startMarkerIndex != -1) {\r\n      newIndex--;\r\n    }\r\n    if (endMarkerIndex < index && startMarkerIndex != -1) {\r\n      newIndex--;\r\n    }\r\n\r\n    return newIndex < 0 ? 0 : newIndex;\r\n  }\r\n\r\n  /**\r\n   * Reusable empty function\r\n   */\r\n  static noop = () => {};\r\n\r\n  /**\r\n   * Check if a function is a constructor\r\n   */\r\n  isConstructor(f: any) {\r\n    try {\r\n      Reflect.construct(String, [], f);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default Utilities;\r\n","import { KeyboardOptions, PhysicalKeyboardParams } from '../interfaces';\r\nimport Utilities from '../services/Utilities';\r\nimport { getDefaultLayout } from '../services/KeyboardLayout';\r\n\r\n/**\r\n * Layout Key Mapping Interface\r\n */\r\ninterface LayoutKeyMapping {\r\n  normal: string | number;\r\n  shift: string | number;\r\n}\r\n\r\n/**\r\n * Physical Keyboard Service\r\n */\r\nclass PhysicalKeyboard {\r\n  getOptions: () => KeyboardOptions;\r\n  dispatch: any;\r\n  layoutJSON: Record<string, LayoutKeyMapping> | null = null;\r\n  lastLayout = '';\r\n  shiftActive = false;\r\n  capslockActive = false;\r\n\r\n  /**\r\n   * Creates an instance of the PhysicalKeyboard service\r\n   */\r\n  constructor({ dispatch, getOptions }: PhysicalKeyboardParams) {\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.dispatch = dispatch;\r\n    this.getOptions = getOptions;\r\n\r\n    if (this.getOptions() && this.getOptions().layout) {\r\n      this.lastLayout = this.getOptions()?.layout?.default?.[1] || '';\r\n      const layout = this.getOptions().layout;\r\n      if (layout) {\r\n        this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(layout));\r\n      }\r\n    } else {\r\n      this.lastLayout = getDefaultLayout().default[1];\r\n      this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(getDefaultLayout()));\r\n    }\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(PhysicalKeyboard, this);\r\n  }\r\n\r\n  handleHighlightKeyDown(e: KeyboardEvent) {\r\n    const options = this.getOptions();\r\n\r\n    // if (options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)) {\r\n    //   e.preventDefault();\r\n    //   e.stopImmediatePropagation();\r\n    // }\r\n\r\n    if ((e.code === 'ShiftLeft' || e.code === 'ShiftRight') && !this.shiftActive) {\r\n      this.shiftActive = !this.shiftActive;\r\n    }\r\n\r\n    if (e.code === 'CapsLock') {\r\n      this.capslockActive = !this.capslockActive;\r\n    }\r\n\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\r\n\r\n    this.dispatch((instance: any) => {\r\n      const standardButtonPressed = instance.getButtonElement(buttonPressed);\r\n      const functionButtonPressed = instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      let buttonDOM;\r\n      let buttonName: string;\r\n\r\n      if (standardButtonPressed) {\r\n        buttonDOM = standardButtonPressed;\r\n        buttonName = buttonPressed;\r\n      } else if (functionButtonPressed) {\r\n        buttonDOM = functionButtonPressed;\r\n        buttonName = `{${buttonPressed}}`;\r\n      } else {\r\n        return;\r\n      }\r\n\r\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\r\n        buttonElement.style.background = options.physicalKeyboardHighlightBgColor || '#dadce4';\r\n        buttonElement.style.color = options.physicalKeyboardHighlightTextColor || 'black';\r\n      };\r\n\r\n      if (buttonDOM) {\r\n        if (Array.isArray(buttonDOM)) {\r\n          buttonDOM.forEach((buttonElement) => applyButtonStyle(buttonElement));\r\n\r\n          // Even though we have an array of buttons, we just want to press one of them\r\n          if (options.physicalKeyboardHighlightPress) {\r\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n              buttonDOM[0]?.onpointerdown?.(e);\r\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\r\n              buttonDOM[0]?.click();\r\n            } else {\r\n              instance.handleButtonClicked(buttonName, e);\r\n            }\r\n          }\r\n        } else {\r\n          applyButtonStyle(buttonDOM);\r\n\r\n          if (options.physicalKeyboardHighlightPress) {\r\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n              buttonDOM?.onpointerdown?.(e);\r\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\r\n              buttonDOM.click();\r\n            } else {\r\n              instance.handleButtonClicked(buttonName, e);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  handleHighlightKeyUp(e: KeyboardEvent) {\r\n    const options = this.getOptions();\r\n\r\n    // if (options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)) {\r\n    //   e.preventDefault();\r\n    //   e.stopImmediatePropagation();\r\n    // }\r\n\r\n    if (e.code === 'ShiftLeft' || e.code === 'ShiftRight') {\r\n      this.shiftActive = false;\r\n    }\r\n\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\r\n\r\n    this.dispatch((instance: any) => {\r\n      const buttonDOM = instance.getButtonElement(buttonPressed) || instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\r\n        if (buttonElement.removeAttribute) {\r\n          buttonElement.removeAttribute('style');\r\n        }\r\n      };\r\n\r\n      if (buttonDOM) {\r\n        if (Array.isArray(buttonDOM)) {\r\n          buttonDOM.forEach((buttonElement) => applyButtonStyle(buttonElement));\r\n\r\n          // Even though we have an array of buttons, we just want to press one of them\r\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n            buttonDOM[0]?.onpointerup?.(e);\r\n          }\r\n        } else {\r\n          applyButtonStyle(buttonDOM);\r\n\r\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n            buttonDOM?.onpointerup?.(e);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  STANDARD_CODES = new Set([\r\n    // Alphanumeric\r\n    'Backquote',\r\n    'Digit0',\r\n    'Digit1',\r\n    'Digit2',\r\n    'Digit3',\r\n    'Digit4',\r\n    'Digit5',\r\n    'Digit6',\r\n    'Digit7',\r\n    'Digit8',\r\n    'Digit9',\r\n    'KeyA',\r\n    'KeyB',\r\n    'KeyC',\r\n    'KeyD',\r\n    'KeyE',\r\n    'KeyF',\r\n    'KeyG',\r\n    'KeyH',\r\n    'KeyI',\r\n    'KeyJ',\r\n    'KeyK',\r\n    'KeyL',\r\n    'KeyM',\r\n    'KeyN',\r\n    'KeyO',\r\n    'KeyP',\r\n    'KeyQ',\r\n    'KeyR',\r\n    'KeyS',\r\n    'KeyT',\r\n    'KeyU',\r\n    'KeyV',\r\n    'KeyW',\r\n    'KeyX',\r\n    'KeyY',\r\n    'KeyZ',\r\n\r\n    // Control & nav\r\n    'Enter',\r\n    'Escape',\r\n    'Backspace',\r\n    'Tab',\r\n    'Space',\r\n    'ArrowLeft',\r\n    'ArrowRight',\r\n    'ArrowUp',\r\n    'ArrowDown',\r\n    'Delete',\r\n    'Insert',\r\n    'Home',\r\n    'End',\r\n    'PageUp',\r\n    'PageDown',\r\n\r\n    // Modifier keys\r\n    'ShiftLeft',\r\n    'ShiftRight',\r\n    'ControlLeft',\r\n    'ControlRight',\r\n    'AltLeft',\r\n    'AltRight',\r\n    'MetaLeft',\r\n    'MetaRight',\r\n    'CapsLock',\r\n\r\n    // Symbols & punctuation\r\n    'Minus',\r\n    'Equal',\r\n    'BracketLeft',\r\n    'BracketRight',\r\n    'Backslash',\r\n    'Semicolon',\r\n    'Quote',\r\n    'Comma',\r\n    'Period',\r\n    'Slash',\r\n\r\n    // Function keys\r\n    'F1',\r\n    'F2',\r\n    'F3',\r\n    'F4',\r\n    'F5',\r\n    'F6',\r\n    'F7',\r\n    'F8',\r\n    'F9',\r\n    'F10',\r\n    'F11',\r\n    'F12',\r\n\r\n    // Numpad\r\n    'NumLock',\r\n    'Numpad0',\r\n    'Numpad1',\r\n    'Numpad2',\r\n    'Numpad3',\r\n    'Numpad4',\r\n    'Numpad5',\r\n    'Numpad6',\r\n    'Numpad7',\r\n    'Numpad8',\r\n    'Numpad9',\r\n    'NumpadAdd',\r\n    'NumpadSubtract',\r\n    'NumpadMultiply',\r\n    'NumpadDivide',\r\n    'NumpadDecimal',\r\n    'NumpadEnter',\r\n\r\n    // Misc\r\n    'ScrollLock',\r\n    'Pause',\r\n    'PrintScreen',\r\n    'ContextMenu',\r\n  ]);\r\n\r\n  /**\r\n   * Normalize a code string to match the official `e.code` spec format.\r\n   * Returns null if no match is found.\r\n   */\r\n  normalizeToStandardCode(input: string): string | null {\r\n    if (!input || typeof input !== 'string') return null;\r\n\r\n    if (this.STANDARD_CODES.has(input)) return input;\r\n\r\n    const upper = input.trim();\r\n    for (const code of this.STANDARD_CODES) {\r\n      if (code.toLowerCase() === upper.toLowerCase()) {\r\n        return code;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  normalizeOutput(rawKey: string): string {\r\n    const normalizeKeyMap: Record<string, string> = {\r\n      shiftleft: 'shift',\r\n      shiftright: 'shift',\r\n      controlleft: 'ctrl',\r\n      controlright: 'ctrl',\r\n      altleft: 'alt',\r\n      altright: 'alt',\r\n      metaleft: 'meta',\r\n      metaright: 'meta',\r\n      backspace: 'bksp',\r\n      capslock: 'lock',\r\n      enter: 'enter',\r\n      tab: 'tab',\r\n    };\r\n\r\n    const key = rawKey.toLowerCase();\r\n    return normalizeKeyMap[key] || (key.length > 1 ? key : rawKey);\r\n  }\r\n\r\n  /**\r\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\r\n   * @param  {object} e The KeyboardEvent\r\n   * @returns {string} The simple-keyboard layout key\r\n   */\r\n  getSimpleKeyboardLayoutKey(e: KeyboardEvent): string {\r\n    let output = '';\r\n\r\n    const options = this.getOptions();\r\n    const currentLayout = options?.layout?.default?.[1] ?? getDefaultLayout().default[1];\r\n    if (this.lastLayout !== currentLayout) {\r\n      this.lastLayout = currentLayout || '';\r\n      const layout = options?.layout ?? getDefaultLayout();\r\n      this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(layout));\r\n    }\r\n\r\n    const eCode = this.normalizeToStandardCode(e.code);\r\n\r\n    // if we have a valid code and it's in the layout, return early\r\n    if (this.layoutJSON && eCode && this.layoutJSON[eCode]) {\r\n      const layoutEntry = this.layoutJSON[eCode];\r\n      output = this.shiftActive || this.capslockActive ? layoutEntry.shift.toString() : layoutEntry.normal.toString();\r\n\r\n      const normalized = this.normalizeOutput(output);\r\n      return normalized;\r\n    }\r\n\r\n    // fallback path for known safe keys\r\n    const fallbackKeys = new Set(['backspace', 'enter', 'tab', 'escape']);\r\n    const key = (e.key || '').toLowerCase();\r\n    if (fallbackKeys.has(key)) {\r\n      output = key;\r\n      const normalized = this.normalizeOutput(output);\r\n      return normalized;\r\n    }\r\n\r\n    // unmapped key — log it and return blank\r\n    console.warn('[simple-keyboard][Edge Case Triggered] Unmapped key event:', {\r\n      code: e.code,\r\n      key: e.key,\r\n      keyCode: e.keyCode,\r\n      layoutJSON: this.layoutJSON,\r\n      userAgent: navigator.userAgent, // Browser + OS info\r\n      platform: navigator.platform, // OS-level platform\r\n      language: navigator.language, // Active input language (e.g., \"ko-KR\")\r\n      imeMode:\r\n        document.activeElement && 'inputMode' in document.activeElement\r\n          ? (document.activeElement as HTMLInputElement | HTMLTextAreaElement).inputMode\r\n          : 'unknown', // Input method\r\n      isEditable: (document.activeElement as HTMLElement)?.isContentEditable || false, // Useful for composition\r\n      time: new Date().toISOString(),\r\n    });\r\n\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * Retrieve key from keyCode\r\n   */\r\n  keyCodeToKey(keyCode: number): string {\r\n    return (\r\n      {\r\n        8: 'Backspace',\r\n        9: 'Tab',\r\n        13: 'Enter',\r\n        16: 'Shift',\r\n        17: 'Ctrl',\r\n        18: 'Alt',\r\n        19: 'Pause',\r\n        20: 'CapsLock',\r\n        27: 'Esc',\r\n        32: 'Space',\r\n        33: 'PageUp',\r\n        34: 'PageDown',\r\n        35: 'End',\r\n        36: 'Home',\r\n        37: 'ArrowLeft',\r\n        38: 'ArrowUp',\r\n        39: 'ArrowRight',\r\n        40: 'ArrowDown',\r\n        45: 'Insert',\r\n        46: 'Delete',\r\n        48: '0',\r\n        49: '1',\r\n        50: '2',\r\n        51: '3',\r\n        52: '4',\r\n        53: '5',\r\n        54: '6',\r\n        55: '7',\r\n        56: '8',\r\n        57: '9',\r\n        65: 'A',\r\n        66: 'B',\r\n        67: 'C',\r\n        68: 'D',\r\n        69: 'E',\r\n        70: 'F',\r\n        71: 'G',\r\n        72: 'H',\r\n        73: 'I',\r\n        74: 'J',\r\n        75: 'K',\r\n        76: 'L',\r\n        77: 'M',\r\n        78: 'N',\r\n        79: 'O',\r\n        80: 'P',\r\n        81: 'Q',\r\n        82: 'R',\r\n        83: 'S',\r\n        84: 'T',\r\n        85: 'U',\r\n        86: 'V',\r\n        87: 'W',\r\n        88: 'X',\r\n        89: 'Y',\r\n        90: 'Z',\r\n        91: 'Meta',\r\n        96: 'Numpad0',\r\n        97: 'Numpad1',\r\n        98: 'Numpad2',\r\n        99: 'Numpad3',\r\n        100: 'Numpad4',\r\n        101: 'Numpad5',\r\n        102: 'Numpad6',\r\n        103: 'Numpad7',\r\n        104: 'Numpad8',\r\n        105: 'Numpad9',\r\n        106: 'NumpadMultiply',\r\n        107: 'NumpadAdd',\r\n        109: 'NumpadSubtract',\r\n        110: 'NumpadDecimal',\r\n        111: 'NumpadDivide',\r\n        112: 'F1',\r\n        113: 'F2',\r\n        114: 'F3',\r\n        115: 'F4',\r\n        116: 'F5',\r\n        117: 'F6',\r\n        118: 'F7',\r\n        119: 'F8',\r\n        120: 'F9',\r\n        121: 'F10',\r\n        122: 'F11',\r\n        123: 'F12',\r\n        144: 'NumLock',\r\n        145: 'ScrollLock',\r\n        186: ';',\r\n        187: '=',\r\n        188: ',',\r\n        189: '-',\r\n        190: '.',\r\n        191: '/',\r\n        192: '`',\r\n        219: '[',\r\n        220: '\\\\',\r\n        221: ']',\r\n        222: \"'\",\r\n      }[keyCode] || ''\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Extracts and pads a layout object\r\n   * @param  {object} layout The layout object\r\n   * @returns {object} The layout object with padding\r\n   */\r\n  extractAndPadLayout(layout: Record<string, string[]>): Record<string, (string | number)[][]> {\r\n    const qwertyRowLengths = [14, 14, 13, 12, 3]; // Number of keys per QWERTY row\r\n\r\n    const processedLayout: Record<string, (string | number)[][]> = { default: [], shift: [] };\r\n\r\n    for (const type of ['default', 'shift']) {\r\n      if (!layout[type]) continue; // Skip if layout type is missing\r\n\r\n      const rows = layout[type].map((row) => row.split(' '));\r\n\r\n      for (let i = 0; i < qwertyRowLengths.length; i++) {\r\n        processedLayout[type][i] = rows[i] ? [...rows[i]] : [];\r\n        while (processedLayout[type][i].length < qwertyRowLengths[i]) {\r\n          processedLayout[type][i].push(-1); // Fill missing spots\r\n        }\r\n      }\r\n    }\r\n\r\n    return processedLayout;\r\n  }\r\n\r\n  /**\r\n   * Maps a layout object to event codes\r\n   * @param  {object} layout The layout object\r\n   * @returns {object} The layout object with event codes\r\n   */\r\n\r\n  mapLayoutToEventCodes(layout: Record<string, (string | number)[][]>): Record<string, LayoutKeyMapping> {\r\n    const mappedLayout: Record<string, LayoutKeyMapping> = {};\r\n\r\n    const qwertyRows = [\r\n      [\r\n        'Backquote',\r\n        'Digit1',\r\n        'Digit2',\r\n        'Digit3',\r\n        'Digit4',\r\n        'Digit5',\r\n        'Digit6',\r\n        'Digit7',\r\n        'Digit8',\r\n        'Digit9',\r\n        'Digit0',\r\n        'Minus',\r\n        'Equal',\r\n        'Backspace',\r\n      ],\r\n      [\r\n        'Tab',\r\n        'KeyQ',\r\n        'KeyW',\r\n        'KeyE',\r\n        'KeyR',\r\n        'KeyT',\r\n        'KeyY',\r\n        'KeyU',\r\n        'KeyI',\r\n        'KeyO',\r\n        'KeyP',\r\n        'BracketLeft',\r\n        'BracketRight',\r\n        'Backslash',\r\n      ],\r\n      [\r\n        'CapsLock',\r\n        'KeyA',\r\n        'KeyS',\r\n        'KeyD',\r\n        'KeyF',\r\n        'KeyG',\r\n        'KeyH',\r\n        'KeyJ',\r\n        'KeyK',\r\n        'KeyL',\r\n        'Semicolon',\r\n        'Quote',\r\n        'Enter',\r\n      ],\r\n      ['ShiftLeft', 'KeyZ', 'KeyX', 'KeyC', 'KeyV', 'KeyB', 'KeyN', 'KeyM', 'Comma', 'Period', 'Slash', 'ShiftRight'],\r\n      ['ControlLeft', 'AltLeft', 'Space'],\r\n    ];\r\n\r\n    for (let rowIndex = 0; rowIndex < qwertyRows.length; rowIndex++) {\r\n      for (let colIndex = 0; colIndex < qwertyRows[rowIndex].length; colIndex++) {\r\n        const eventCode = qwertyRows[rowIndex][colIndex];\r\n        const normalKey = layout.default[rowIndex][colIndex] ?? '';\r\n        const shiftKey = layout.shift[rowIndex][colIndex] ?? '';\r\n\r\n        mappedLayout[eventCode] = {\r\n          normal: normalKey !== -1 ? normalKey : '',\r\n          shift: shiftKey !== -1 ? shiftKey : '',\r\n        };\r\n      }\r\n    }\r\n\r\n    return mappedLayout;\r\n  }\r\n\r\n  isModifierKey = (e: KeyboardEvent): boolean => {\r\n    return (\r\n      e.altKey ||\r\n      e.ctrlKey ||\r\n      e.shiftKey ||\r\n      ['Tab', 'CapsLock', 'Esc', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(\r\n        e.code || e.key || this.keyCodeToKey(e?.keyCode)\r\n      )\r\n    );\r\n  };\r\n}\r\n\r\nexport default PhysicalKeyboard;\r\n","import { KeyboardLayoutObject } from \"../interfaces\";\r\n\r\nexport const getDefaultLayout = (): KeyboardLayoutObject => {\r\n  return {\r\n    default: [\r\n      \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\r\n      \"{tab} q w e r t y u i o p [ ] \\\\\",\r\n      \"{lock} a s d f g h j k l ; ' {enter}\",\r\n      \"{shift} z x c v b n m , . / {shift}\",\r\n      \".com @ {space}\",\r\n    ],\r\n    shift: [\r\n      \"~ ! @ # $ % ^ & * ( ) _ + {bksp}\",\r\n      \"{tab} Q W E R T Y U I O P { } |\",\r\n      '{lock} A S D F G H J K L : \" {enter}',\r\n      \"{shift} Z X C V B N M < > ? {shift}\",\r\n      \".com @ {space}\",\r\n    ],\r\n  };\r\n};\r\n","import './css/CandidateBox.css';\r\nimport Utilities from '../services/Utilities';\r\nimport { CandidateBoxParams, CandidateBoxRenderParams, CandidateBoxShowParams, KeyboardOptions } from './../interfaces';\r\n\r\nclass CandidateBox {\r\n  utilities: Utilities;\r\n  options: KeyboardOptions;\r\n  candidateBoxElement: HTMLDivElement | null = null;\r\n  pageIndex = 0;\r\n  pageSize: number;\r\n  private activeIndex = 0;\r\n  private candidateOptions: HTMLLIElement[] = [];\r\n  private globalLiveRegionElement: HTMLElement | null = document.querySelector('.hg-live-region');\r\n\r\n  constructor({ utilities, options }: CandidateBoxParams) {\r\n    this.utilities = utilities;\r\n    this.options = options;\r\n    Utilities.bindMethods(CandidateBox, this);\r\n    this.pageSize = this.utilities.getOptions().layoutCandidatesPageSize || 5;\r\n  }\r\n\r\n  destroy(): void {\r\n    if (this.candidateBoxElement) {\r\n      this.candidateBoxElement.remove();\r\n      this.candidateBoxElement = null;\r\n    }\r\n\r\n    this.activeIndex = 0;\r\n    this.candidateOptions = [];\r\n\r\n    // Ensure no keyboard nav leaks persist\r\n    const oldListbox = document.querySelector('.hg-candidate-box-list');\r\n    if (oldListbox) {\r\n      oldListbox.replaceWith(oldListbox.cloneNode(true)); // remove all listeners\r\n    }\r\n\r\n    this.pageIndex = 0;\r\n  }\r\n\r\n  show({ candidateValue, targetElement, onSelect }: CandidateBoxShowParams): void {\r\n    if (!candidateValue || !candidateValue.length) return;\r\n\r\n    const candidateListPages = this.utilities.chunkArray(candidateValue.split(' '), this.pageSize);\r\n\r\n    this.renderPage({\r\n      candidateListPages,\r\n      targetElement,\r\n      pageIndex: this.pageIndex,\r\n      nbPages: candidateListPages.length,\r\n      onItemSelected: (selectedCandidate: string, e: MouseEvent) => {\r\n        onSelect(selectedCandidate, e);\r\n        this.destroy();\r\n      },\r\n    });\r\n  }\r\n\r\n  renderPage({ candidateListPages, targetElement, pageIndex, nbPages, onItemSelected }: CandidateBoxRenderParams) {\r\n    this.candidateBoxElement?.remove();\r\n\r\n    this.candidateBoxElement = document.createElement('div');\r\n    this.candidateBoxElement.className = 'hg-candidate-box';\r\n\r\n    const candidateListULElement = document.createElement('ul');\r\n    candidateListULElement.className = 'hg-candidate-box-list';\r\n    candidateListULElement.setAttribute('role', 'listbox');\r\n    candidateListULElement.setAttribute('tabindex', '0');\r\n\r\n    candidateListPages[pageIndex].forEach((candidateListItem, i) => {\r\n      const candidateListLIElement = document.createElement('li');\r\n      candidateListLIElement.setAttribute('role', 'option');\r\n      candidateListLIElement.setAttribute('tabindex', '-1');\r\n      candidateListLIElement.setAttribute('aria-selected', i === 0 ? 'true' : 'false');\r\n      candidateListLIElement.id = `candidate-${i}`;\r\n      candidateListLIElement.className = 'hg-candidate-box-list-item';\r\n      candidateListLIElement.innerHTML = this.options.display?.[candidateListItem] || candidateListItem;\r\n\r\n      const getMouseEvent = () => {\r\n        const mouseEvent = new (this.options.useTouchEvents ? TouchEvent : MouseEvent)('click');\r\n        Object.defineProperty(mouseEvent, 'target', { value: candidateListLIElement });\r\n        return mouseEvent;\r\n      };\r\n\r\n      if (this.options.useTouchEvents) {\r\n        candidateListLIElement.ontouchstart = (e: any) => onItemSelected(candidateListItem, e || getMouseEvent());\r\n      } else {\r\n        candidateListLIElement.onclick = (e = getMouseEvent() as MouseEvent) => onItemSelected(candidateListItem, e);\r\n      }\r\n\r\n      candidateListULElement.appendChild(candidateListLIElement);\r\n    });\r\n\r\n    const isPrevBtnElementActive = pageIndex > 0;\r\n    const prevBtnElement = document.createElement('div');\r\n    prevBtnElement.classList.add('hg-candidate-box-prev');\r\n    if (isPrevBtnElementActive) prevBtnElement.classList.add('hg-candidate-box-btn-active');\r\n\r\n    prevBtnElement.onclick = () => {\r\n      if (!isPrevBtnElementActive) return;\r\n      this.renderPage({ candidateListPages, targetElement, pageIndex: pageIndex - 1, nbPages, onItemSelected });\r\n    };\r\n\r\n    const isNextBtnElementActive = pageIndex < nbPages - 1;\r\n    const nextBtnElement = document.createElement('div');\r\n    nextBtnElement.classList.add('hg-candidate-box-next');\r\n    if (isNextBtnElementActive) nextBtnElement.classList.add('hg-candidate-box-btn-active');\r\n\r\n    nextBtnElement.onclick = () => {\r\n      if (!isNextBtnElementActive) return;\r\n      this.renderPage({ candidateListPages, targetElement, pageIndex: pageIndex + 1, nbPages, onItemSelected });\r\n    };\r\n\r\n    this.candidateBoxElement.appendChild(prevBtnElement);\r\n    this.candidateBoxElement.appendChild(candidateListULElement);\r\n    this.candidateBoxElement.appendChild(nextBtnElement);\r\n\r\n    this.candidateBoxElement.addEventListener('keydown', (e: KeyboardEvent) => {\r\n      if (e.key === 'Escape') {\r\n        e.preventDefault();\r\n        this.destroy();\r\n      }\r\n    });\r\n\r\n    targetElement.prepend(this.candidateBoxElement);\r\n\r\n    candidateListULElement.focus();\r\n    this.setupKeyboardNav(candidateListULElement);\r\n  }\r\n\r\n  private setupKeyboardNav(listbox: HTMLUListElement) {\r\n    this.candidateOptions = Array.from(listbox.querySelectorAll('[role=\"option\"]'));\r\n    this.candidateOptions.forEach((option, i) => {\r\n      if (!option.id) option.id = `candidate-${i}`;\r\n    });\r\n\r\n    this.setActiveOption(0);\r\n\r\n    listbox.addEventListener('keydown', (e: KeyboardEvent) => {\r\n      if (e.key === 'ArrowDown') {\r\n        e.preventDefault();\r\n        this.updateActiveIndex((this.activeIndex + 1) % this.candidateOptions.length);\r\n      } else if (e.key === 'ArrowUp') {\r\n        e.preventDefault();\r\n        this.updateActiveIndex((this.activeIndex - 1 + this.candidateOptions.length) % this.candidateOptions.length);\r\n      } else if (e.key === 'Enter' || e.key === ' ') {\r\n        e.preventDefault();\r\n        this.activateSelectedOption();\r\n      }\r\n    });\r\n  }\r\n\r\n  private setActiveOption(index: number): void {\r\n    this.activeIndex = index;\r\n    this.updateActiveIndex(index);\r\n  }\r\n\r\n  private updateActiveIndex(newIndex: number): void {\r\n    const prev = this.candidateOptions[this.activeIndex];\r\n    const next = this.candidateOptions[newIndex];\r\n\r\n    if (prev) {\r\n      prev.setAttribute('aria-selected', 'false');\r\n      prev.classList.remove('active');\r\n    }\r\n\r\n    this.activeIndex = newIndex;\r\n\r\n    if (next) {\r\n      next.setAttribute('aria-selected', 'true');\r\n      next.classList.add('active');\r\n      next.scrollIntoView({ block: 'nearest' });\r\n\r\n      if (this.globalLiveRegionElement) {\r\n        const total = this.candidateOptions.length;\r\n        const label = next.textContent?.trim();\r\n        this.globalLiveRegionElement.textContent = `${newIndex + 1} of ${total}: ${label}`;\r\n      }\r\n\r\n      if (!this.candidateBoxElement) return;\r\n\r\n      const listbox = this.candidateBoxElement.querySelector('.hg-candidate-box-list');\r\n      if (listbox) {\r\n        listbox.setAttribute('aria-activedescendant', next.id);\r\n      }\r\n    }\r\n  }\r\n\r\n  private activateSelectedOption(): void {\r\n    const activeOption = this.candidateOptions[this.activeIndex];\r\n    if (!activeOption) return;\r\n\r\n    // Trigger the click handler manually\r\n    activeOption.click();\r\n  }\r\n}\r\n\r\nexport default CandidateBox;\r\n","import './css/Keyboard.css';\r\n\r\nimport { getDefaultLayout } from '../services/KeyboardLayout';\r\nimport PhysicalKeyboard from '../services/PhysicalKeyboard';\r\nimport Utilities from '../services/Utilities';\r\nimport {\r\n  KeyboardOptions,\r\n  KeyboardInput,\r\n  KeyboardButtonElements,\r\n  KeyboardHandlerEvent,\r\n  KeyboardElement,\r\n  SKWindow,\r\n} from '../interfaces';\r\nimport CandidateBox from './CandidateBox';\r\n\r\n/**\r\n * Root class for simple-keyboard.\r\n * This class:\r\n * - Parses the options\r\n * - Renders the rows and buttons\r\n * - Handles button functionality\r\n */\r\nclass SimpleKeyboard {\r\n  input!: KeyboardInput;\r\n  options!: KeyboardOptions;\r\n  utilities!: Utilities;\r\n  caretPosition!: number | null;\r\n  caretPositionEnd!: number | null;\r\n  keyboardDOM!: KeyboardElement;\r\n  keyboardPluginClasses!: string;\r\n  keyboardDOMClass!: string;\r\n  buttonElements!: KeyboardButtonElements;\r\n  currentInstanceName!: string;\r\n  allKeyboardInstances!: { [key: string]: SimpleKeyboard };\r\n  keyboardInstanceNames!: string[];\r\n  isFirstKeyboardInstance!: boolean;\r\n  physicalKeyboard!: PhysicalKeyboard;\r\n  modules!: { [key: string]: any };\r\n  activeButtonClass!: string;\r\n  holdInteractionTimeout!: number;\r\n  holdTimeout!: number;\r\n  isMouseHold!: boolean;\r\n  initialized!: boolean;\r\n  candidateBox!: CandidateBox | null;\r\n  keyboardRowsDOM!: KeyboardElement;\r\n  defaultName = 'default';\r\n  activeInputElement: HTMLInputElement | HTMLTextAreaElement | null = null;\r\n  keyboardInstructions: HTMLElement | null = null;\r\n  instructions: string | null = null;\r\n  listenersAdded = false;\r\n  ariaLiveTimer: ReturnType<typeof setTimeout> | null = null;\r\n  useLiveRegion = true;\r\n  liveRegionMode: 'assertive' | 'polite' = 'polite';\r\n  liveRegionDelay = 0;\r\n  ariaLabel = '';\r\n  handleKeyDownBound!: (event: KeyboardEvent) => void;\r\n  handleInternalKeyNavBound!: (event: KeyboardEvent) => void;\r\n  handleKeyUpBound!: (event: KeyboardEvent) => void;\r\n  handleMouseDownBound!: (event: MouseEvent) => void;\r\n  handleMouseUpBound!: (event: MouseEvent) => void;\r\n  handleTouchEndBound!: (event: TouchEvent) => void;\r\n  handleSelectBound!: (event: Event) => void;\r\n  handleSelectionChangeBound!: (event: Event) => void;\r\n  NAV_KEYS = new Set(['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Tab', 'Home', 'End', 'PageUp', 'PageDown']);\r\n  MODIFIER_KEYS = new Set(['Shift', 'Control', 'Alt', 'Meta', 'CapsLock', 'NumLock', 'ScrollLock', 'Fn', 'FnLock']);\r\n  NAMED_KEYS_TO_ANNOUNCE = new Set(['Enter', 'Backspace', 'Delete', 'Escape', ' ', 'Spacebar']);\r\n  NAMED_READABLE: Record<string, string> = {\r\n    ' ': 'Space',\r\n    Spacebar: 'Space',\r\n  };\r\n  private announcerEl: HTMLDivElement | null = null;\r\n\r\n  /**\r\n   * Creates an instance of SimpleKeyboard\r\n   * @param {Array} selectorOrOptions If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\r\n   */\r\n  constructor(selectorOrOptions?: string | HTMLDivElement | KeyboardOptions, keyboardOptions?: KeyboardOptions) {\r\n    if (typeof window === 'undefined') return;\r\n\r\n    const { keyboardDOMClass, keyboardDOM, options = {} } = this.handleParams(selectorOrOptions, keyboardOptions);\r\n\r\n    /**\r\n     * Implementing Announcer\r\n     */\r\n    if (!keyboardDOM) throw new Error('Keyboard root not found');\r\n\r\n    // Reuse or create announcer; safe before/after attachment\r\n    this.announcerEl = this.ensureAnnouncer(keyboardDOM);\r\n\r\n    /**\r\n     * Initializing Utilities\r\n     */\r\n    this.utilities = new Utilities({\r\n      getOptions: this.getOptions,\r\n      getCaretPosition: this.getCaretPosition,\r\n      getCaretPositionEnd: this.getCaretPositionEnd,\r\n      dispatch: this.dispatch,\r\n    });\r\n\r\n    /**\r\n     * Caret position\r\n     */\r\n    this.caretPosition = null;\r\n\r\n    /**\r\n     * Caret position end\r\n     */\r\n    this.caretPositionEnd = null;\r\n\r\n    /**\r\n     * Processing options\r\n     */\r\n    this.keyboardDOM = keyboardDOM;\r\n\r\n    /**\r\n     * @type {object}\r\n     * @property {object} layout Modify the keyboard layout.\r\n     * @property {string} layoutName Specifies which layout should be used.\r\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\r\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\r\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\r\n     * @property {array} buttonTheme A prop to add your own css classes to one or several buttons.\r\n     * @property {array} buttonAttributes A prop to add your own attributes to one or several buttons.\r\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\r\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\r\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\r\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\r\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\r\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\r\n     * @property {boolean} physicalKeyboardHighlightPress Presses keys highlighted by physicalKeyboardHighlight\r\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\r\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\r\n     * @property {boolean} physicalKeyboardHighlightPressUseClick Whether physicalKeyboardHighlightPress should use clicks to trigger buttons.\r\n     * @property {boolean} physicalKeyboardHighlightPressUsePointerEvents Whether physicalKeyboardHighlightPress should use pointer events to trigger buttons.\r\n     * @property {boolean} physicalKeyboardHighlightPreventDefault Whether physicalKeyboardHighlight should use preventDefault to disable default browser actions.\r\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\r\n     * @property {boolean} preventMouseUpDefault Calling preventDefault for the mouseup events.\r\n     * @property {boolean} stopMouseDownPropagation Stops pointer down events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {boolean} stopMouseUpPropagation Stops pointer up events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\r\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\r\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n     * @property {function(keyboard: Keyboard):void} beforeInputUpdate Perform an action before any input change\r\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\r\n     * @property {boolean} useButtonTag Render buttons as a button element instead of a div element.\r\n     * @property {boolean} disableCaretPositioning A prop to ensure characters are always be added/removed at the end of the string.\r\n     * @property {object} inputPattern Restrains input(s) change to the defined regular expression pattern.\r\n     * @property {boolean} useTouchEvents Instructs simple-keyboard to use touch events instead of click events.\r\n     * @property {boolean} autoUseTouchEvents Enable useTouchEvents automatically when touch device is detected.\r\n     * @property {boolean} useMouseEvents Opt out of PointerEvents handling, falling back to the prior mouse event logic.\r\n     * @property {function} destroy Clears keyboard listeners and DOM elements.\r\n     * @property {boolean} disableButtonHold Disable button hold action.\r\n     * @property {boolean} rtl Adds unicode right-to-left control characters to input return values.\r\n     * @property {function} onKeyReleased Executes the callback function on key release.\r\n     * @property {array} modules Module classes to be loaded by simple-keyboard.\r\n     * @property {boolean} enableLayoutCandidates Enable input method editor candidate list support.\r\n     * @property {object} excludeFromLayout Buttons to exclude from layout\r\n     * @property {number} layoutCandidatesPageSize Determines size of layout candidate list\r\n     * @property {boolean} layoutCandidatesCaseSensitiveMatch Determines whether layout candidate match should be case sensitive.\r\n     * @property {boolean} disableCandidateNormalization Disables the automatic normalization for selected layout candidates\r\n     * @property {boolean} enableLayoutCandidatesKeyPress Enables onKeyPress triggering for layoutCandidate items\r\n     * @property {boolean} updateCaretOnSelectionChange Updates caret when selectionchange event is fired\r\n     * @property {boolean} clickOnMouseDown When useMouseEvents is enabled, this option allows you to trigger a button click event on mousedown\r\n     */\r\n    this.options = {\r\n      layoutName: 'default',\r\n      theme: 'hg-theme-default',\r\n      inputName: 'default',\r\n      preventMouseDownDefault: false,\r\n      enableLayoutCandidates: true,\r\n      excludeFromLayout: {},\r\n      ...options,\r\n    };\r\n\r\n    /**\r\n     * @type {object} Classes identifying loaded plugins\r\n     */\r\n    this.keyboardPluginClasses = '';\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(SimpleKeyboard, this);\r\n\r\n    /**\r\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\r\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\r\n     * @example\r\n     * // To get entered input\r\n     * const input = keyboard.getInput();\r\n     *\r\n     * // To clear entered input.\r\n     * keyboard.clearInput();\r\n     *\r\n     * @type {object}\r\n     * @property {object} default Default SimpleKeyboard internal input.\r\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\r\n     */\r\n    const { inputName = this.defaultName } = this.options;\r\n    this.input = {};\r\n    this.input[inputName] = '';\r\n\r\n    /**\r\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\r\n     */\r\n    this.keyboardDOMClass = keyboardDOMClass;\r\n\r\n    /**\r\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\r\n     */\r\n    this.buttonElements = {};\r\n\r\n    /**\r\n     * Simple-keyboard Instances\r\n     * This enables multiple simple-keyboard support with easier management\r\n     */\r\n    if (!(window as SKWindow)['SimpleKeyboardInstances']) (window as SKWindow)['SimpleKeyboardInstances'] = {};\r\n\r\n    this.currentInstanceName = this.utilities.camelCase(this.keyboardDOMClass);\r\n    (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName] = this;\r\n\r\n    /**\r\n     * Instance vars\r\n     */\r\n    this.allKeyboardInstances = (window as SKWindow)['SimpleKeyboardInstances'];\r\n    this.keyboardInstanceNames = Object.keys((window as SKWindow)['SimpleKeyboardInstances']);\r\n    this.isFirstKeyboardInstance = this.keyboardInstanceNames[0] === this.currentInstanceName;\r\n\r\n    /**\r\n     * Physical Keyboard support\r\n     */\r\n    this.physicalKeyboard = new PhysicalKeyboard({\r\n      dispatch: this.dispatch,\r\n      getOptions: this.getOptions,\r\n    });\r\n\r\n    /**\r\n     * Initializing CandidateBox\r\n     */\r\n    this.candidateBox = this.options.enableLayoutCandidates\r\n      ? new CandidateBox({\r\n          utilities: this.utilities,\r\n          options: this.options,\r\n        })\r\n      : null;\r\n\r\n    /**\r\n     * Rendering keyboard\r\n     */\r\n    if (this.keyboardDOM) this.render();\r\n    else {\r\n      console.warn(`\".${keyboardDOMClass}\" was not found in the DOM.`);\r\n      throw new Error('KEYBOARD_DOM_ERROR');\r\n    }\r\n\r\n    /**\r\n     * Modules\r\n     */\r\n    this.modules = {};\r\n    this.loadModules();\r\n  }\r\n\r\n  /**\r\n   * Accessibility Announcer\r\n   * This module is responsible for announcing changes in the keyboard state to assistive technologies.\r\n   */\r\n  private ensureAnnouncer(keyboardEl: Element): HTMLDivElement {\r\n    const parentEl = keyboardEl.parentElement;\r\n\r\n    // Prefer sibling announcer\r\n    if (parentEl) {\r\n      let announcerEl = parentEl.querySelector<HTMLDivElement>(':scope > .hg-live-region');\r\n      if (!announcerEl) {\r\n        announcerEl = document.createElement('div');\r\n        announcerEl.className = 'hg-live-region sr-only';\r\n        announcerEl.setAttribute('role', 'status');\r\n        announcerEl.setAttribute('aria-live', 'polite');\r\n        announcerEl.setAttribute('aria-atomic', 'false');\r\n        keyboardEl.insertAdjacentElement('afterend', announcerEl);\r\n      } else {\r\n        announcerEl.textContent = '';\r\n      }\r\n      return announcerEl;\r\n    }\r\n\r\n    // Fallback: insert inside root but outside key rows\r\n    let announcerEl = keyboardEl.querySelector<HTMLDivElement>(':scope > .hg-live-region');\r\n    if (!announcerEl) {\r\n      announcerEl = document.createElement('div');\r\n      announcerEl.className = 'hg-live-region sr-only';\r\n      announcerEl.setAttribute('role', 'status');\r\n      announcerEl.setAttribute('aria-live', 'polite');\r\n      announcerEl.setAttribute('aria-atomic', 'false');\r\n\r\n      const rowsEl = keyboardEl.querySelector(':scope > .hg-rows');\r\n      if (rowsEl && rowsEl.nextSibling) {\r\n        keyboardEl.insertBefore(announcerEl, rowsEl.nextSibling);\r\n      } else {\r\n        keyboardEl.appendChild(announcerEl);\r\n      }\r\n    } else {\r\n      announcerEl.textContent = '';\r\n    }\r\n\r\n    return announcerEl;\r\n  }\r\n\r\n  /**\r\n   * parseParams\r\n   */\r\n  handleParams = (\r\n    selectorOrOptions?: string | HTMLDivElement | KeyboardOptions,\r\n    keyboardOptions?: KeyboardOptions\r\n  ): {\r\n    keyboardDOMClass: string;\r\n    keyboardDOM: KeyboardElement;\r\n    options: Partial<KeyboardOptions | undefined>;\r\n  } => {\r\n    let keyboardDOMClass;\r\n    let keyboardDOM;\r\n    let options;\r\n\r\n    /**\r\n     * If first parameter is a string:\r\n     * Consider it as an element's class\r\n     */\r\n    if (typeof selectorOrOptions === 'string') {\r\n      keyboardDOMClass = selectorOrOptions.split('.').join('');\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`) as KeyboardElement;\r\n      options = keyboardOptions;\r\n\r\n      /**\r\n       * If first parameter is an KeyboardElement\r\n       * Consider it as the keyboard DOM element\r\n       */\r\n    } else if (selectorOrOptions instanceof HTMLDivElement) {\r\n      /**\r\n       * This element must have a class, otherwise throw\r\n       */\r\n      if (!selectorOrOptions.className) {\r\n        console.warn('Any DOM element passed as parameter must have a class.');\r\n        throw new Error('KEYBOARD_DOM_CLASS_ERROR');\r\n      }\r\n\r\n      keyboardDOMClass = selectorOrOptions.className.split(' ')[0];\r\n      keyboardDOM = selectorOrOptions;\r\n      options = keyboardOptions;\r\n\r\n      /**\r\n       * Otherwise, search for .simple-keyboard DOM element\r\n       */\r\n    } else {\r\n      keyboardDOMClass = 'simple-keyboard';\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`) as KeyboardElement;\r\n      options = selectorOrOptions;\r\n    }\r\n\r\n    return {\r\n      keyboardDOMClass,\r\n      keyboardDOM,\r\n      options,\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Getters\r\n   */\r\n  getOptions = (): KeyboardOptions => this.options;\r\n  getCaretPosition = (): number | null => this.caretPosition;\r\n  getCaretPositionEnd = (): number | null => this.caretPositionEnd;\r\n\r\n  /**\r\n   * Changes the internal caret position\r\n   * @param {number} position The caret's start position\r\n   * @param {number} positionEnd The caret's end position\r\n   */\r\n  setCaretPosition(position: number | null, endPosition = position): void {\r\n    this.caretPosition = position;\r\n    this.caretPositionEnd = endPosition;\r\n  }\r\n\r\n  /**\r\n   * Retrieve the candidates for a given input\r\n   * @param input The input string to check\r\n   */\r\n  getInputCandidates(input: string): { candidateKey: string; candidateValue: string } | Record<string, never> {\r\n    const { layoutCandidates: layoutCandidatesObj, layoutCandidatesCaseSensitiveMatch } = this.options;\r\n\r\n    if (!layoutCandidatesObj || typeof layoutCandidatesObj !== 'object') {\r\n      return {};\r\n    }\r\n\r\n    const layoutCandidates = Object.keys(layoutCandidatesObj).filter((layoutCandidate: string) => {\r\n      const inputSubstr = input.substring(0, this.getCaretPositionEnd() || 0) || input;\r\n      const regexp = new RegExp(\r\n        `${this.utilities.escapeRegex(layoutCandidate)}$`,\r\n        layoutCandidatesCaseSensitiveMatch ? 'g' : 'gi'\r\n      );\r\n      const matches = [...inputSubstr.matchAll(regexp)];\r\n      return !!matches.length;\r\n    });\r\n\r\n    if (layoutCandidates.length > 1) {\r\n      const candidateKey = layoutCandidates.sort((a, b) => b.length - a.length)[0];\r\n      return {\r\n        candidateKey,\r\n        candidateValue: layoutCandidatesObj[candidateKey],\r\n      };\r\n    } else if (layoutCandidates.length) {\r\n      const candidateKey = layoutCandidates[0];\r\n      return {\r\n        candidateKey,\r\n        candidateValue: layoutCandidatesObj[candidateKey],\r\n      };\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows a suggestion box with a list of candidate words\r\n   * @param candidates The chosen candidates string as defined in the layoutCandidates option\r\n   * @param targetElement The element next to which the candidates box will be shown\r\n   */\r\n  showCandidatesBox(candidateKey: string, candidateValue: string, targetElement: KeyboardElement): void {\r\n    if (this.candidateBox) {\r\n      this.candidateBox.show({\r\n        candidateValue,\r\n        targetElement,\r\n        onSelect: (selectedCandidate: string, e: MouseEvent) => {\r\n          const { layoutCandidatesCaseSensitiveMatch, disableCandidateNormalization, enableLayoutCandidatesKeyPress } =\r\n            this.options;\r\n\r\n          let candidateStr = selectedCandidate;\r\n\r\n          if (!disableCandidateNormalization) {\r\n            /**\r\n             * Making sure that our suggestions are not composed characters\r\n             */\r\n            candidateStr = selectedCandidate.normalize('NFD');\r\n          }\r\n\r\n          /**\r\n           * Perform an action before any input change\r\n           */\r\n          if (typeof this.options.beforeInputUpdate === 'function') {\r\n            this.options.beforeInputUpdate(this);\r\n          }\r\n\r\n          const currentInput = this.getInput(this.options.inputName, true);\r\n          const initialCaretPosition = this.getCaretPositionEnd() || 0;\r\n          const inputSubstr = currentInput.substring(0, initialCaretPosition || 0) || currentInput;\r\n\r\n          const regexp = new RegExp(\r\n            `${this.utilities.escapeRegex(candidateKey)}$`,\r\n            layoutCandidatesCaseSensitiveMatch ? 'g' : 'gi'\r\n          );\r\n          const newInputSubstr = inputSubstr.replace(regexp, candidateStr);\r\n          const newInput = currentInput.replace(inputSubstr, newInputSubstr);\r\n\r\n          const caretPositionDiff = newInputSubstr.length - inputSubstr.length;\r\n          let newCaretPosition = (initialCaretPosition || currentInput.length) + caretPositionDiff;\r\n\r\n          if (newCaretPosition < 0) newCaretPosition = 0;\r\n\r\n          this.setInput(newInput, this.options.inputName, true);\r\n          this.setCaretPosition(newCaretPosition);\r\n\r\n          /**\r\n           * Calling onKeyPress\r\n           * We pass in the composed candidate instead of the decomposed one\r\n           * To prevent confusion for users\r\n           */\r\n          if (enableLayoutCandidatesKeyPress && typeof this.options.onKeyPress === 'function') {\r\n            this.options.onKeyPress(selectedCandidate, e);\r\n          }\r\n\r\n          if (typeof this.options.onChange === 'function') {\r\n            this.options.onChange(this.getInput(this.options.inputName, true), e);\r\n          }\r\n\r\n          /**\r\n           * Calling onChangeAll\r\n           */\r\n          if (typeof this.options.onChangeAll === 'function') this.options.onChangeAll(this.getAllInputs(), e);\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles clicks made to keyboard buttons\r\n   * @param  {string} button The button's layout name.\r\n   */\r\n  handleButtonClicked(button: string, e?: KeyboardHandlerEvent): void {\r\n    const { inputName = this.defaultName, debug } = this.options;\r\n    /**\r\n     * Ignoring placeholder buttons\r\n     */\r\n    if (button === '{//}') return;\r\n\r\n    /**\r\n     * Creating inputName if it doesn't exist\r\n     */\r\n    if (!this.input[inputName]) this.input[inputName] = '';\r\n\r\n    /**\r\n     * Perform an action before any input change\r\n     */\r\n    if (typeof this.options.beforeInputUpdate === 'function') {\r\n      this.options.beforeInputUpdate(this);\r\n    }\r\n\r\n    /**\r\n     * Calculating new input\r\n     */\r\n    const updatedInput = this.utilities.getUpdatedInput(\r\n      button,\r\n      this.input[inputName],\r\n      this.caretPosition,\r\n      this.caretPositionEnd\r\n    );\r\n\r\n    /**\r\n     * EDGE CASE: Check for whole input selection changes that will yield same updatedInput\r\n     */\r\n    if (this.utilities.isStandardButton(button) && this.activeInputElement) {\r\n      const isEntireInputSelection =\r\n        this.input[inputName] &&\r\n        this.input[inputName] === updatedInput &&\r\n        this.caretPosition === 0 &&\r\n        this.caretPositionEnd === updatedInput.length;\r\n\r\n      if (isEntireInputSelection) {\r\n        this.setInput('', this.options.inputName, true);\r\n        this.setCaretPosition(0);\r\n        this.activeInputElement.value = '';\r\n        this.activeInputElement.setSelectionRange(0, 0);\r\n        this.handleButtonClicked(button, e);\r\n        return;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Calling onKeyPress\r\n     */\r\n    if (typeof this.options.onKeyPress === 'function') this.options.onKeyPress(button, e);\r\n\r\n    if (\r\n      // If input will change as a result of this button press\r\n      this.input[inputName] !== updatedInput &&\r\n      // This pertains to the \"inputPattern\" option:\r\n      // If inputPattern isn't set\r\n      (!this.options.inputPattern ||\r\n        // Or, if it is set and if the pattern is valid - we proceed.\r\n        (this.options.inputPattern && this.inputPatternIsValid(updatedInput)))\r\n    ) {\r\n      /**\r\n       * If maxLength and handleMaxLength yield true, halting\r\n       */\r\n      if (this.options.maxLength && this.utilities.handleMaxLength(this.input, updatedInput)) {\r\n        return;\r\n      }\r\n\r\n      /**\r\n       * Updating input\r\n       */\r\n      const newInputValue = this.utilities.getUpdatedInput(\r\n        button,\r\n        this.input[inputName],\r\n        this.caretPosition,\r\n        this.caretPositionEnd,\r\n        true\r\n      );\r\n\r\n      this.setInput(newInputValue, this.options.inputName, true);\r\n\r\n      if (debug) console.log('Input changed:', this.getAllInputs());\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          'Caret at: ',\r\n          this.getCaretPosition(),\r\n          this.getCaretPositionEnd(),\r\n          `(${this.keyboardDOMClass})`,\r\n          e?.type\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Enforce syncInstanceInputs, if set\r\n       */\r\n      if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n\r\n      /**\r\n       * Calling onChange\r\n       */\r\n      if (typeof this.options.onChange === 'function')\r\n        this.options.onChange(this.getInput(this.options.inputName, true), e);\r\n\r\n      /**\r\n       * Calling onChangeAll\r\n       */\r\n      if (typeof this.options.onChangeAll === 'function') this.options.onChangeAll(this.getAllInputs(), e);\r\n\r\n      /**\r\n       * Check if this new input has candidates (suggested words)\r\n       */\r\n      if (e?.target && this.options.enableLayoutCandidates) {\r\n        const { candidateKey, candidateValue } = this.getInputCandidates(updatedInput);\r\n\r\n        if (candidateKey && candidateValue) {\r\n          this.showCandidatesBox(candidateKey, candidateValue, this.keyboardDOM);\r\n        } else {\r\n          this.candidateBox?.destroy();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * After a button is clicked the selection (if any) will disappear\r\n     * we should reflect this in our state, as applicable\r\n     */\r\n    if (this.caretPositionEnd && this.caretPosition !== this.caretPositionEnd) {\r\n      this.setCaretPosition(this.caretPositionEnd, this.caretPositionEnd);\r\n\r\n      if (this.activeInputElement) {\r\n        this.activeInputElement.setSelectionRange(this.caretPositionEnd, this.caretPositionEnd);\r\n      }\r\n\r\n      if (this.options.debug) {\r\n        console.log('Caret position aligned', this.caretPosition);\r\n      }\r\n    }\r\n\r\n    if (debug) {\r\n      console.log('Key pressed:', button);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get mouse hold state\r\n   */\r\n  getMouseHold() {\r\n    return this.isMouseHold;\r\n  }\r\n\r\n  /**\r\n   * Mark mouse hold state as set\r\n   */\r\n  setMouseHold(value: boolean) {\r\n    if (this.options.syncInstanceInputs) {\r\n      this.dispatch((instance: SimpleKeyboard) => {\r\n        instance.isMouseHold = value;\r\n      });\r\n    } else {\r\n      this.isMouseHold = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mousedown\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonMouseDown(button: string, e: KeyboardHandlerEvent): void {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseDownDefault) e.preventDefault();\r\n      if (this.options.stopMouseDownPropagation) e.stopPropagation();\r\n\r\n      /**\r\n       * Add active class\r\n       */\r\n      e.target.classList.add(this.activeButtonClass);\r\n    }\r\n\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n    if (this.holdTimeout) clearTimeout(this.holdTimeout);\r\n\r\n    /**\r\n     * @type {boolean} Whether the mouse is being held onKeyPress\r\n     */\r\n    this.setMouseHold(true);\r\n\r\n    /**\r\n     * @type {object} Time to wait until a key hold is detected\r\n     */\r\n    if (!this.options.disableButtonHold) {\r\n      this.holdTimeout = window.setTimeout(() => {\r\n        if (\r\n          (this.getMouseHold() &&\r\n            // TODO: This needs to be configurable through options\r\n            ((!button.includes('{') && !button.includes('}')) ||\r\n              button === '{delete}' ||\r\n              button === '{backspace}' ||\r\n              button === '{bksp}' ||\r\n              button === '{space}' ||\r\n              button === '{tab}')) ||\r\n          button === '{arrowright}' ||\r\n          button === '{arrowleft}' ||\r\n          button === '{arrowup}' ||\r\n          button === '{arrowdown}'\r\n        ) {\r\n          if (this.options.debug) console.log('Button held:', button);\r\n\r\n          this.handleButtonHold(button);\r\n        }\r\n        clearTimeout(this.holdTimeout);\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mouseup\r\n   */\r\n  handleButtonMouseUp(button?: string, e?: KeyboardHandlerEvent): void {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseUpDefault && e.preventDefault) e.preventDefault();\r\n      if (this.options.stopMouseUpPropagation && e.stopPropagation) e.stopPropagation();\r\n\r\n      /* istanbul ignore next */\r\n      const isKeyboard =\r\n        e.target === this.keyboardDOM ||\r\n        (e.target && this.keyboardDOM.contains(e.target)) ||\r\n        (this.candidateBox &&\r\n          this.candidateBox.candidateBoxElement &&\r\n          (e.target === this.candidateBox.candidateBoxElement ||\r\n            (e.target && this.candidateBox.candidateBoxElement.contains(e.target))));\r\n\r\n      /**\r\n       * On click outside, remove candidateBox\r\n       */\r\n      if (!isKeyboard && this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Remove active class\r\n     */\r\n    this.recurseButtons((buttonElement: Element) => {\r\n      buttonElement.classList.remove(this.activeButtonClass);\r\n    });\r\n\r\n    this.setMouseHold(false);\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * Calling onKeyReleased\r\n     */\r\n    if (button && typeof this.options.onKeyReleased === 'function') this.options.onKeyReleased(button, e);\r\n  }\r\n\r\n  /**\r\n   * Handles container mousedown\r\n   */\r\n  handleKeyboardContainerMouseDown(e: KeyboardHandlerEvent): void {\r\n    /**\r\n     * Handle event options\r\n     */\r\n    if (this.options.preventMouseDownDefault) e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Handles button hold\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonHold(button: string): void {\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * @type {object} Timeout dictating the speed of key hold iterations\r\n     */\r\n    this.holdInteractionTimeout = window.setTimeout(() => {\r\n      if (this.getMouseHold()) {\r\n        this.handleButtonClicked(button);\r\n        this.handleButtonHold(button);\r\n      } else {\r\n        clearTimeout(this.holdInteractionTimeout);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances (if you have several instances).\r\n   */\r\n  syncInstanceInputs(): void {\r\n    this.dispatch((instance: SimpleKeyboard) => {\r\n      instance.replaceInput(this.input);\r\n      instance.setCaretPosition(this.caretPosition, this.caretPositionEnd);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the keyboard’s input.\r\n   * @param {string} [inputName] optional - the internal input to select\r\n   */\r\n  clearInput(inputName: string = this.options.inputName || this.defaultName): void {\r\n    this.input[inputName] = '';\r\n\r\n    /**\r\n     * Reset caretPosition\r\n     */\r\n    this.setCaretPosition(0);\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Get the keyboard’s input (You can also get it from the onChange prop).\r\n   * @param  {string} [inputName] optional - the internal input to select\r\n   */\r\n  getInput(inputName: string = this.options.inputName || this.defaultName, skipSync = false): string {\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs && !skipSync) this.syncInstanceInputs();\r\n\r\n    if (this.options.rtl) {\r\n      // Remove existing control chars\r\n      const inputWithoutRTLControl = this.input[inputName].replace('\\u202B', '').replace('\\u202C', '');\r\n\r\n      return '\\u202B' + inputWithoutRTLControl + '\\u202C';\r\n    } else {\r\n      return this.input[inputName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all simple-keyboard inputs\r\n   */\r\n  getAllInputs(): KeyboardInput {\r\n    const output = {} as KeyboardInput;\r\n    const inputNames = Object.keys(this.input);\r\n\r\n    inputNames.forEach((inputName) => {\r\n      output[inputName] = this.getInput(inputName, true);\r\n    });\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Set the keyboard’s input.\r\n   * @param  {string} input the input value\r\n   * @param  {string} inputName optional - the internal input to select\r\n   */\r\n  setInput(input: string, inputName: string = this.options.inputName || this.defaultName, skipSync?: boolean): void {\r\n    this.input[inputName] = input;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (!skipSync && this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Replace the input object (`keyboard.input`)\r\n   * @param  {object} inputObj The input object\r\n   */\r\n  replaceInput(inputObj: KeyboardInput): void {\r\n    this.input = inputObj;\r\n  }\r\n\r\n  /**\r\n   * Set new option or modify existing ones after initialization.\r\n   * @param  {object} options The options to set\r\n   */\r\n  setOptions(options = {}): void {\r\n    const changedOptions = this.changedOptions(options);\r\n    this.options = Object.assign(this.options, options);\r\n\r\n    if (changedOptions.length) {\r\n      if (this.options.debug) {\r\n        console.log('changedOptions', changedOptions);\r\n      }\r\n\r\n      /**\r\n       * Some option changes require adjustments before re-render\r\n       */\r\n      this.onSetOptions(changedOptions);\r\n\r\n      /**\r\n       * Rendering\r\n       */\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detecting changes to non-function options\r\n   * This allows us to ascertain whether a button re-render is needed\r\n   */\r\n  changedOptions(newOptions: Partial<KeyboardOptions>): string[] {\r\n    return Object.keys(newOptions).filter(\r\n      (optionName) => JSON.stringify(newOptions[optionName]) !== JSON.stringify(this.options[optionName])\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Executing actions depending on changed options\r\n   * @param  {object} options The options to set\r\n   */\r\n  onSetOptions(changedOptions: string[] = []): void {\r\n    /**\r\n     * Changed: layoutName\r\n     */\r\n    if (changedOptions.includes('layoutName')) {\r\n      /**\r\n       * Reset candidateBox\r\n       */\r\n      if (this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Changed: layoutCandidatesPageSize, layoutCandidates\r\n     */\r\n    if (changedOptions.includes('layoutCandidatesPageSize') || changedOptions.includes('layoutCandidates')) {\r\n      /**\r\n       * Reset and recreate candidateBox\r\n       */\r\n      if (this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n        this.candidateBox = new CandidateBox({\r\n          utilities: this.utilities,\r\n          options: this.options,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all keyboard rows and reset keyboard values.\r\n   * Used internally between re-renders.\r\n   */\r\n  resetRows(): void {\r\n    if (this.keyboardRowsDOM) {\r\n      this.keyboardRowsDOM.remove();\r\n    }\r\n\r\n    this.keyboardDOM.className = this.keyboardDOMClass;\r\n    this.keyboardDOM.setAttribute('data-skInstance', this.currentInstanceName);\r\n    this.buttonElements = {};\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\r\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\r\n   */\r\n  // eslint-disable-next-line no-unused-vars\r\n  dispatch(callback: (instance: SimpleKeyboard, key?: string) => void): void {\r\n    if (!(window as SKWindow)['SimpleKeyboardInstances']) {\r\n      console.warn(`SimpleKeyboardInstances is not defined. Dispatch cannot be called.`);\r\n      throw new Error('INSTANCES_VAR_ERROR');\r\n    }\r\n\r\n    return Object.keys((window as SKWindow)['SimpleKeyboardInstances']).forEach((key) => {\r\n      callback((window as SKWindow)['SimpleKeyboardInstances'][key], key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  addButtonTheme(buttons: string, className: string): void {\r\n    if (!className || !buttons) return;\r\n\r\n    buttons.split(' ').forEach((button) => {\r\n      className.split(' ').forEach((classNameItem) => {\r\n        if (!this.options.buttonTheme) this.options.buttonTheme = [];\r\n\r\n        let classNameFound = false;\r\n\r\n        /**\r\n         * If class is already defined, we add button to class definition\r\n         */\r\n        this.options.buttonTheme.map((buttonTheme) => {\r\n          if (buttonTheme?.class.split(' ').includes(classNameItem)) {\r\n            classNameFound = true;\r\n\r\n            const buttonThemeArray = buttonTheme.buttons.split(' ');\r\n            if (!buttonThemeArray.includes(button)) {\r\n              classNameFound = true;\r\n              buttonThemeArray.push(button);\r\n              buttonTheme.buttons = buttonThemeArray.join(' ');\r\n            }\r\n          }\r\n          return buttonTheme;\r\n        });\r\n\r\n        /**\r\n         * If class is not defined, we create a new entry\r\n         */\r\n        if (!classNameFound) {\r\n          this.options.buttonTheme.push({\r\n            class: classNameItem,\r\n            buttons: buttons,\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  removeButtonTheme(buttons: string, className: string): void {\r\n    /**\r\n     * When called with empty parameters, remove all button themes\r\n     */\r\n    if (!buttons && !className) {\r\n      this.options.buttonTheme = [];\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * If buttons are passed and buttonTheme has items\r\n     */\r\n    if (buttons && Array.isArray(this.options.buttonTheme) && this.options.buttonTheme.length) {\r\n      const buttonArray = buttons.split(' ');\r\n      buttonArray.forEach((button) => {\r\n        this.options?.buttonTheme?.map((buttonTheme, index) => {\r\n          /**\r\n           * If className is set, we affect the buttons only for that class\r\n           * Otherwise, we afect all classes\r\n           */\r\n          if ((buttonTheme && className && className.includes(buttonTheme.class)) || !className) {\r\n            const filteredButtonArray = buttonTheme?.buttons.split(' ').filter((item) => item !== button);\r\n\r\n            /**\r\n             * If buttons left, return them, otherwise, remove button Theme\r\n             */\r\n            if (buttonTheme && filteredButtonArray?.length) {\r\n              buttonTheme.buttons = filteredButtonArray.join(' ');\r\n            } else {\r\n              this.options.buttonTheme?.splice(index, 1);\r\n              buttonTheme = null;\r\n            }\r\n          }\r\n\r\n          return buttonTheme;\r\n        });\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\r\n   * @param  {string} button The button layout name to select\r\n   */\r\n  getButtonElement(button: string): KeyboardElement | KeyboardElement[] | undefined {\r\n    let output;\r\n\r\n    const buttonArr = this.buttonElements[button];\r\n    if (buttonArr) {\r\n      if (buttonArr.length > 1) {\r\n        output = buttonArr;\r\n      } else {\r\n        output = buttonArr[0];\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * This handles the \"inputPattern\" option\r\n   * by checking if the provided inputPattern passes\r\n   */\r\n  inputPatternIsValid(inputVal: string): boolean {\r\n    const inputPatternRaw = this.options.inputPattern;\r\n    let inputPattern;\r\n\r\n    /**\r\n     * Check if input pattern is global or targeted to individual inputs\r\n     */\r\n    if (inputPatternRaw instanceof RegExp) {\r\n      inputPattern = inputPatternRaw;\r\n    } else {\r\n      inputPattern = inputPatternRaw[this.options.inputName || this.defaultName];\r\n    }\r\n\r\n    if (inputPattern && inputVal) {\r\n      const didInputMatch = inputPattern.test(inputVal);\r\n\r\n      if (this.options.debug) {\r\n        console.log(`inputPattern (\"${inputPattern}\"): ${didInputMatch ? 'passed' : 'did not pass!'}`);\r\n      }\r\n\r\n      return didInputMatch;\r\n    } else {\r\n      /**\r\n       * inputPattern doesn't seem to be set for the current input, or input is empty. Pass.\r\n       */\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the removal of event listers before initializing new ones\r\n   * This is useful when changing options that require a fresh set of event listeners\r\n   */\r\n\r\n  removeEventListeners(): void {\r\n    console.log('Removing event listeners...');\r\n\r\n    document.removeEventListener('keydown', this.handleKeyDownBound);\r\n    document.removeEventListener('keyup', this.handleKeyUpBound);\r\n    document.removeEventListener('mouseup', this.handleMouseUpBound);\r\n    document.removeEventListener('touchend', this.handleTouchEndBound);\r\n    document.removeEventListener('select', this.handleSelectBound);\r\n\r\n    if (this.options.updateCaretOnSelectionChange) {\r\n      document.removeEventListener('selectionchange', this.handleSelectionChangeBound);\r\n    }\r\n\r\n    this.listenersAdded = false; // Allow re-adding if necessary\r\n  }\r\n  /**\r\n   * Handles simple-keyboard event listeners\r\n   */\r\n  setEventListeners(): void {\r\n    /**\r\n     * Only first instance should set the event listeners\r\n     */\r\n    if (this.isFirstKeyboardInstance || !this.allKeyboardInstances) {\r\n      if (this.options.debug) {\r\n        console.log(`Caret handling started (${this.keyboardDOMClass})`);\r\n      }\r\n\r\n      // LPJr: Prevent duplicate listeners\r\n      if (this.listenersAdded) {\r\n        console.log('Event listeners already set. Skipping...');\r\n        return;\r\n      }\r\n\r\n      // Ensure existing listeners are removed before adding new ones\r\n      this.removeEventListeners();\r\n\r\n      // LPJr: added named event handlers instead of anonymous functions\r\n      this.handleKeyDownBound = this.handleKeyDown.bind(this);\r\n      this.handleInternalKeyNavBound = this.handleInternalKeyNav.bind(this);\r\n      this.keyboardDOM.addEventListener('keydown', this.handleInternalKeyNavBound as EventListener);\r\n\r\n      this.handleKeyUpBound = this.handleKeyUp.bind(this);\r\n      this.handleMouseUpBound = this.handleMouseUp.bind(this);\r\n      this.handleTouchEndBound = () => this.handleTouchEnd(this);\r\n      this.handleSelectBound = () => this.handleSelect(this);\r\n      this.handleSelectionChangeBound = this.handleSelectionChange.bind(this);\r\n\r\n      document.addEventListener('keydown', this.handleKeyDownBound);\r\n      document.addEventListener('keyup', this.handleKeyUpBound);\r\n      document.addEventListener('mouseup', this.handleMouseUpBound);\r\n      document.addEventListener('touchend', this.handleTouchEndBound);\r\n\r\n      if (this.options.updateCaretOnSelectionChange) {\r\n        document.addEventListener('selectionchange', this.handleSelectionChangeBound);\r\n      }\r\n\r\n      document.addEventListener('select', this.handleSelectBound);\r\n\r\n      // Mark listeners as added to prevent duplicates\r\n      this.listenersAdded = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyUp\r\n   */\r\n  handleKeyUp(event: KeyboardHandlerEvent): void {\r\n    if (this.options.physicalKeyboardHighlightPreventDefault) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    this.caretEventHandler(event);\r\n\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyUp(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyDown\r\n   */\r\n  handleKeyDown(event: KeyboardHandlerEvent): void {\r\n    if (this.options.physicalKeyboardHighlightPreventDefault) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyDown(event);\r\n    }\r\n\r\n    if (!(event instanceof KeyboardEvent)) return;\r\n    this.getButtonAndAnnounce(event);\r\n  }\r\n\r\n  /**\r\n   * Get the Button Element for Live Region announcements\r\n   * Backward-compatible entry point; now internally gated.\r\n   */\r\n  getButtonAndAnnounce(event: KeyboardEvent): void {\r\n    if (!(event instanceof KeyboardEvent)) return;\r\n    if (event.isComposing) return; // IME composition: no announce\r\n    if (event.repeat) return; // optional: suppress held-key spam\r\n\r\n    const pressedKey = event.key;\r\n\r\n    // 1) Hard gate: no announce on navigation or pure modifiers\r\n    if (this.NAV_KEYS.has(pressedKey) || this.MODIFIER_KEYS.has(pressedKey)) return;\r\n\r\n    // 2) Only allow printable chars (no modifier chords) or whitelisted named keys\r\n    const isPrintable = pressedKey?.length === 1 && !event.ctrlKey && !event.metaKey && !event.altKey;\r\n\r\n    const isNamedAllowed = this.NAMED_KEYS_TO_ANNOUNCE.has(pressedKey);\r\n\r\n    if (!isPrintable && !isNamedAllowed) return;\r\n\r\n    // 3) Resolve the key label from the element (works for both click + physical)\r\n    if (!this.keyboardDOM.contains(event.target as Node)) return;\r\n    const buttonEl = event.target as KeyboardElement;\r\n\r\n    // Prefer aria-label; fall back to trimmed textContent\r\n    const rawLabel =\r\n      buttonEl.getAttribute('aria-label') || (buttonEl.textContent || '').trim() || pressedKey || 'Unknown Key';\r\n\r\n    const label = this.NAMED_READABLE[rawLabel] || rawLabel;\r\n\r\n    // 4) Context: use \"pressed\" by default\r\n    this.announceLiveRegion(label, 'pressed');\r\n  }\r\n\r\n  /**\r\n   * WCAG 2.1 Live Region for announcing key focus changes\r\n   * This is used to announce key focus changes for screen readers\r\n   */\r\n\r\n  announceLiveRegion(keyLabel: string, context = 'pressed'): void {\r\n    if (!this.options.useLiveRegion || !this.announcerEl) return;\r\n\r\n    if (this.ariaLiveTimer) clearTimeout(this.ariaLiveTimer);\r\n\r\n    this.ariaLiveTimer = setTimeout(() => {\r\n      if (this.announcerEl) {\r\n        this.announcerEl.textContent = '';\r\n        requestAnimationFrame(() => {\r\n          if (this.announcerEl) {\r\n            this.announcerEl.textContent = `Key ${keyLabel} ${context}`;\r\n          }\r\n        });\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: Internal Key Navigation\r\n   */\r\n  handleInternalKeyNav(event: KeyboardEvent): void {\r\n    if (!(event instanceof KeyboardEvent)) return;\r\n\r\n    const { key } = event;\r\n\r\n    if (!['ArrowRight', 'ArrowLeft', 'ArrowDown', 'ArrowUp'].includes(key)) return;\r\n\r\n    event.preventDefault();\r\n\r\n    const focused = document.activeElement as HTMLElement;\r\n\r\n    // Find the currently focused button\r\n    if (!focused || !focused.hasAttribute('data-skBtn')) return;\r\n\r\n    // Implement directional logic\r\n    let nextButton: HTMLElement | null = null;\r\n\r\n    switch (key) {\r\n      case 'ArrowRight':\r\n        nextButton = this.findNextButton(focused);\r\n        break;\r\n      case 'ArrowLeft':\r\n        nextButton = this.findPreviousButton(focused);\r\n        break;\r\n      case 'ArrowDown':\r\n        nextButton = this.findVerticalButton(focused, 'down');\r\n        break;\r\n      case 'ArrowUp':\r\n        nextButton = this.findVerticalButton(focused, 'up');\r\n        break;\r\n    }\r\n\r\n    if (nextButton) {\r\n      focused.setAttribute('tabindex', '-1');\r\n      nextButton.setAttribute('tabindex', '0');\r\n      nextButton.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find the next button in the keyboard layout\r\n   */\r\n  findNextButton(current: HTMLElement): HTMLElement | null {\r\n    const allButtons = Array.from(this.keyboardDOM.querySelectorAll('[data-skBtn]')) as HTMLElement[];\r\n\r\n    const idx = allButtons.indexOf(current);\r\n    return allButtons[idx + 1] || null;\r\n  }\r\n\r\n  /**\r\n   * Find the previous button in the keyboard layout\r\n   */\r\n  findPreviousButton(current: HTMLElement): HTMLElement | null {\r\n    const allButtons = Array.from(this.keyboardDOM.querySelectorAll('[data-skBtn]')) as HTMLElement[];\r\n\r\n    const idx = allButtons.indexOf(current);\r\n    return allButtons[idx - 1] || null;\r\n  }\r\n\r\n  /**\r\n   * Find the vertically closest button above or below the current one.\r\n   */\r\n  findVerticalButton(current: HTMLElement, direction: 'up' | 'down'): HTMLElement | null {\r\n    const rows = Array.from(this.keyboardDOM.querySelectorAll('.hg-row')) as HTMLElement[];\r\n    const currentRow = current.closest('.hg-row') as HTMLElement | null;\r\n    if (!currentRow) return null;\r\n\r\n    const rowIndex = rows.indexOf(currentRow);\r\n    const targetIndex = direction === 'up' ? rowIndex - 1 : rowIndex + 1;\r\n    const targetRow = rows[targetIndex];\r\n    if (!targetRow) return null; // already at top or bottom\r\n\r\n    const currentRect = current.getBoundingClientRect();\r\n    const currentCenterX = currentRect.left + currentRect.width / 2;\r\n\r\n    const candidates = Array.from(targetRow.querySelectorAll<HTMLElement>('[data-skBtn]'));\r\n    if (!candidates.length) return null;\r\n\r\n    // Find the key in target row closest in X to the current key\r\n    let closest = candidates[0];\r\n    let minDelta = Number.POSITIVE_INFINITY;\r\n\r\n    for (const el of candidates) {\r\n      const rect = el.getBoundingClientRect();\r\n      const centerX = rect.left + rect.width / 2;\r\n      const delta = Math.abs(centerX - currentCenterX);\r\n      if (delta < minDelta) {\r\n        minDelta = delta;\r\n        closest = el;\r\n      }\r\n    }\r\n\r\n    return closest;\r\n  }\r\n\r\n  /**\r\n   * Event Handler: MouseUp\r\n   */\r\n  handleMouseUp(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n\r\n    if (!(event instanceof KeyboardEvent)) return;\r\n    this.getButtonAndAnnounce(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: TouchEnd\r\n   */\r\n  /* istanbul ignore next */\r\n  handleTouchEnd(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n\r\n    if (!(event instanceof KeyboardEvent)) return;\r\n    this.getButtonAndAnnounce(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: Select\r\n   */\r\n  /* istanbul ignore next */\r\n  handleSelect(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: SelectionChange\r\n   */\r\n  /* istanbul ignore next */\r\n  handleSelectionChange(event: KeyboardHandlerEvent): void {\r\n    /**\r\n     * Firefox is not reporting the correct caret position through this event\r\n     * https://github.com/hodgef/simple-keyboard/issues/1839\r\n     */\r\n    if (navigator.userAgent.includes('Firefox')) {\r\n      return;\r\n    }\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Called by {@link setEventListeners} when an event that warrants a cursor position update is triggered\r\n   */\r\n  caretEventHandler(event: KeyboardHandlerEvent): void {\r\n    const target = event?.target as HTMLElement | null;\r\n\r\n    let targetTagName = '';\r\n    if (target?.tagName) {\r\n      targetTagName = target.tagName.toLowerCase();\r\n    }\r\n    this.dispatch((instance) => {\r\n      let isKeyboard =\r\n        event.target === instance.keyboardDOM || (event.target && instance.keyboardDOM.contains(event.target));\r\n\r\n      /**\r\n       * If syncInstanceInputs option is enabled, make isKeyboard match any instance\r\n       * not just the current one\r\n       */\r\n      if (this.options.syncInstanceInputs && Array.isArray(event.path)) {\r\n        isKeyboard = event.path.some((item: HTMLElement) => item?.hasAttribute?.('data-skInstance'));\r\n      }\r\n\r\n      if (\r\n        (targetTagName === 'textarea' ||\r\n          (targetTagName === 'input' && ['text', 'search', 'url', 'tel', 'password'].includes(event.target.type))) &&\r\n        !instance.options.disableCaretPositioning\r\n      ) {\r\n        /**\r\n         * Tracks current cursor position\r\n         * As keys are pressed, text will be added/removed at that position within the input.\r\n         */\r\n        let selectionStart = event.target.selectionStart;\r\n        let selectionEnd = event.target.selectionEnd;\r\n\r\n        if (instance.options.rtl) {\r\n          selectionStart = instance.utilities.getRtlOffset(selectionStart, instance.getInput());\r\n          selectionEnd = instance.utilities.getRtlOffset(selectionEnd, instance.getInput());\r\n        }\r\n\r\n        instance.setCaretPosition(selectionStart, selectionEnd);\r\n\r\n        /**\r\n         * Tracking current input in order to handle caret positioning edge cases\r\n         */\r\n        instance.activeInputElement = event.target;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(\r\n            'Caret at: ',\r\n            instance.getCaretPosition(),\r\n            instance.getCaretPositionEnd(),\r\n            event && event.target.tagName.toLowerCase(),\r\n            `(${instance.keyboardDOMClass})`,\r\n            event?.type\r\n          );\r\n        }\r\n      } else if ((instance.options.disableCaretPositioning || !isKeyboard) && event?.type !== 'selectionchange') {\r\n        /**\r\n         * If we toggled off disableCaretPositioning, we must ensure caretPosition doesn't persist once reactivated.\r\n         */\r\n        instance.setCaretPosition(null);\r\n\r\n        /**\r\n         * Resetting activeInputElement\r\n         */\r\n        instance.activeInputElement = null;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(`Caret position reset due to \"${event?.type}\" event`, event);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute an operation on each button\r\n   */\r\n  recurseButtons(fn: any): void {\r\n    if (!fn) return;\r\n\r\n    Object.keys(this.buttonElements).forEach((buttonName) => this.buttonElements[buttonName].forEach(fn));\r\n  }\r\n\r\n  /**\r\n   * Destroy keyboard listeners and DOM elements\r\n   */\r\n  destroy(): void {\r\n    if (this.options.debug) console.log(`Destroying simple-keyboard instance: ${this.currentInstanceName}`);\r\n\r\n    const { physicalKeyboardHighlightPreventDefault = false } = this.options;\r\n\r\n    /**\r\n     * Remove document listeners\r\n     */\r\n    document.removeEventListener('keyup', this.handleKeyUpBound);\r\n    document.removeEventListener('keydown', this.handleKeyDownBound);\r\n    document.removeEventListener('mouseup', this.handleMouseUpBound);\r\n    document.removeEventListener('touchend', this.handleTouchEndBound);\r\n    document.removeEventListener('select', this.handleSelectBound);\r\n\r\n    // selectionchange is causing caret update issues on Chrome\r\n    // https://github.com/hodgef/simple-keyboard/issues/2346\r\n    if (this.options.updateCaretOnSelectionChange) {\r\n      document.removeEventListener('selectionchange', this.handleSelectionChangeBound);\r\n    }\r\n\r\n    document.onpointerup = null;\r\n    document.ontouchend = null;\r\n    document.ontouchcancel = null;\r\n    document.onmouseup = null;\r\n\r\n    /**\r\n     * Remove buttons\r\n     */\r\n    const deleteButton = (buttonElement: KeyboardElement | null) => {\r\n      if (buttonElement) {\r\n        buttonElement.onpointerdown = null;\r\n        buttonElement.onpointerup = null;\r\n        buttonElement.onpointercancel = null;\r\n        buttonElement.ontouchstart = null;\r\n        buttonElement.ontouchend = null;\r\n        buttonElement.ontouchcancel = null;\r\n        buttonElement.onclick = null;\r\n        buttonElement.onmousedown = null;\r\n        buttonElement.onmouseup = null;\r\n\r\n        buttonElement.remove();\r\n        buttonElement = null;\r\n      }\r\n    };\r\n\r\n    this.recurseButtons(deleteButton);\r\n\r\n    /**\r\n     * Remove wrapper events\r\n     */\r\n    this.keyboardDOM.onpointerdown = null;\r\n    this.keyboardDOM.ontouchstart = null;\r\n    this.keyboardDOM.onmousedown = null;\r\n\r\n    /**\r\n     * Clearing keyboard rows\r\n     */\r\n    this.resetRows();\r\n\r\n    /**\r\n     * Candidate box\r\n     */\r\n    if (this.candidateBox) {\r\n      this.candidateBox.destroy();\r\n      this.candidateBox = null;\r\n    }\r\n\r\n    /**\r\n     * Clearing activeInputElement\r\n     */\r\n    this.activeInputElement = null;\r\n\r\n    /**\r\n     * Removing instance attribute\r\n     */\r\n    this.keyboardDOM.removeAttribute('data-skInstance');\r\n\r\n    /**\r\n     * Clearing keyboardDOM\r\n     */\r\n    this.keyboardDOM.innerHTML = '';\r\n\r\n    /**\r\n     * Remove instance\r\n     */\r\n    (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName] = null;\r\n    delete (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName];\r\n\r\n    /**\r\n     * Reset initialized flag\r\n     */\r\n    this.initialized = false;\r\n  }\r\n\r\n  /**\r\n   * Process buttonTheme option\r\n   */\r\n  getButtonThemeClasses(button: string): string[] {\r\n    const buttonTheme = this.options.buttonTheme;\r\n    let buttonClasses: string[] = [];\r\n\r\n    if (Array.isArray(buttonTheme)) {\r\n      buttonTheme.forEach((themeObj) => {\r\n        if (\r\n          themeObj &&\r\n          themeObj.class &&\r\n          typeof themeObj.class === 'string' &&\r\n          themeObj.buttons &&\r\n          typeof themeObj.buttons === 'string'\r\n        ) {\r\n          const themeObjClasses = themeObj.class.split(' ');\r\n          const themeObjButtons = themeObj.buttons.split(' ');\r\n\r\n          if (themeObjButtons.includes(button)) {\r\n            buttonClasses = [...buttonClasses, ...themeObjClasses];\r\n          }\r\n        } else {\r\n          console.warn(`Incorrect \"buttonTheme\". Please check the documentation.`, themeObj);\r\n        }\r\n      });\r\n    }\r\n\r\n    return buttonClasses;\r\n  }\r\n\r\n  /**\r\n   * Process buttonAttributes option\r\n   */\r\n  setDOMButtonAttributes(button: string, callback: any): void {\r\n    const buttonAttributes = this.options.buttonAttributes;\r\n\r\n    if (Array.isArray(buttonAttributes)) {\r\n      buttonAttributes.forEach((attrObj) => {\r\n        if (\r\n          attrObj.attribute &&\r\n          typeof attrObj.attribute === 'string' &&\r\n          attrObj.value &&\r\n          typeof attrObj.value === 'string' &&\r\n          attrObj.buttons &&\r\n          typeof attrObj.buttons === 'string'\r\n        ) {\r\n          const attrObjButtons = attrObj.buttons.split(' ');\r\n\r\n          if (attrObjButtons.includes(button)) {\r\n            callback(attrObj.attribute, attrObj.value);\r\n          }\r\n        } else {\r\n          console.warn(`Incorrect \"buttonAttributes\". Please check the documentation.`, attrObj);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onTouchDeviceDetected() {\r\n    /**\r\n     * Processing autoTouchEvents\r\n     */\r\n    this.processAutoTouchEvents();\r\n\r\n    /**\r\n     * Disabling contextual window on touch devices\r\n     */\r\n    this.disableContextualWindow();\r\n  }\r\n\r\n  /**\r\n   * Disabling contextual window for hg-button\r\n   */\r\n  /* istanbul ignore next */\r\n  disableContextualWindow() {\r\n    window.oncontextmenu = (event: KeyboardHandlerEvent) => {\r\n      if (event.target.classList.contains('hg-button')) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process autoTouchEvents option\r\n   */\r\n  processAutoTouchEvents() {\r\n    if (this.options.autoUseTouchEvents) {\r\n      this.options.useTouchEvents = true;\r\n\r\n      if (this.options.debug) {\r\n        console.log(`autoUseTouchEvents: Touch device detected, useTouchEvents enabled.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n   */\r\n  onInit() {\r\n    if (this.options.debug) {\r\n      console.log(`${this.keyboardDOMClass} Initialized`);\r\n    }\r\n\r\n    //Initialize Announcer\r\n    this.announcerEl = this.ensureAnnouncer(this.keyboardDOM);\r\n    const announcers = document.querySelectorAll('.hg-live-region');\r\n    console.debug('[a11y] on Init announcers:', announcers.length, announcers);\r\n    console.debug('[a11y] on Init announcerConnected:', !!(this.announcerEl && this.announcerEl.isConnected));\r\n\r\n    /**\r\n     * setEventListeners\r\n     */\r\n    this.setEventListeners();\r\n\r\n    if (typeof this.options.onInit === 'function') this.options.onInit(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeFirstRender() {\r\n    /**\r\n     * Performing actions when touch device detected\r\n     */\r\n    if (this.utilities.isTouchDevice()) {\r\n      this.onTouchDeviceDetected();\r\n    }\r\n\r\n    if (typeof this.options.beforeFirstRender === 'function') this.options.beforeFirstRender(this);\r\n\r\n    /**\r\n     * Notify about PointerEvents usage\r\n     */\r\n    if (\r\n      this.isFirstKeyboardInstance &&\r\n      this.utilities.pointerEventsSupported() &&\r\n      !this.options.useTouchEvents &&\r\n      !this.options.useMouseEvents\r\n    ) {\r\n      if (this.options.debug) {\r\n        console.log('Using PointerEvents as it is supported by this browser');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Notify about touch events usage\r\n     */\r\n    if (this.options.useTouchEvents) {\r\n      if (this.options.debug) {\r\n        console.log('useTouchEvents has been enabled. Only touch events will be used.');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeRender() {\r\n    if (typeof this.options.beforeRender === 'function') this.options.beforeRender(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n   */\r\n  onRender() {\r\n    if (typeof this.options.onRender === 'function') this.options.onRender(this);\r\n\r\n    this.announcerEl = this.ensureAnnouncer(this.keyboardDOM);\r\n    const announcers = document.querySelectorAll('.hg-live-region');\r\n    console.debug('[a11y] on Render announcers:', announcers.length, announcers);\r\n    console.debug('[a11y] on Render announcerConnected:', !!(this.announcerEl && this.announcerEl.isConnected));\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once all modules have been loaded\r\n   */\r\n  onModulesLoaded() {\r\n    if (typeof this.options.onModulesLoaded === 'function') this.options.onModulesLoaded(this);\r\n  }\r\n\r\n  /**\r\n   * Register module\r\n   */\r\n  registerModule = (name: string, initCallback: any) => {\r\n    if (!this.modules[name]) this.modules[name] = {};\r\n\r\n    initCallback(this.modules[name]);\r\n  };\r\n\r\n  /**\r\n   * Load modules\r\n   */\r\n  loadModules() {\r\n    if (Array.isArray(this.options.modules)) {\r\n      this.options.modules.forEach((KeyboardModule) => {\r\n        const keyboardModule = this.utilities.isConstructor(KeyboardModule)\r\n          ? new KeyboardModule(this)\r\n          : KeyboardModule(this);\r\n\r\n        keyboardModule.init && keyboardModule.init(this);\r\n      });\r\n\r\n      this.keyboardPluginClasses = 'modules-loaded';\r\n\r\n      this.render();\r\n      this.onModulesLoaded();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get module prop\r\n   */\r\n  getModuleProp(name: string, prop: string) {\r\n    if (!this.modules[name]) return false;\r\n\r\n    return this.modules[name][prop];\r\n  }\r\n\r\n  /**\r\n   * getModulesList\r\n   */\r\n  getModulesList() {\r\n    return Object.keys(this.modules);\r\n  }\r\n\r\n  /**\r\n   * Parse Row DOM containers\r\n   */\r\n  parseRowDOMContainers(\r\n    rowDOM: HTMLDivElement,\r\n    rowIndex: number,\r\n    containerStartIndexes: number[],\r\n    containerEndIndexes: number[]\r\n  ) {\r\n    const rowDOMArray = Array.from(rowDOM.children);\r\n    let removedElements = 0;\r\n\r\n    if (rowDOMArray.length) {\r\n      containerStartIndexes.forEach((startIndex, arrIndex) => {\r\n        const endIndex = containerEndIndexes[arrIndex];\r\n\r\n        /**\r\n         * If there exists a respective end index\r\n         * if end index comes after start index\r\n         */\r\n        if (!endIndex || !(endIndex > startIndex)) {\r\n          return false;\r\n        }\r\n\r\n        /**\r\n         * Updated startIndex, endIndex\r\n         * This is since the removal of buttons to place a single button container\r\n         * results in a modified array size\r\n         */\r\n        const updated_startIndex = startIndex - removedElements;\r\n        const updated_endIndex = endIndex - removedElements;\r\n\r\n        /**\r\n         * Create button container\r\n         */\r\n        const containerDOM = document.createElement('div');\r\n        containerDOM.className += 'hg-button-container';\r\n        const containerUID = `${this.options.layoutName}-r${rowIndex}c${arrIndex}`;\r\n        containerDOM.setAttribute('data-skUID', containerUID);\r\n\r\n        /**\r\n         * Taking elements due to be inserted into container\r\n         */\r\n        const containedElements = rowDOMArray.splice(updated_startIndex, updated_endIndex - updated_startIndex + 1);\r\n        removedElements += updated_endIndex - updated_startIndex;\r\n\r\n        /**\r\n         * Inserting elements to container\r\n         */\r\n        containedElements.forEach((element) => containerDOM.appendChild(element));\r\n\r\n        /**\r\n         * Adding container at correct position within rowDOMArray\r\n         */\r\n        rowDOMArray.splice(updated_startIndex, 0, containerDOM);\r\n\r\n        /**\r\n         * Clearing old rowDOM children structure\r\n         */\r\n        rowDOM.innerHTML = '';\r\n\r\n        /**\r\n         * Appending rowDOM new children list\r\n         */\r\n        rowDOMArray.forEach((element) => rowDOM.appendChild(element));\r\n\r\n        if (this.options.debug) {\r\n          console.log('rowDOMContainer', containedElements, updated_startIndex, updated_endIndex, removedElements + 1);\r\n        }\r\n      });\r\n    }\r\n\r\n    return rowDOM;\r\n  }\r\n\r\n  /**\r\n   * getKeyboardClassString\r\n   */\r\n  getKeyboardClassString = (...baseDOMClasses: any[]) => {\r\n    const keyboardClasses = [this.keyboardDOMClass, ...baseDOMClasses].filter((DOMClass) => !!DOMClass);\r\n\r\n    return keyboardClasses.join(' ');\r\n  };\r\n\r\n  /**\r\n   * Renders rows and buttons as per options\r\n   */\r\n  render() {\r\n    /**\r\n     * Clear keyboard\r\n     */\r\n    this.resetRows();\r\n\r\n    /**\r\n     * Calling beforeFirstRender\r\n     */\r\n    if (!this.initialized) {\r\n      this.beforeFirstRender();\r\n    }\r\n\r\n    /**\r\n     * Calling beforeRender\r\n     */\r\n    this.beforeRender();\r\n\r\n    const layoutClass = `hg-layout-${this.options.layoutName}`;\r\n    const layout = this.options.layout || getDefaultLayout();\r\n    const useTouchEvents = this.options.useTouchEvents || false;\r\n    const useTouchEventsClass = useTouchEvents ? 'hg-touch-events' : '';\r\n    const useMouseEvents = this.options.useMouseEvents || false;\r\n    const disableRowButtonContainers = this.options.disableRowButtonContainers;\r\n\r\n    /**\r\n     * Adding themeClass, layoutClass to keyboardDOM\r\n     */\r\n    this.keyboardDOM.className = this.getKeyboardClassString(\r\n      this.options.theme,\r\n      layoutClass,\r\n      this.keyboardPluginClasses,\r\n      useTouchEventsClass\r\n    );\r\n\r\n    /**\r\n     * Adding keyboard identifier\r\n     */\r\n    this.keyboardDOM.setAttribute('data-skInstance', this.currentInstanceName);\r\n\r\n    /**\r\n     * Add WCAG 2.1 compliance attributes - LPJr\r\n     * https://www.w3.org/WAI/WCAG21/Understanding/keyboard.html\r\n     */\r\n\r\n    /**\r\n     * WCAG 2.1 / Section 508a Accessibility Compliance - LPJr\r\n     *\r\n     * This virtual keyboard component follows best-effort WCAG 2.1 Level AA and 508a compliance practices:\r\n     *\r\n     * Keyboard Navigability (2.1.1)\r\n     *    - All keys are operable via arrow keys and focus management\r\n     *    - `Tab` and `Shift+Tab` allow exiting and re-entering the keyboard area\r\n     *\r\n     * Focus Visibility (2.4.7)\r\n     *    - Each key uses `tabIndex` and is visibly highlighted when focused\r\n     *\r\n     * Name, Role, Value (4.1.2)\r\n     *    - Each key has `role=\"button\"` (if not native <button>)\r\n     *    - Each key has an `aria-label` and visible text\r\n     *    - Keyboard container has `role=\"application\"` and a programmatic label\r\n     *\r\n     * Live Region Announcements\r\n     *    - Not implemented to avoid screen reader overload\r\n     *    - Optional feature per WCAG; not required for conformance\r\n     *    - Output is assumed to be visually accessible or programmatically exposed elsewhere\r\n     *\r\n     * Customization\r\n     *    - `aria-label` for the keyboard can be overridden via `options.ariaLabel`\r\n     *    - Accessible layout is language-agnostic and screen reader-friendly\r\n     */\r\n\r\n    this.options.useLiveRegion ??= true;\r\n    this.options.liveRegionMode ??= 'polite';\r\n    this.options.liveRegionDelay ??= 100;\r\n    this.options.ariaLabel ??= 'Virtual Keyboard';\r\n\r\n    this.keyboardDOM.setAttribute('role', 'application');\r\n    this.keyboardDOM.setAttribute('aria-label', this.options.ariaLabel || 'Virtual Keyboard');\r\n    // this.keyboardDOM.setAttribute('tabindex', '0');\r\n\r\n    this.instructions =\r\n      this.options.instructions ||\r\n      'Arrow keys navigate left, right, up, and down.  Enter or Space to select. Tab to exit keyboard.';\r\n\r\n    this.keyboardInstructions = document.createElement('p');\r\n    this.keyboardInstructions.classList.add('hg-instructions', 'sr-only');\r\n    this.keyboardInstructions.id = 'hg-virtual-keyboard-instructions';\r\n    this.keyboardInstructions.setAttribute('role', 'note');\r\n    this.keyboardInstructions.textContent = this.instructions;\r\n    this.keyboardDOM.appendChild(this.keyboardInstructions);\r\n    this.keyboardDOM.setAttribute('aria-describedby', this.keyboardInstructions.id);\r\n\r\n    /**\r\n     * Create row wrapper\r\n     */\r\n    this.keyboardRowsDOM = document.createElement('div');\r\n    this.keyboardRowsDOM.className = 'hg-rows';\r\n\r\n    /**\r\n     * Iterating through each row\r\n     */\r\n    layout[this.options.layoutName || this.defaultName].forEach((row: string, rIndex: number) => {\r\n      let rowArray = row.split(' ');\r\n\r\n      /**\r\n       * Enforce excludeFromLayout\r\n       */\r\n      if (\r\n        this.options.excludeFromLayout &&\r\n        this.options.excludeFromLayout[this.options.layoutName || this.defaultName]\r\n      ) {\r\n        rowArray = rowArray.filter(\r\n          (buttonName) =>\r\n            this.options.excludeFromLayout &&\r\n            !this.options.excludeFromLayout[this.options.layoutName || this.defaultName].includes(buttonName)\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Creating empty row\r\n       */\r\n      let rowDOM = document.createElement('div');\r\n      rowDOM.className += 'hg-row';\r\n\r\n      /**\r\n       * Tracking container indicators in rows\r\n       */\r\n      const containerStartIndexes: number[] = [];\r\n      const containerEndIndexes: number[] = [];\r\n\r\n      /**\r\n       * Iterating through each button in row\r\n       */\r\n      rowArray.forEach((button, bIndex) => {\r\n        /**\r\n         * Check if button has a container indicator\r\n         */\r\n        const buttonHasContainerStart =\r\n          !disableRowButtonContainers && typeof button === 'string' && button.length > 1 && button.indexOf('[') === 0;\r\n\r\n        const buttonHasContainerEnd =\r\n          !disableRowButtonContainers &&\r\n          typeof button === 'string' &&\r\n          button.length > 1 &&\r\n          button.indexOf(']') === button.length - 1;\r\n\r\n        /**\r\n         * Save container start index, if applicable\r\n         */\r\n        if (buttonHasContainerStart) {\r\n          containerStartIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\[/g, '');\r\n        }\r\n\r\n        if (buttonHasContainerEnd) {\r\n          containerEndIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\]/g, '');\r\n        }\r\n\r\n        /**\r\n         * Processing button options\r\n         */\r\n        const fctBtnClass = this.utilities.getButtonClass(button);\r\n        const buttonDisplayName = this.utilities.getButtonDisplayName(\r\n          button,\r\n          this.options.display,\r\n          this.options.mergeDisplay\r\n        );\r\n\r\n        /**\r\n         * Creating button\r\n         */\r\n        const buttonType = this.options.useButtonTag ? 'button' : 'div';\r\n        const buttonDOM = document.createElement(buttonType);\r\n        buttonDOM.className += `hg-button ${fctBtnClass}`;\r\n\r\n        /**\r\n         * Adding buttonTheme\r\n         */\r\n        buttonDOM.classList.add(...this.getButtonThemeClasses(button));\r\n\r\n        /**\r\n         * Adding buttonAttributes\r\n         */\r\n        this.setDOMButtonAttributes(button, (attribute: string, value: string) => {\r\n          buttonDOM.setAttribute(attribute, value);\r\n        });\r\n\r\n        this.activeButtonClass = 'hg-activeButton';\r\n\r\n        /**\r\n         * Handle button click event\r\n         */\r\n        /* istanbul ignore next */\r\n        if (this.utilities.pointerEventsSupported() && !useTouchEvents && !useMouseEvents) {\r\n          /**\r\n           * Handle PointerEvents\r\n           */\r\n          buttonDOM.onpointerdown = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonClicked(button, e);\r\n            this.handleButtonMouseDown(button, e);\r\n          };\r\n          buttonDOM.onpointerup = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n          buttonDOM.onpointercancel = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n        } else {\r\n          /**\r\n           * Fallback for browsers not supporting PointerEvents\r\n           */\r\n          if (useTouchEvents) {\r\n            /**\r\n             * Handle touch events\r\n             */\r\n            buttonDOM.ontouchstart = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonClicked(button, e);\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.ontouchend = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n            buttonDOM.ontouchcancel = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          } else {\r\n            /**\r\n             * Handle mouse events\r\n             */\r\n            buttonDOM.onclick = (e: KeyboardHandlerEvent) => {\r\n              this.setMouseHold(false);\r\n              /**\r\n               * Fire button handler in onclick for compatibility reasons\r\n               * This fires handler before onKeyReleased, therefore when that option is set we will fire the handler\r\n               * in onmousedown instead\r\n               */\r\n              if (\r\n                typeof this.options.onKeyReleased !== 'function' &&\r\n                !(this.options.useMouseEvents && this.options.clickOnMouseDown)\r\n              ) {\r\n                this.handleButtonClicked(button, e);\r\n              }\r\n            };\r\n            buttonDOM.onmousedown = (e: KeyboardHandlerEvent) => {\r\n              /**\r\n               * Fire button handler for onKeyReleased use-case\r\n               */\r\n              if (\r\n                (typeof this.options.onKeyReleased === 'function' ||\r\n                  (this.options.useMouseEvents && this.options.clickOnMouseDown)) &&\r\n                !this.isMouseHold\r\n              ) {\r\n                this.handleButtonClicked(button, e);\r\n              }\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.onmouseup = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          }\r\n        }\r\n\r\n        /**\r\n         * Adding identifier\r\n         */\r\n        buttonDOM.setAttribute('data-skBtn', button);\r\n\r\n        /**\r\n         * Adding unique id\r\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\r\n         */\r\n        const buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\r\n        buttonDOM.setAttribute('data-skBtnUID', buttonUID);\r\n\r\n        /**\r\n         * Adding WCAG 2.1 compliance attributes - LPjr\r\n         */\r\n        // Accessibility: Set role and focus management\r\n        if (buttonType === 'div') {\r\n          buttonDOM.setAttribute('role', 'button');\r\n        }\r\n\r\n        buttonDOM.setAttribute('tabindex', '-1'); // Only one key should be tabbable at a time\r\n        buttonDOM.setAttribute('aria-label', buttonDisplayName);\r\n\r\n        // Optional: Title attribute for screen readers\r\n        buttonDOM.setAttribute('title', buttonDisplayName);\r\n\r\n        // Example: If this is the first key, make it focusable\r\n        if (rIndex === 0 && bIndex === 0) {\r\n          buttonDOM.setAttribute('tabindex', '0');\r\n        }\r\n\r\n        /**\r\n         * Adding button label to button\r\n         */\r\n        const buttonSpanDOM = document.createElement('span');\r\n        buttonSpanDOM.innerHTML = buttonDisplayName;\r\n        buttonDOM.appendChild(buttonSpanDOM);\r\n\r\n        /**\r\n         * Adding to buttonElements\r\n         */\r\n        if (!this.buttonElements[button]) this.buttonElements[button] = [];\r\n\r\n        this.buttonElements[button].push(buttonDOM);\r\n\r\n        /**\r\n         * Appending button to row\r\n         */\r\n        rowDOM.appendChild(buttonDOM);\r\n      });\r\n\r\n      /**\r\n       * Parse containers in row\r\n       */\r\n      rowDOM = this.parseRowDOMContainers(rowDOM, rIndex, containerStartIndexes, containerEndIndexes);\r\n\r\n      /**\r\n       * Appending row to hg-rows\r\n       */\r\n      this.keyboardRowsDOM.appendChild(rowDOM);\r\n    });\r\n\r\n    /**\r\n     * Appending row to keyboard\r\n     */\r\n    this.keyboardDOM.appendChild(this.keyboardRowsDOM);\r\n\r\n    /**\r\n     * Calling onRender\r\n     */\r\n    this.onRender();\r\n\r\n    if (!this.initialized) {\r\n      /**\r\n       * Ensures that onInit and beforeFirstRender are only called once per instantiation\r\n       */\r\n      this.initialized = true;\r\n\r\n      /**\r\n       * Handling parent events\r\n       */\r\n      /* istanbul ignore next */\r\n      if (this.utilities.pointerEventsSupported() && !useTouchEvents && !useMouseEvents) {\r\n        document.onpointerup = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        this.keyboardDOM.onpointerdown = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      } else if (useTouchEvents) {\r\n        /**\r\n         * Handling ontouchend, ontouchcancel\r\n         */\r\n        document.ontouchend = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        document.ontouchcancel = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n\r\n        this.keyboardDOM.ontouchstart = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      } else if (!useTouchEvents) {\r\n        /**\r\n         * Handling mouseup\r\n         */\r\n        document.onmouseup = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        this.keyboardDOM.onmousedown = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      }\r\n\r\n      /**\r\n       * Calling onInit\r\n       */\r\n      this.onInit();\r\n    }\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboard;\r\n","import SimpleKeyboard from \"./components/Keyboard\";\r\nexport { SimpleKeyboard };\r\nexport default SimpleKeyboard;\r\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Utilities","_ref","getOptions","getCaretPosition","getCaretPositionEnd","dispatch","_classCallCheck","_defineProperty","button","length","bindMethods","includes","buttonTypeClass","getButtonType","buttonWithoutBraces","replace","buttonNormalized","concat","display","arguments","undefined","assign","getDefaultDisplay","input","caretPos","caretPosEnd","moveCaret","options","commonParams","output","removeAt","apply","removeForwardsAt","addStringAt","tabCharOnTab","newLineOnEnter","Number","isInteger","debug","console","log","minus","newCaretPos","updateCaretPosAction","instance","setCaretPosition","caretPosition","source","str","position","positionEnd","slice","join","isMaxLengthReached","updateCaretPos","emojiMatchedReg","substring","match","substr","inputObj","updatedInput","maxLength","currentInput","inputName","condition","maxLengthReached","_typeof","Boolean","window","navigator","maxTouchPoints","PointerEvent","toLowerCase","trim","split","reduce","word","toUpperCase","arr","size","_toConsumableArray","Array","Math","ceil","map","_","i","index","newIndex","startMarkerIndex","indexOf","f","Reflect","construct","String","e","myClass","_step","_iterator","_createForOfIteratorHelper","getOwnPropertyNames","s","n","done","myMethod","bind","err","PhysicalKeyboard","_this","Set","altKey","ctrlKey","shiftKey","code","keyCodeToKey","keyCode","layout","_this$getOptions","lastLayout","layoutJSON","mapLayoutToEventCodes","extractAndPadLayout","default","shift","shiftActive","capslockActive","buttonPressed","getSimpleKeyboardLayoutKey","buttonDOM","buttonName","standardButtonPressed","getButtonElement","functionButtonPressed","_buttonDOM$","_buttonDOM$$onpointer","_buttonDOM","_buttonDOM$onpointerd","applyButtonStyle","buttonElement","style","background","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","isArray","forEach","physicalKeyboardHighlightPress","physicalKeyboardHighlightPressUsePointerEvents","onpointerdown","physicalKeyboardHighlightPressUseClick","_buttonDOM$2","click","handleButtonClicked","_buttonDOM$3","_buttonDOM$3$onpointe","_buttonDOM$onpointeru","removeAttribute","onpointerup","STANDARD_CODES","has","upper","rawKey","shiftleft","shiftright","controlleft","controlright","altleft","altright","metaleft","metaright","backspace","capslock","enter","tab","_options$layout$defau","_options$layout","_document$activeEleme","currentLayout","_options$layout2","eCode","normalizeToStandardCode","layoutEntry","toString","normal","normalizeOutput","fallbackKeys","warn","userAgent","platform","language","imeMode","document","activeElement","inputMode","isEditable","isContentEditable","time","Date","toISOString","qwertyRowLengths","processedLayout","_i","_arr","type","rows","row","push","mappedLayout","qwertyRows","rowIndex","colIndex","_layout$default$rowIn","_layout$shift$rowInde","eventCode","normalKey","CandidateBox","utilities","querySelector","pageSize","layoutCandidatesPageSize","candidateBoxElement","remove","activeIndex","candidateOptions","oldListbox","replaceWith","cloneNode","pageIndex","_ref2","candidateValue","targetElement","onSelect","candidateListPages","chunkArray","renderPage","nbPages","onItemSelected","selectedCandidate","destroy","_ref3","_this$candidateBoxEle","_this2","createElement","className","candidateListULElement","setAttribute","candidateListItem","_this2$options$displa","candidateListLIElement","id","innerHTML","getMouseEvent","mouseEvent","useTouchEvents","TouchEvent","MouseEvent","ontouchstart","onclick","appendChild","isPrevBtnElementActive","prevBtnElement","classList","add","isNextBtnElementActive","nextBtnElement","addEventListener","preventDefault","prepend","focus","setupKeyboardNav","listbox","_this3","from","querySelectorAll","option","setActiveOption","updateActiveIndex","activateSelectedOption","prev","next","scrollIntoView","block","globalLiveRegionElement","_next$textContent","total","label","textContent","activeOption","SimpleKeyboard","selectorOrOptions","keyboardOptions","Spacebar","keyboardDOMClass","keyboardDOM","HTMLDivElement","Error","caretPositionEnd","name","initCallback","modules","_len","baseDOMClasses","_key","filter","DOMClass","_this$handleParams","handleParams","_this$handleParams$op","announcerEl","ensureAnnouncer","_objectSpread","layoutName","theme","preventMouseDownDefault","enableLayoutCandidates","excludeFromLayout","keyboardPluginClasses","_this$options$inputNa","defaultName","buttonElements","currentInstanceName","camelCase","allKeyboardInstances","keyboardInstanceNames","keys","isFirstKeyboardInstance","physicalKeyboard","candidateBox","render","loadModules","keyboardEl","parentEl","parentElement","insertAdjacentElement","rowsEl","nextSibling","insertBefore","endPosition","_this$options","layoutCandidatesObj","layoutCandidates","layoutCandidatesCaseSensitiveMatch","layoutCandidate","inputSubstr","regexp","RegExp","escapeRegex","matchAll","candidateKey","sort","a","b","show","_this3$options","disableCandidateNormalization","enableLayoutCandidatesKeyPress","candidateStr","normalize","beforeInputUpdate","getInput","initialCaretPosition","newInputSubstr","newInput","caretPositionDiff","newCaretPosition","setInput","onKeyPress","onChange","onChangeAll","getAllInputs","_this$options2","_this$options2$inputN","getUpdatedInput","isStandardButton","activeInputElement","setSelectionRange","inputPattern","inputPatternIsValid","handleMaxLength","newInputValue","syncInstanceInputs","target","_this$candidateBox","_this$getInputCandida","getInputCandidates","showCandidatesBox","isMouseHold","_this4","stopMouseDownPropagation","stopPropagation","activeButtonClass","holdInteractionTimeout","clearTimeout","holdTimeout","setMouseHold","disableButtonHold","setTimeout","getMouseHold","handleButtonHold","_this5","preventMouseUpDefault","stopMouseUpPropagation","contains","recurseButtons","onKeyReleased","_this6","_this7","replaceInput","skipSync","rtl","_this8","changedOptions","onSetOptions","newOptions","_this9","optionName","JSON","stringify","keyboardRowsDOM","callback","buttons","_this0","classNameItem","buttonTheme","classNameFound","buttonThemeArray","class","_this1","_this1$options","_buttonTheme","_this1$options$button","filteredButtonArray","item","splice","buttonArr","inputVal","inputPatternRaw","didInputMatch","test","removeEventListener","handleKeyDownBound","handleKeyUpBound","handleMouseUpBound","handleTouchEndBound","handleSelectBound","updateCaretOnSelectionChange","handleSelectionChangeBound","listenersAdded","_this10","removeEventListeners","handleKeyDown","handleInternalKeyNavBound","handleInternalKeyNav","handleKeyUp","handleMouseUp","handleTouchEnd","handleSelect","handleSelectionChange","event","physicalKeyboardHighlightPreventDefault","caretEventHandler","physicalKeyboardHighlight","handleHighlightKeyUp","handleHighlightKeyDown","KeyboardEvent","getButtonAndAnnounce","isComposing","repeat","pressedKey","NAV_KEYS","MODIFIER_KEYS","isPrintable","metaKey","isNamedAllowed","NAMED_KEYS_TO_ANNOUNCE","buttonEl","rawLabel","getAttribute","NAMED_READABLE","announceLiveRegion","keyLabel","_this11","context","useLiveRegion","ariaLiveTimer","requestAnimationFrame","focused","hasAttribute","nextButton","findNextButton","findPreviousButton","findVerticalButton","current","allButtons","idx","direction","currentRow","closest","targetRow","currentRect","getBoundingClientRect","currentCenterX","left","width","candidates","minDelta","POSITIVE_INFINITY","_candidates","el","rect","centerX","delta","abs","_this12","targetTagName","tagName","isKeyboard","path","some","_item$hasAttribute","disableCaretPositioning","selectionStart","selectionEnd","getRtlOffset","fn","_this13","ontouchend","ontouchcancel","onmouseup","onpointercancel","onmousedown","resetRows","initialized","buttonClasses","themeObj","themeObjClasses","buttonAttributes","attrObj","attribute","processAutoTouchEvents","disableContextualWindow","oncontextmenu","autoUseTouchEvents","announcers","isConnected","setEventListeners","onInit","isTouchDevice","onTouchDeviceDetected","beforeFirstRender","pointerEventsSupported","useMouseEvents","beforeRender","onRender","onModulesLoaded","_this14","KeyboardModule","keyboardModule","isConstructor","init","rowDOM","containerStartIndexes","containerEndIndexes","_this15","rowDOMArray","children","removedElements","startIndex","arrIndex","endIndex","updated_startIndex","updated_endIndex","containerDOM","containerUID","containedElements","element","_this$options3","_this$options3$useLiv","_this$options4","_this$options4$liveRe","_this$options5","_this$options5$liveRe","_this$options6","_this$options6$ariaLa","_this16","layoutClass","useTouchEventsClass","disableRowButtonContainers","getKeyboardClassString","liveRegionMode","liveRegionDelay","ariaLabel","instructions","keyboardInstructions","rIndex","rowArray","bIndex","_buttonDOM$classList","buttonHasContainerStart","buttonHasContainerEnd","fctBtnClass","getButtonClass","buttonDisplayName","getButtonDisplayName","mergeDisplay","buttonType","useButtonTag","getButtonThemeClasses","setDOMButtonAttributes","handleButtonMouseDown","handleButtonMouseUp","clickOnMouseDown","buttonUID","buttonSpanDOM","parseRowDOMContainers","handleKeyboardContainerMouseDown"],"sourceRoot":""}