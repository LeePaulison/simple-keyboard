{"version":3,"file":"index.modern.js","mappings":"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","sources":["webpack://SimpleKeyboard/webpack/universalModuleDefinition","webpack://SimpleKeyboard/webpack/bootstrap","webpack://SimpleKeyboard/webpack/runtime/define property getters","webpack://SimpleKeyboard/webpack/runtime/hasOwnProperty shorthand","webpack://SimpleKeyboard/webpack/runtime/make namespace object","webpack://SimpleKeyboard/./src/lib/services/Utilities.ts","webpack://SimpleKeyboard/./src/lib/services/PhysicalKeyboard.ts","webpack://SimpleKeyboard/./src/lib/services/KeyboardLayout.ts","webpack://SimpleKeyboard/./src/lib/components/CandidateBox.ts","webpack://SimpleKeyboard/./src/lib/components/Keyboard.ts","webpack://SimpleKeyboard/./src/lib/index.modern.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboard\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboard\"] = factory();\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { KeyboardInput } from './../interfaces';\r\nimport { KeyboardOptions, UtilitiesParams } from '../interfaces';\r\n\r\n/**\r\n * Utility Service\r\n */\r\nclass Utilities {\r\n  getOptions: () => KeyboardOptions;\r\n  getCaretPosition: () => number | null;\r\n  getCaretPositionEnd: () => number | null;\r\n  dispatch: any;\r\n  maxLengthReached!: boolean;\r\n\r\n  /**\r\n   * Creates an instance of the Utility service\r\n   */\r\n  constructor({ getOptions, getCaretPosition, getCaretPositionEnd, dispatch }: UtilitiesParams) {\r\n    this.getOptions = getOptions;\r\n    this.getCaretPosition = getCaretPosition;\r\n    this.getCaretPositionEnd = getCaretPositionEnd;\r\n    this.dispatch = dispatch;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(Utilities, this);\r\n  }\r\n\r\n  /**\r\n   * Retrieve button type\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The button type\r\n   */\r\n  getButtonType(button: string): string {\r\n    return button.includes('{') && button.includes('}') && button !== '{//}' ? 'functionBtn' : 'standardBtn';\r\n  }\r\n\r\n  /**\r\n   * Adds default classes to a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The classes to be added to the button\r\n   */\r\n  getButtonClass(button: string): string {\r\n    const buttonTypeClass = this.getButtonType(button);\r\n    const buttonWithoutBraces = button.replace('{', '').replace('}', '');\r\n    let buttonNormalized = '';\r\n\r\n    if (buttonTypeClass !== 'standardBtn') buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\r\n\r\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\r\n  }\r\n\r\n  /**\r\n   * Default button display labels\r\n   */\r\n  getDefaultDisplay() {\r\n    return {\r\n      '{bksp}': 'backspace',\r\n      '{backspace}': 'backspace',\r\n      '{enter}': '< enter',\r\n      '{shift}': 'shift',\r\n      '{shiftleft}': 'shift',\r\n      '{shiftright}': 'shift',\r\n      '{alt}': 'alt',\r\n      '{s}': 'shift',\r\n      '{tab}': 'tab',\r\n      '{lock}': 'caps',\r\n      '{capslock}': 'caps',\r\n      '{accept}': 'Submit',\r\n      '{space}': ' ',\r\n      '{//}': ' ',\r\n      '{esc}': 'esc',\r\n      '{escape}': 'esc',\r\n      '{f1}': 'f1',\r\n      '{f2}': 'f2',\r\n      '{f3}': 'f3',\r\n      '{f4}': 'f4',\r\n      '{f5}': 'f5',\r\n      '{f6}': 'f6',\r\n      '{f7}': 'f7',\r\n      '{f8}': 'f8',\r\n      '{f9}': 'f9',\r\n      '{f10}': 'f10',\r\n      '{f11}': 'f11',\r\n      '{f12}': 'f12',\r\n      '{numpaddivide}': '/',\r\n      '{numlock}': 'lock',\r\n      '{arrowup}': '↑',\r\n      '{arrowleft}': '←',\r\n      '{arrowdown}': '↓',\r\n      '{arrowright}': '→',\r\n      '{prtscr}': 'print',\r\n      '{scrolllock}': 'scroll',\r\n      '{pause}': 'pause',\r\n      '{insert}': 'ins',\r\n      '{home}': 'home',\r\n      '{pageup}': 'up',\r\n      '{delete}': 'del',\r\n      '{forwarddelete}': 'del',\r\n      '{end}': 'end',\r\n      '{pagedown}': 'down',\r\n      '{numpadmultiply}': '*',\r\n      '{numpadsubtract}': '-',\r\n      '{numpadadd}': '+',\r\n      '{numpadenter}': 'enter',\r\n      '{period}': '.',\r\n      '{numpaddecimal}': '.',\r\n      '{numpad0}': '0',\r\n      '{numpad1}': '1',\r\n      '{numpad2}': '2',\r\n      '{numpad3}': '3',\r\n      '{numpad4}': '4',\r\n      '{numpad5}': '5',\r\n      '{numpad6}': '6',\r\n      '{numpad7}': '7',\r\n      '{numpad8}': '8',\r\n      '{numpad9}': '9',\r\n    };\r\n  }\r\n  /**\r\n   * Returns the display (label) name for a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {object} display The provided display option\r\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\r\n   */\r\n  getButtonDisplayName(button: string, display: KeyboardOptions['display'], mergeDisplay = false) {\r\n    if (mergeDisplay) {\r\n      display = Object.assign({}, this.getDefaultDisplay(), display);\r\n    } else {\r\n      display = display || this.getDefaultDisplay();\r\n    }\r\n\r\n    return display[button] || button;\r\n  }\r\n\r\n  /**\r\n   * Returns the updated input resulting from clicking a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {string} input The input string\r\n   * @param  {number} caretPos The cursor's current position\r\n   * @param  {number} caretPosEnd The cursor's current end position\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  getUpdatedInput(button: string, input: string, caretPos: any, caretPosEnd = caretPos, moveCaret = false) {\r\n    const options = this.getOptions();\r\n    const commonParams: [number | undefined, number | undefined, boolean] = [caretPos, caretPosEnd, moveCaret];\r\n\r\n    let output = input;\r\n\r\n    if ((button === '{bksp}' || button === '{backspace}') && output.length > 0) {\r\n      output = this.removeAt(output, ...commonParams);\r\n    } else if ((button === '{delete}' || button === '{forwarddelete}') && output.length > 0) {\r\n      output = this.removeForwardsAt(output, ...commonParams);\r\n    } else if (button === '{space}') output = this.addStringAt(output, ' ', ...commonParams);\r\n    else if (button === '{tab}' && !(typeof options.tabCharOnTab === 'boolean' && options.tabCharOnTab === false)) {\r\n      output = this.addStringAt(output, '\\t', ...commonParams);\r\n    } else if ((button === '{enter}' || button === '{numpadenter}') && options.newLineOnEnter)\r\n      output = this.addStringAt(output, '\\n', ...commonParams);\r\n    else if (button.includes('numpad') && Number.isInteger(Number(button[button.length - 2]))) {\r\n      output = this.addStringAt(output, button[button.length - 2], ...commonParams);\r\n    } else if (button === '{numpaddivide}') output = this.addStringAt(output, '/', ...commonParams);\r\n    else if (button === '{numpadmultiply}') output = this.addStringAt(output, '*', ...commonParams);\r\n    else if (button === '{numpadsubtract}') output = this.addStringAt(output, '-', ...commonParams);\r\n    else if (button === '{numpadadd}') output = this.addStringAt(output, '+', ...commonParams);\r\n    else if (button === '{numpaddecimal}') output = this.addStringAt(output, '.', ...commonParams);\r\n    else if (button === '{' || button === '}') output = this.addStringAt(output, button, ...commonParams);\r\n    else if (!button.includes('{') && !button.includes('}')) output = this.addStringAt(output, button, ...commonParams);\r\n\r\n    if (options.debug) {\r\n      console.log('Input will be: ' + output);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Moves the cursor position by a given amount\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPos(length: number, minus = false) {\r\n    const newCaretPos = this.updateCaretPosAction(length, minus);\r\n\r\n    this.dispatch((instance: any) => {\r\n      instance.setCaretPosition(newCaretPos);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Action method of updateCaretPos\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPosAction(length: number, minus = false) {\r\n    const options = this.getOptions();\r\n    let caretPosition = this.getCaretPosition();\r\n\r\n    if (caretPosition != null) {\r\n      if (minus) {\r\n        if (caretPosition > 0) caretPosition = caretPosition - length;\r\n      } else {\r\n        caretPosition = caretPosition + length;\r\n      }\r\n    }\r\n\r\n    if (options.debug) {\r\n      console.log('Caret at:', caretPosition);\r\n    }\r\n\r\n    return caretPosition;\r\n  }\r\n\r\n  /**\r\n   * Adds a string to the input at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {string} str The string to add\r\n   * @param  {number} position The (cursor) position where the string should be added\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  addStringAt(source: string, str: string, position = source.length, positionEnd = source.length, moveCaret = false) {\r\n    let output;\r\n\r\n    if (!position && position !== 0) {\r\n      output = source + str;\r\n    } else {\r\n      output = [source.slice(0, position), str, source.slice(positionEnd)].join('');\r\n\r\n      /**\r\n       * Avoid caret position change when maxLength is set\r\n       */\r\n      if (!this.isMaxLengthReached()) {\r\n        if (moveCaret) this.updateCaretPos(str.length);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Check whether the button is a standard button\r\n   */\r\n  isStandardButton = (button: string) => button && !(button[0] === '{' && button[button.length - 1] === '}');\r\n\r\n  /**\r\n   * Removes an amount of characters before a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  removeAt(source: string, position = source.length, positionEnd = source.length, moveCaret = false) {\r\n    if (position === 0 && positionEnd === 0) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      let prevTwoChars;\r\n      let emojiMatched;\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      if (position && position >= 0) {\r\n        prevTwoChars = source.substring(position - 2, position);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.substr(0, position - 2) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.substr(0, position - 1) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      } else {\r\n        prevTwoChars = source.slice(-2);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.slice(0, -2);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.slice(0, -1);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch((instance: any) => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Removes an amount of characters after a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   */\r\n  removeForwardsAt(\r\n    source: string,\r\n    position: number = source.length,\r\n    positionEnd: number = source.length,\r\n    moveCaret = false\r\n  ) {\r\n    if (!source?.length || position === null) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      const nextTwoChars = source.substring(position, position + 2);\r\n      const emojiMatched = nextTwoChars.match(emojiMatchedReg);\r\n\r\n      if (emojiMatched) {\r\n        output = source.substr(0, position) + source.substr(position + 2);\r\n      } else {\r\n        output = source.substr(0, position) + source.substr(position + 1);\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch((instance: any) => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\r\n   *\r\n   * @param  {object} inputObj\r\n   * @param  {string} updatedInput\r\n   */\r\n  handleMaxLength(inputObj: KeyboardInput, updatedInput: string) {\r\n    const options = this.getOptions();\r\n    const maxLength = options.maxLength;\r\n    const currentInput = inputObj[options.inputName || 'default'];\r\n    const condition = updatedInput.length - 1 >= maxLength;\r\n\r\n    if (\r\n      /**\r\n       * If pressing this button won't add more characters\r\n       * We exit out of this limiter function\r\n       */\r\n      updatedInput.length <= currentInput.length\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (Number.isInteger(maxLength)) {\r\n      if (options.debug) {\r\n        console.log('maxLength (num) reached:', condition);\r\n      }\r\n\r\n      if (condition) {\r\n        /**\r\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\r\n         */\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (typeof maxLength === 'object') {\r\n      const condition = updatedInput.length - 1 >= maxLength[options.inputName || 'default'];\r\n\r\n      if (options.debug) {\r\n        console.log('maxLength (obj) reached:', condition);\r\n      }\r\n\r\n      if (condition) {\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of maxLengthReached\r\n   */\r\n  isMaxLengthReached() {\r\n    return Boolean(this.maxLengthReached);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a touch device is being used\r\n   */\r\n  isTouchDevice() {\r\n    return 'ontouchstart' in window || navigator.maxTouchPoints;\r\n  }\r\n\r\n  /**\r\n   * Determines whether pointer events are supported\r\n   */\r\n  pointerEventsSupported() {\r\n    return !!window.PointerEvent;\r\n  }\r\n\r\n  /**\r\n   * Bind all methods in a given class\r\n   */\r\n\r\n  static bindMethods(myClass: any, instance: any) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (const myMethod of Object.getOwnPropertyNames(myClass.prototype)) {\r\n      const excludeMethod = myMethod === 'constructor' || myMethod === 'bindMethods';\r\n      if (!excludeMethod) {\r\n        instance[myMethod] = instance[myMethod].bind(instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transforms an arbitrary string to camelCase\r\n   *\r\n   * @param  {string} str The string to transform.\r\n   */\r\n  camelCase(str: string): string {\r\n    if (!str) return '';\r\n\r\n    return str\r\n      .toLowerCase()\r\n      .trim()\r\n      .split(/[.\\-_\\s]/g)\r\n      .reduce((str, word) => (word.length ? str + word[0].toUpperCase() + word.slice(1) : str));\r\n  }\r\n\r\n  /**\r\n   * Split array into chunks\r\n   */\r\n  chunkArray<T>(arr: T[], size: number): T[][] {\r\n    return [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));\r\n  }\r\n\r\n  /**\r\n   * Escape regex input\r\n   */\r\n  escapeRegex(str: string) {\r\n    return str.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n  }\r\n\r\n  /**\r\n   * Calculate caret position offset when using rtl option\r\n   */\r\n  getRtlOffset(index: number, input: string) {\r\n    let newIndex = index;\r\n    const startMarkerIndex = input.indexOf('\\u202B');\r\n    const endMarkerIndex = input.indexOf('\\u202C');\r\n\r\n    if (startMarkerIndex < index && startMarkerIndex != -1) {\r\n      newIndex--;\r\n    }\r\n    if (endMarkerIndex < index && startMarkerIndex != -1) {\r\n      newIndex--;\r\n    }\r\n\r\n    return newIndex < 0 ? 0 : newIndex;\r\n  }\r\n\r\n  /**\r\n   * Reusable empty function\r\n   */\r\n  static noop = () => {};\r\n\r\n  /**\r\n   * Check if a function is a constructor\r\n   */\r\n  isConstructor(f: any) {\r\n    try {\r\n      Reflect.construct(String, [], f);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default Utilities;\r\n","import { KeyboardOptions, PhysicalKeyboardParams } from '../interfaces';\r\nimport Utilities from '../services/Utilities';\r\nimport { getDefaultLayout } from '../services/KeyboardLayout';\r\n\r\n/**\r\n * Layout Key Mapping Interface\r\n */\r\ninterface LayoutKeyMapping {\r\n  normal: string | number;\r\n  shift: string | number;\r\n}\r\n\r\n/**\r\n * Physical Keyboard Service\r\n */\r\nclass PhysicalKeyboard {\r\n  getOptions: () => KeyboardOptions;\r\n  dispatch: any;\r\n  layoutJSON: Record<string, LayoutKeyMapping> | null = null;\r\n  lastLayout = '';\r\n  shiftActive = false;\r\n  capslockActive = false;\r\n\r\n  /**\r\n   * Creates an instance of the PhysicalKeyboard service\r\n   */\r\n  constructor({ dispatch, getOptions }: PhysicalKeyboardParams) {\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.dispatch = dispatch;\r\n    this.getOptions = getOptions;\r\n\r\n    if (this.getOptions() && this.getOptions().layout) {\r\n      this.lastLayout = this.getOptions()?.layout?.default?.[1] || '';\r\n      const layout = this.getOptions().layout;\r\n      if (layout) {\r\n        this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(layout));\r\n      }\r\n    } else {\r\n      this.lastLayout = getDefaultLayout().default[1];\r\n      this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(getDefaultLayout()));\r\n    }\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(PhysicalKeyboard, this);\r\n  }\r\n\r\n  handleHighlightKeyDown(e: KeyboardEvent) {\r\n    const options = this.getOptions();\r\n\r\n    if ((e.code === 'ShiftLeft' || e.code === 'ShiftRight') && !this.shiftActive) {\r\n      this.shiftActive = !this.shiftActive;\r\n    }\r\n\r\n    if (e.code === 'CapsLock') {\r\n      this.capslockActive = !this.capslockActive;\r\n    }\r\n\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\r\n\r\n    this.dispatch((instance: any) => {\r\n      const standardButtonPressed = instance.getButtonElement(buttonPressed);\r\n      const functionButtonPressed = instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      console.log('[PhysicalKeyboard] handleHighlightKeyDown', {\r\n        buttonPressed,\r\n        standardButtonPressed,\r\n        functionButtonPressed,\r\n      });\r\n\r\n      let buttonDOM;\r\n      let buttonName: string;\r\n\r\n      if (standardButtonPressed) {\r\n        buttonDOM = standardButtonPressed;\r\n        buttonName = buttonPressed;\r\n      } else if (functionButtonPressed) {\r\n        buttonDOM = functionButtonPressed;\r\n        buttonName = `{${buttonPressed}}`;\r\n      } else {\r\n        return;\r\n      }\r\n\r\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\r\n        buttonElement.style.background = options.physicalKeyboardHighlightBgColor || '#dadce4';\r\n        buttonElement.style.color = options.physicalKeyboardHighlightTextColor || 'black';\r\n      };\r\n\r\n      if (buttonDOM) {\r\n        if (Array.isArray(buttonDOM)) {\r\n          buttonDOM.forEach((buttonElement) => applyButtonStyle(buttonElement));\r\n\r\n          // Even though we have an array of buttons, we just want to press one of them\r\n          if (options.physicalKeyboardHighlightPress) {\r\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n              buttonDOM[0]?.onpointerdown?.(e);\r\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\r\n              buttonDOM[0]?.click();\r\n            } else {\r\n              instance.handleButtonClicked(buttonName, e);\r\n            }\r\n          }\r\n        } else {\r\n          applyButtonStyle(buttonDOM);\r\n\r\n          if (options.physicalKeyboardHighlightPress) {\r\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n              buttonDOM?.onpointerdown?.(e);\r\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\r\n              buttonDOM.click();\r\n            } else {\r\n              instance.handleButtonClicked(buttonName, e);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  handleHighlightKeyUp(e: KeyboardEvent) {\r\n    const options = this.getOptions();\r\n\r\n    // if (options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)) {\r\n    //   e.preventDefault();\r\n    //   e.stopImmediatePropagation();\r\n    // }\r\n\r\n    if (e.code === 'ShiftLeft' || e.code === 'ShiftRight') {\r\n      this.shiftActive = false;\r\n    }\r\n\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\r\n\r\n    this.dispatch((instance: any) => {\r\n      const buttonDOM = instance.getButtonElement(buttonPressed) || instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\r\n        if (buttonElement.removeAttribute) {\r\n          buttonElement.removeAttribute('style');\r\n        }\r\n      };\r\n\r\n      if (buttonDOM) {\r\n        if (Array.isArray(buttonDOM)) {\r\n          buttonDOM.forEach((buttonElement) => applyButtonStyle(buttonElement));\r\n\r\n          // Even though we have an array of buttons, we just want to press one of them\r\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n            buttonDOM[0]?.onpointerup?.(e);\r\n          }\r\n        } else {\r\n          applyButtonStyle(buttonDOM);\r\n\r\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n            buttonDOM?.onpointerup?.(e);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  STANDARD_CODES = new Set([\r\n    // Alphanumeric\r\n    'Backquote',\r\n    'Digit0',\r\n    'Digit1',\r\n    'Digit2',\r\n    'Digit3',\r\n    'Digit4',\r\n    'Digit5',\r\n    'Digit6',\r\n    'Digit7',\r\n    'Digit8',\r\n    'Digit9',\r\n    'KeyA',\r\n    'KeyB',\r\n    'KeyC',\r\n    'KeyD',\r\n    'KeyE',\r\n    'KeyF',\r\n    'KeyG',\r\n    'KeyH',\r\n    'KeyI',\r\n    'KeyJ',\r\n    'KeyK',\r\n    'KeyL',\r\n    'KeyM',\r\n    'KeyN',\r\n    'KeyO',\r\n    'KeyP',\r\n    'KeyQ',\r\n    'KeyR',\r\n    'KeyS',\r\n    'KeyT',\r\n    'KeyU',\r\n    'KeyV',\r\n    'KeyW',\r\n    'KeyX',\r\n    'KeyY',\r\n    'KeyZ',\r\n\r\n    // Control & nav\r\n    'Enter',\r\n    'Escape',\r\n    'Backspace',\r\n    'Tab',\r\n    'Space',\r\n    'ArrowLeft',\r\n    'ArrowRight',\r\n    'ArrowUp',\r\n    'ArrowDown',\r\n    'Delete',\r\n    'Insert',\r\n    'Home',\r\n    'End',\r\n    'PageUp',\r\n    'PageDown',\r\n\r\n    // Modifier keys\r\n    'ShiftLeft',\r\n    'ShiftRight',\r\n    'ControlLeft',\r\n    'ControlRight',\r\n    'AltLeft',\r\n    'AltRight',\r\n    'MetaLeft',\r\n    'MetaRight',\r\n    'CapsLock',\r\n\r\n    // Symbols & punctuation\r\n    'Minus',\r\n    'Equal',\r\n    'BracketLeft',\r\n    'BracketRight',\r\n    'Backslash',\r\n    'Semicolon',\r\n    'Quote',\r\n    'Comma',\r\n    'Period',\r\n    'Slash',\r\n\r\n    // Function keys\r\n    'F1',\r\n    'F2',\r\n    'F3',\r\n    'F4',\r\n    'F5',\r\n    'F6',\r\n    'F7',\r\n    'F8',\r\n    'F9',\r\n    'F10',\r\n    'F11',\r\n    'F12',\r\n\r\n    // Numpad\r\n    'NumLock',\r\n    'Numpad0',\r\n    'Numpad1',\r\n    'Numpad2',\r\n    'Numpad3',\r\n    'Numpad4',\r\n    'Numpad5',\r\n    'Numpad6',\r\n    'Numpad7',\r\n    'Numpad8',\r\n    'Numpad9',\r\n    'NumpadAdd',\r\n    'NumpadSubtract',\r\n    'NumpadMultiply',\r\n    'NumpadDivide',\r\n    'NumpadDecimal',\r\n    'NumpadEnter',\r\n\r\n    // Misc\r\n    'ScrollLock',\r\n    'Pause',\r\n    'PrintScreen',\r\n    'ContextMenu',\r\n  ]);\r\n\r\n  /**\r\n   * Normalize a code string to match the official `e.code` spec format.\r\n   * Returns null if no match is found.\r\n   */\r\n  normalizeToStandardCode(input: string): string | null {\r\n    if (!input || typeof input !== 'string') return null;\r\n\r\n    if (this.STANDARD_CODES.has(input)) return input;\r\n\r\n    const upper = input.trim();\r\n    for (const code of this.STANDARD_CODES) {\r\n      if (code.toLowerCase() === upper.toLowerCase()) {\r\n        return code;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  normalizeOutput(rawKey: string): string {\r\n    const normalizeKeyMap: Record<string, string> = {\r\n      shiftleft: 'shift',\r\n      shiftright: 'shift',\r\n      controlleft: 'ctrl',\r\n      controlright: 'ctrl',\r\n      altleft: 'alt',\r\n      altright: 'alt',\r\n      metaleft: 'meta',\r\n      metaright: 'meta',\r\n      backspace: 'bksp',\r\n      capslock: 'lock',\r\n      enter: 'enter',\r\n      tab: 'tab',\r\n    };\r\n\r\n    const key = rawKey.toLowerCase();\r\n    return normalizeKeyMap[key] || (key.length > 1 ? key : rawKey);\r\n  }\r\n\r\n  /**\r\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\r\n   * @param  {object} e The KeyboardEvent\r\n   * @returns {string} The simple-keyboard layout key\r\n   */\r\n  getSimpleKeyboardLayoutKey(e: KeyboardEvent): string {\r\n    let output = '';\r\n\r\n    const options = this.getOptions();\r\n    const currentLayout = options?.layout?.default?.[1] ?? getDefaultLayout().default[1];\r\n    if (this.lastLayout !== currentLayout) {\r\n      this.lastLayout = currentLayout || '';\r\n      const layout = options?.layout ?? getDefaultLayout();\r\n      this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(layout));\r\n    }\r\n\r\n    const eCode = this.normalizeToStandardCode(e.code);\r\n\r\n    // if we have a valid code and it's in the layout, return early\r\n    if (this.layoutJSON && eCode && this.layoutJSON[eCode]) {\r\n      const layoutEntry = this.layoutJSON[eCode];\r\n      output = this.shiftActive || this.capslockActive ? layoutEntry.shift.toString() : layoutEntry.normal.toString();\r\n\r\n      const normalized = this.normalizeOutput(output);\r\n      return normalized;\r\n    }\r\n\r\n    // fallback path for known safe keys\r\n    const fallbackKeys = new Set(['backspace', 'enter', 'tab', 'escape']);\r\n    const key = (e.key || '').toLowerCase();\r\n    if (fallbackKeys.has(key)) {\r\n      output = key;\r\n      const normalized = this.normalizeOutput(output);\r\n      return normalized;\r\n    }\r\n\r\n    // unmapped key — log it and return blank\r\n    // console.warn('[simple-keyboard][Edge Case Triggered] Unmapped key event:', {\r\n    //   code: e.code,\r\n    //   key: e.key,\r\n    //   keyCode: e.keyCode,\r\n    //   layoutJSON: this.layoutJSON,\r\n    //   userAgent: navigator.userAgent, // Browser + OS info\r\n    //   platform: navigator.platform, // OS-level platform\r\n    //   language: navigator.language, // Active input language (e.g., \"ko-KR\")\r\n    //   imeMode:\r\n    //     document.activeElement && 'inputMode' in document.activeElement\r\n    //       ? (document.activeElement as HTMLInputElement | HTMLTextAreaElement).inputMode\r\n    //       : 'unknown', // Input method\r\n    //   isEditable: (document.activeElement as HTMLElement)?.isContentEditable || false, // Useful for composition\r\n    //   time: new Date().toISOString(),\r\n    // });\r\n\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * Retrieve key from keyCode\r\n   */\r\n  keyCodeToKey(keyCode: number): string {\r\n    return (\r\n      {\r\n        8: 'Backspace',\r\n        9: 'Tab',\r\n        13: 'Enter',\r\n        16: 'Shift',\r\n        17: 'Ctrl',\r\n        18: 'Alt',\r\n        19: 'Pause',\r\n        20: 'CapsLock',\r\n        27: 'Esc',\r\n        32: 'Space',\r\n        33: 'PageUp',\r\n        34: 'PageDown',\r\n        35: 'End',\r\n        36: 'Home',\r\n        37: 'ArrowLeft',\r\n        38: 'ArrowUp',\r\n        39: 'ArrowRight',\r\n        40: 'ArrowDown',\r\n        45: 'Insert',\r\n        46: 'Delete',\r\n        48: '0',\r\n        49: '1',\r\n        50: '2',\r\n        51: '3',\r\n        52: '4',\r\n        53: '5',\r\n        54: '6',\r\n        55: '7',\r\n        56: '8',\r\n        57: '9',\r\n        65: 'A',\r\n        66: 'B',\r\n        67: 'C',\r\n        68: 'D',\r\n        69: 'E',\r\n        70: 'F',\r\n        71: 'G',\r\n        72: 'H',\r\n        73: 'I',\r\n        74: 'J',\r\n        75: 'K',\r\n        76: 'L',\r\n        77: 'M',\r\n        78: 'N',\r\n        79: 'O',\r\n        80: 'P',\r\n        81: 'Q',\r\n        82: 'R',\r\n        83: 'S',\r\n        84: 'T',\r\n        85: 'U',\r\n        86: 'V',\r\n        87: 'W',\r\n        88: 'X',\r\n        89: 'Y',\r\n        90: 'Z',\r\n        91: 'Meta',\r\n        96: 'Numpad0',\r\n        97: 'Numpad1',\r\n        98: 'Numpad2',\r\n        99: 'Numpad3',\r\n        100: 'Numpad4',\r\n        101: 'Numpad5',\r\n        102: 'Numpad6',\r\n        103: 'Numpad7',\r\n        104: 'Numpad8',\r\n        105: 'Numpad9',\r\n        106: 'NumpadMultiply',\r\n        107: 'NumpadAdd',\r\n        109: 'NumpadSubtract',\r\n        110: 'NumpadDecimal',\r\n        111: 'NumpadDivide',\r\n        112: 'F1',\r\n        113: 'F2',\r\n        114: 'F3',\r\n        115: 'F4',\r\n        116: 'F5',\r\n        117: 'F6',\r\n        118: 'F7',\r\n        119: 'F8',\r\n        120: 'F9',\r\n        121: 'F10',\r\n        122: 'F11',\r\n        123: 'F12',\r\n        144: 'NumLock',\r\n        145: 'ScrollLock',\r\n        186: ';',\r\n        187: '=',\r\n        188: ',',\r\n        189: '-',\r\n        190: '.',\r\n        191: '/',\r\n        192: '`',\r\n        219: '[',\r\n        220: '\\\\',\r\n        221: ']',\r\n        222: \"'\",\r\n      }[keyCode] || ''\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Extracts and pads a layout object\r\n   * @param  {object} layout The layout object\r\n   * @returns {object} The layout object with padding\r\n   */\r\n  extractAndPadLayout(layout: Record<string, string[]>): Record<string, (string | number)[][]> {\r\n    const qwertyRowLengths = [14, 14, 13, 12, 3]; // Number of keys per QWERTY row\r\n\r\n    const processedLayout: Record<string, (string | number)[][]> = { default: [], shift: [] };\r\n\r\n    for (const type of ['default', 'shift']) {\r\n      if (!layout[type]) continue; // Skip if layout type is missing\r\n\r\n      const rows = layout[type].map((row) => row.split(' '));\r\n\r\n      for (let i = 0; i < qwertyRowLengths.length; i++) {\r\n        processedLayout[type][i] = rows[i] ? [...rows[i]] : [];\r\n        while (processedLayout[type][i].length < qwertyRowLengths[i]) {\r\n          processedLayout[type][i].push(-1); // Fill missing spots\r\n        }\r\n      }\r\n    }\r\n\r\n    return processedLayout;\r\n  }\r\n\r\n  /**\r\n   * Maps a layout object to event codes\r\n   * @param  {object} layout The layout object\r\n   * @returns {object} The layout object with event codes\r\n   */\r\n\r\n  mapLayoutToEventCodes(layout: Record<string, (string | number)[][]>): Record<string, LayoutKeyMapping> {\r\n    const mappedLayout: Record<string, LayoutKeyMapping> = {};\r\n\r\n    const qwertyRows = [\r\n      [\r\n        'Backquote',\r\n        'Digit1',\r\n        'Digit2',\r\n        'Digit3',\r\n        'Digit4',\r\n        'Digit5',\r\n        'Digit6',\r\n        'Digit7',\r\n        'Digit8',\r\n        'Digit9',\r\n        'Digit0',\r\n        'Minus',\r\n        'Equal',\r\n        'Backspace',\r\n      ],\r\n      [\r\n        'Tab',\r\n        'KeyQ',\r\n        'KeyW',\r\n        'KeyE',\r\n        'KeyR',\r\n        'KeyT',\r\n        'KeyY',\r\n        'KeyU',\r\n        'KeyI',\r\n        'KeyO',\r\n        'KeyP',\r\n        'BracketLeft',\r\n        'BracketRight',\r\n        'Backslash',\r\n      ],\r\n      [\r\n        'CapsLock',\r\n        'KeyA',\r\n        'KeyS',\r\n        'KeyD',\r\n        'KeyF',\r\n        'KeyG',\r\n        'KeyH',\r\n        'KeyJ',\r\n        'KeyK',\r\n        'KeyL',\r\n        'Semicolon',\r\n        'Quote',\r\n        'Enter',\r\n      ],\r\n      ['ShiftLeft', 'KeyZ', 'KeyX', 'KeyC', 'KeyV', 'KeyB', 'KeyN', 'KeyM', 'Comma', 'Period', 'Slash', 'ShiftRight'],\r\n      ['ControlLeft', 'AltLeft', 'Space'],\r\n    ];\r\n\r\n    for (let rowIndex = 0; rowIndex < qwertyRows.length; rowIndex++) {\r\n      for (let colIndex = 0; colIndex < qwertyRows[rowIndex].length; colIndex++) {\r\n        const eventCode = qwertyRows[rowIndex][colIndex];\r\n        const normalKey = layout.default[rowIndex][colIndex] ?? '';\r\n        const shiftKey = layout.shift[rowIndex][colIndex] ?? '';\r\n\r\n        mappedLayout[eventCode] = {\r\n          normal: normalKey !== -1 ? normalKey : '',\r\n          shift: shiftKey !== -1 ? shiftKey : '',\r\n        };\r\n      }\r\n    }\r\n\r\n    return mappedLayout;\r\n  }\r\n\r\n  isModifierKey = (e: KeyboardEvent): boolean => {\r\n    return (\r\n      e.altKey ||\r\n      e.ctrlKey ||\r\n      e.shiftKey ||\r\n      ['Tab', 'CapsLock', 'Esc', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(\r\n        e.code || e.key || this.keyCodeToKey(e?.keyCode)\r\n      )\r\n    );\r\n  };\r\n}\r\n\r\nexport default PhysicalKeyboard;\r\n","import { KeyboardLayoutObject } from \"../interfaces\";\r\n\r\nexport const getDefaultLayout = (): KeyboardLayoutObject => {\r\n  return {\r\n    default: [\r\n      \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\r\n      \"{tab} q w e r t y u i o p [ ] \\\\\",\r\n      \"{lock} a s d f g h j k l ; ' {enter}\",\r\n      \"{shift} z x c v b n m , . / {shift}\",\r\n      \".com @ {space}\",\r\n    ],\r\n    shift: [\r\n      \"~ ! @ # $ % ^ & * ( ) _ + {bksp}\",\r\n      \"{tab} Q W E R T Y U I O P { } |\",\r\n      '{lock} A S D F G H J K L : \" {enter}',\r\n      \"{shift} Z X C V B N M < > ? {shift}\",\r\n      \".com @ {space}\",\r\n    ],\r\n  };\r\n};\r\n","import './css/CandidateBox.css';\r\nimport Utilities from '../services/Utilities';\r\nimport { CandidateBoxParams, CandidateBoxRenderParams, CandidateBoxShowParams, KeyboardOptions } from './../interfaces';\r\n\r\nclass CandidateBox {\r\n  utilities: Utilities;\r\n  options: KeyboardOptions;\r\n  candidateBoxElement: HTMLDivElement | null = null;\r\n  pageIndex = 0;\r\n  pageSize: number;\r\n  private activeIndex = 0;\r\n  private candidateOptions: HTMLLIElement[] = [];\r\n  private globalLiveRegionElement: HTMLElement | null = document.querySelector('.hg-live-region');\r\n  static isOpen = false;\r\n  private handleActiveIndexBound: (e: KeyboardEvent) => void;\r\n  private firstLastNavBound: (e: KeyboardEvent) => void;\r\n  private listenersAttached = false;\r\n\r\n  constructor({ utilities, options }: CandidateBoxParams) {\r\n    this.utilities = utilities;\r\n    this.options = options;\r\n    Utilities.bindMethods(CandidateBox, this);\r\n    this.pageSize = this.utilities.getOptions().layoutCandidatesPageSize || 5;\r\n    this.handleActiveIndexBound = this.handleActiveIndex.bind(this);\r\n    this.firstLastNavBound = this.firstLastNav.bind(this);\r\n  }\r\n\r\n  private attachDocListeners() {\r\n    if (this.listenersAttached) return;\r\n    // IMPORTANT: add the bound functions directly, no wrapper\r\n    document.addEventListener('keydown', this.handleActiveIndexBound, { capture: false });\r\n    document.addEventListener('keydown', this.firstLastNavBound, { capture: false });\r\n    this.listenersAttached = true;\r\n  }\r\n\r\n  private detachDocListeners() {\r\n    if (!this.listenersAttached) return;\r\n    document.removeEventListener('keydown', this.handleActiveIndexBound, { capture: false });\r\n    document.removeEventListener('keydown', this.firstLastNavBound, { capture: false });\r\n    this.listenersAttached = false;\r\n  }\r\n\r\n  destroy(): void {\r\n    this.detachDocListeners();\r\n\r\n    if (this.candidateBoxElement) {\r\n      setTimeout(() => {\r\n        if (this.candidateBoxElement) {\r\n          this.candidateBoxElement.remove();\r\n          this.candidateBoxElement = null;\r\n        }\r\n        CandidateBox.isOpen = false;\r\n      }, 30);\r\n    }\r\n\r\n    this.activeIndex = 0;\r\n    this.candidateOptions = [];\r\n\r\n    // Ensure no keyboard nav leaks persist\r\n    const oldListbox = document.querySelector('.hg-candidate-box-list');\r\n    if (oldListbox) {\r\n      oldListbox.replaceWith(oldListbox.cloneNode(true)); // remove all listeners\r\n    }\r\n\r\n    this.pageIndex = 0;\r\n  }\r\n\r\n  show({ candidateValue, targetElement, onSelect }: CandidateBoxShowParams): void {\r\n    if (!candidateValue || !candidateValue.length) return;\r\n\r\n    const candidateListPages = this.utilities.chunkArray(candidateValue.split(' '), this.pageSize);\r\n\r\n    this.renderPage({\r\n      candidateListPages,\r\n      targetElement,\r\n      pageIndex: this.pageIndex,\r\n      nbPages: candidateListPages.length,\r\n      onItemSelected: (selectedCandidate: string, e: MouseEvent) => {\r\n        onSelect(selectedCandidate, e);\r\n        this.destroy();\r\n      },\r\n    });\r\n\r\n    CandidateBox.isOpen = true;\r\n  }\r\n\r\n  private firstLastNav(e: KeyboardEvent) {\r\n    if (e.key !== 'Tab' || !CandidateBox.isOpen) return;\r\n\r\n    const focusable = this.candidateBoxElement?.querySelectorAll<HTMLElement>('.hg-candidate-box-list-item');\r\n\r\n    if (!focusable?.length) return;\r\n\r\n    const first = focusable[0];\r\n    const last = focusable[focusable.length - 1];\r\n\r\n    if (e.shiftKey && document.querySelector<HTMLElement>('.hg-candidate-box-list-item.active') === first) {\r\n      e.preventDefault();\r\n      last.setAttribute('aria-selected', 'true');\r\n    } else if (!e.shiftKey && document.querySelector<HTMLElement>('.hg-candidate-box-list-item.active') === last) {\r\n      e.preventDefault();\r\n      first.setAttribute('aria-selected', 'true');\r\n    }\r\n  }\r\n\r\n  renderPage({ candidateListPages, targetElement, pageIndex, nbPages, onItemSelected }: CandidateBoxRenderParams) {\r\n    this.attachDocListeners();\r\n    this.candidateBoxElement?.remove();\r\n\r\n    this.candidateBoxElement = document.createElement('div');\r\n    this.candidateBoxElement.className = 'hg-candidate-box';\r\n    this.candidateBoxElement.setAttribute('role', 'dialog');\r\n    this.candidateBoxElement.setAttribute('aria-label', 'Character Suggestions');\r\n    this.candidateBoxElement.setAttribute('aria-describedby', 'candidate-box-instructions');\r\n\r\n    const instructionsElement = document.createElement('div');\r\n    instructionsElement.id = 'candidate-box-instructions';\r\n    instructionsElement.classList.add('hg-candidate-box-instructions', 'sr-only');\r\n    instructionsElement.innerHTML = 'Use up and down arrow keys to navigate, Enter to select.';\r\n    this.candidateBoxElement.appendChild(instructionsElement);\r\n\r\n    const candidateListULElement = document.createElement('ul');\r\n    candidateListULElement.className = 'hg-candidate-box-list';\r\n    candidateListULElement.setAttribute('role', 'listbox');\r\n    candidateListULElement.setAttribute('tabindex', '-1');\r\n\r\n    candidateListPages[pageIndex].forEach((candidateListItem, i) => {\r\n      const candidateListLIElement = document.createElement('li');\r\n      candidateListLIElement.setAttribute('role', 'option');\r\n      candidateListLIElement.setAttribute('aria-selected', i === 0 ? 'true' : 'false');\r\n      candidateListLIElement.id = `key-candidate-${i}`;\r\n      candidateListLIElement.className = 'hg-candidate-box-list-item';\r\n      candidateListLIElement.innerHTML = this.options.display?.[candidateListItem] || candidateListItem;\r\n\r\n      const getMouseEvent = () => {\r\n        const mouseEvent = new (this.options.useTouchEvents ? TouchEvent : MouseEvent)('click');\r\n        Object.defineProperty(mouseEvent, 'target', { value: candidateListLIElement });\r\n        return mouseEvent;\r\n      };\r\n\r\n      candidateListLIElement.onclick = (e = getMouseEvent() as MouseEvent) => {\r\n        if (this.globalLiveRegionElement) {\r\n          const label = candidateListLIElement.textContent?.trim();\r\n          this.globalLiveRegionElement.textContent = `Inserted: ${label}`;\r\n        }\r\n        onItemSelected(candidateListItem, e);\r\n      };\r\n\r\n      if (this.options.useTouchEvents) {\r\n        candidateListLIElement.ontouchstart = (e: any) => {\r\n          if (this.globalLiveRegionElement) {\r\n            const label = candidateListLIElement.textContent?.trim();\r\n            this.globalLiveRegionElement.textContent = `Inserted: ${label}`;\r\n          }\r\n          onItemSelected(candidateListItem, e || getMouseEvent());\r\n        };\r\n      }\r\n\r\n      candidateListULElement.appendChild(candidateListLIElement);\r\n    });\r\n\r\n    const isPrevBtnElementActive = pageIndex > 0;\r\n    const prevBtnElement = document.createElement('div');\r\n    prevBtnElement.classList.add('hg-candidate-box-prev');\r\n    if (isPrevBtnElementActive) prevBtnElement.classList.add('hg-candidate-box-btn-active');\r\n\r\n    prevBtnElement.onclick = () => {\r\n      if (!isPrevBtnElementActive) return;\r\n      this.renderPage({ candidateListPages, targetElement, pageIndex: pageIndex - 1, nbPages, onItemSelected });\r\n    };\r\n\r\n    const isNextBtnElementActive = pageIndex < nbPages - 1;\r\n    const nextBtnElement = document.createElement('div');\r\n    nextBtnElement.classList.add('hg-candidate-box-next');\r\n    if (isNextBtnElementActive) nextBtnElement.classList.add('hg-candidate-box-btn-active');\r\n\r\n    nextBtnElement.onclick = () => {\r\n      if (!isNextBtnElementActive) return;\r\n      this.renderPage({ candidateListPages, targetElement, pageIndex: pageIndex + 1, nbPages, onItemSelected });\r\n    };\r\n\r\n    this.candidateBoxElement.appendChild(prevBtnElement);\r\n    this.candidateBoxElement.appendChild(candidateListULElement);\r\n    this.candidateBoxElement.appendChild(nextBtnElement);\r\n\r\n    this.candidateBoxElement.addEventListener('keydown', (e: KeyboardEvent) => {\r\n      if (e.key === 'Escape') {\r\n        e.preventDefault();\r\n        this.destroy();\r\n      }\r\n    });\r\n\r\n    targetElement.prepend(this.candidateBoxElement);\r\n\r\n    this.setupKeyboardNav(candidateListULElement);\r\n  }\r\n\r\n  private handleActiveIndex(e: KeyboardEvent): void {\r\n    if (!CandidateBox.isOpen) return;\r\n    if (e.key === 'ArrowDown') {\r\n      e.preventDefault();\r\n      this.updateActiveIndex((this.activeIndex + 1) % this.candidateOptions.length);\r\n    } else if (e.key === 'ArrowUp') {\r\n      e.preventDefault();\r\n      this.updateActiveIndex((this.activeIndex - 1 + this.candidateOptions.length) % this.candidateOptions.length);\r\n    } else if (e.key === 'Enter' || e.key === ' ') {\r\n      e.preventDefault();\r\n      this.activateSelectedOption();\r\n    } else if (e.key === 'Escape') {\r\n      e.preventDefault();\r\n      this.destroy();\r\n    } else if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  private setupKeyboardNav(listbox: HTMLUListElement) {\r\n    this.candidateOptions = Array.from(listbox.querySelectorAll('[role=\"option\"]'));\r\n    this.candidateOptions.forEach((option, i) => {\r\n      if (!option.id) option.id = `candidate-${i}`;\r\n    });\r\n\r\n    this.setActiveOption(0);\r\n  }\r\n\r\n  private setActiveOption(index: number): void {\r\n    this.activeIndex = index;\r\n    this.updateActiveIndex(index);\r\n  }\r\n\r\n  private updateActiveIndex(newIndex: number): void {\r\n    const prev = this.candidateOptions[this.activeIndex];\r\n    const next = this.candidateOptions[newIndex];\r\n\r\n    if (prev) {\r\n      prev.setAttribute('aria-selected', 'false');\r\n      prev.classList.remove('active');\r\n    }\r\n\r\n    this.activeIndex = newIndex;\r\n\r\n    if (next) {\r\n      next.setAttribute('aria-selected', 'true');\r\n      next.classList.add('active');\r\n      next.scrollIntoView({ block: 'nearest' });\r\n\r\n      if (this.globalLiveRegionElement) {\r\n        const total = this.candidateOptions.length;\r\n        const label = next.textContent?.trim();\r\n        this.globalLiveRegionElement.textContent = `${newIndex + 1} of ${total}: ${label}`;\r\n      }\r\n\r\n      if (!this.candidateBoxElement) return;\r\n\r\n      const listbox = this.candidateBoxElement.querySelector('.hg-candidate-box-list');\r\n      if (listbox) {\r\n        listbox.setAttribute('aria-activedescendant', next.id);\r\n      }\r\n    }\r\n  }\r\n\r\n  private activateSelectedOption(): void {\r\n    const activeOption = this.candidateOptions[this.activeIndex];\r\n    if (!activeOption) return;\r\n\r\n    // Update live region before triggering the click\r\n    if (this.globalLiveRegionElement) {\r\n      const label = activeOption.textContent?.trim();\r\n      this.globalLiveRegionElement.textContent = `Inserted: ${label}`;\r\n    }\r\n\r\n    // Then trigger selection\r\n    activeOption.click();\r\n    activeOption.setAttribute('aria-selected', 'false');\r\n  }\r\n}\r\n\r\nexport default CandidateBox;\r\n","import './css/Keyboard.css';\r\n\r\nimport { getDefaultLayout } from '../services/KeyboardLayout';\r\nimport PhysicalKeyboard from '../services/PhysicalKeyboard';\r\nimport Utilities from '../services/Utilities';\r\nimport {\r\n  KeyboardOptions,\r\n  KeyboardInput,\r\n  KeyboardButtonElements,\r\n  KeyboardHandlerEvent,\r\n  KeyboardElement,\r\n  SKWindow,\r\n} from '../interfaces';\r\nimport CandidateBox from './CandidateBox';\r\n\r\n/**\r\n * Root class for simple-keyboard.\r\n * This class:\r\n * - Parses the options\r\n * - Renders the rows and buttons\r\n * - Handles button functionality\r\n */\r\nclass SimpleKeyboard {\r\n  input!: KeyboardInput;\r\n  options!: KeyboardOptions;\r\n  utilities!: Utilities;\r\n  caretPosition!: number | null;\r\n  caretPositionEnd!: number | null;\r\n  keyboardDOM!: KeyboardElement;\r\n  keyboardPluginClasses!: string;\r\n  keyboardDOMClass!: string;\r\n  buttonElements!: KeyboardButtonElements;\r\n  currentInstanceName!: string;\r\n  allKeyboardInstances!: { [key: string]: SimpleKeyboard };\r\n  keyboardInstanceNames!: string[];\r\n  isFirstKeyboardInstance!: boolean;\r\n  physicalKeyboard!: PhysicalKeyboard;\r\n  modules!: { [key: string]: any };\r\n  activeButtonClass!: string;\r\n  holdInteractionTimeout!: number;\r\n  holdTimeout!: number;\r\n  isMouseHold!: boolean;\r\n  initialized!: boolean;\r\n  candidateBox!: CandidateBox | null;\r\n  keyboardRowsDOM!: KeyboardElement;\r\n  defaultName = 'default';\r\n  activeInputElement: HTMLInputElement | HTMLTextAreaElement | null = null;\r\n  keyboardInstructions: HTMLElement | null = null;\r\n  keyboardHeader: HTMLElement | null = null;\r\n  instructions: string | null = null;\r\n  listenersAdded = false;\r\n  ariaLiveTimer: ReturnType<typeof setTimeout> | null = null;\r\n  useLiveRegion = true;\r\n  liveRegionMode: 'assertive' | 'polite' = 'polite';\r\n  liveRegionDelay = 0;\r\n  ariaLabel = '';\r\n  handleKeyDownBound!: (event: KeyboardEvent) => void;\r\n  handleInternalKeyNavBound!: (event: KeyboardEvent) => void;\r\n  handleKeyUpBound!: (event: KeyboardEvent) => void;\r\n  handleMouseDownBound!: (event: MouseEvent) => void;\r\n  handleMouseUpBound!: (event: MouseEvent) => void;\r\n  handleTouchEndBound!: (event: TouchEvent) => void;\r\n  handleSelectBound!: (event: Event) => void;\r\n  handleSelectionChangeBound!: (event: Event) => void;\r\n  NAV_KEYS = new Set(['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Tab', 'Home', 'End', 'PageUp', 'PageDown']);\r\n  MODIFIER_KEYS = new Set(['Shift', 'Control', 'Alt', 'Meta', 'CapsLock', 'NumLock', 'ScrollLock', 'Fn', 'FnLock']);\r\n  NAMED_KEYS_TO_ANNOUNCE = new Set(['Enter', 'Backspace', 'Delete', 'Escape', ' ', 'Spacebar']);\r\n  NAMED_READABLE: Record<string, string> = {\r\n    ' ': 'Space',\r\n    Spacebar: 'Space',\r\n  };\r\n  private announcerEl: HTMLDivElement | null = null;\r\n  navEngaged = false;\r\n\r\n  /**\r\n   * Creates an instance of SimpleKeyboard\r\n   * @param {Array} selectorOrOptions If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\r\n   */\r\n  constructor(selectorOrOptions?: string | HTMLDivElement | KeyboardOptions, keyboardOptions?: KeyboardOptions) {\r\n    if (typeof window === 'undefined') return;\r\n\r\n    const { keyboardDOMClass, keyboardDOM, options = {} } = this.handleParams(selectorOrOptions, keyboardOptions);\r\n\r\n    /**\r\n     * Implementing Announcer\r\n     */\r\n    if (!keyboardDOM) throw new Error('Keyboard root not found');\r\n\r\n    // Reuse or create announcer; safe before/after attachment\r\n    this.announcerEl = this.ensureAnnouncer(keyboardDOM);\r\n\r\n    /**\r\n     * Initializing Utilities\r\n     */\r\n    this.utilities = new Utilities({\r\n      getOptions: this.getOptions,\r\n      getCaretPosition: this.getCaretPosition,\r\n      getCaretPositionEnd: this.getCaretPositionEnd,\r\n      dispatch: this.dispatch,\r\n    });\r\n\r\n    /**\r\n     * Caret position\r\n     */\r\n    this.caretPosition = null;\r\n\r\n    /**\r\n     * Caret position end\r\n     */\r\n    this.caretPositionEnd = null;\r\n\r\n    /**\r\n     * Processing options\r\n     */\r\n    this.keyboardDOM = keyboardDOM;\r\n\r\n    /**\r\n     * @type {object}\r\n     * @property {object} layout Modify the keyboard layout.\r\n     * @property {string} layoutName Specifies which layout should be used.\r\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\r\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\r\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\r\n     * @property {array} buttonTheme A prop to add your own css classes to one or several buttons.\r\n     * @property {array} buttonAttributes A prop to add your own attributes to one or several buttons.\r\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\r\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\r\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\r\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\r\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\r\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\r\n     * @property {boolean} physicalKeyboardHighlightPress Presses keys highlighted by physicalKeyboardHighlight\r\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\r\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\r\n     * @property {boolean} physicalKeyboardHighlightPressUseClick Whether physicalKeyboardHighlightPress should use clicks to trigger buttons.\r\n     * @property {boolean} physicalKeyboardHighlightPressUsePointerEvents Whether physicalKeyboardHighlightPress should use pointer events to trigger buttons.\r\n     * @property {boolean} physicalKeyboardHighlightPreventDefault Whether physicalKeyboardHighlight should use preventDefault to disable default browser actions.\r\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\r\n     * @property {boolean} preventMouseUpDefault Calling preventDefault for the mouseup events.\r\n     * @property {boolean} stopMouseDownPropagation Stops pointer down events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {boolean} stopMouseUpPropagation Stops pointer up events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\r\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\r\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n     * @property {function(keyboard: Keyboard):void} beforeInputUpdate Perform an action before any input change\r\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\r\n     * @property {boolean} useButtonTag Render buttons as a button element instead of a div element.\r\n     * @property {boolean} disableCaretPositioning A prop to ensure characters are always be added/removed at the end of the string.\r\n     * @property {object} inputPattern Restrains input(s) change to the defined regular expression pattern.\r\n     * @property {boolean} useTouchEvents Instructs simple-keyboard to use touch events instead of click events.\r\n     * @property {boolean} autoUseTouchEvents Enable useTouchEvents automatically when touch device is detected.\r\n     * @property {boolean} useMouseEvents Opt out of PointerEvents handling, falling back to the prior mouse event logic.\r\n     * @property {function} destroy Clears keyboard listeners and DOM elements.\r\n     * @property {boolean} disableButtonHold Disable button hold action.\r\n     * @property {boolean} rtl Adds unicode right-to-left control characters to input return values.\r\n     * @property {function} onKeyReleased Executes the callback function on key release.\r\n     * @property {array} modules Module classes to be loaded by simple-keyboard.\r\n     * @property {boolean} enableLayoutCandidates Enable input method editor candidate list support.\r\n     * @property {object} excludeFromLayout Buttons to exclude from layout\r\n     * @property {number} layoutCandidatesPageSize Determines size of layout candidate list\r\n     * @property {boolean} layoutCandidatesCaseSensitiveMatch Determines whether layout candidate match should be case sensitive.\r\n     * @property {boolean} disableCandidateNormalization Disables the automatic normalization for selected layout candidates\r\n     * @property {boolean} enableLayoutCandidatesKeyPress Enables onKeyPress triggering for layoutCandidate items\r\n     * @property {boolean} updateCaretOnSelectionChange Updates caret when selectionchange event is fired\r\n     * @property {boolean} clickOnMouseDown When useMouseEvents is enabled, this option allows you to trigger a button click event on mousedown\r\n     */\r\n    this.options = {\r\n      layoutName: 'default',\r\n      theme: 'hg-theme-default',\r\n      inputName: 'default',\r\n      preventMouseDownDefault: false,\r\n      enableLayoutCandidates: true,\r\n      excludeFromLayout: {},\r\n      ...options,\r\n    };\r\n\r\n    /**\r\n     * @type {object} Classes identifying loaded plugins\r\n     */\r\n    this.keyboardPluginClasses = '';\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(SimpleKeyboard, this);\r\n\r\n    /**\r\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\r\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\r\n     * @example\r\n     * // To get entered input\r\n     * const input = keyboard.getInput();\r\n     *\r\n     * // To clear entered input.\r\n     * keyboard.clearInput();\r\n     *\r\n     * @type {object}\r\n     * @property {object} default Default SimpleKeyboard internal input.\r\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\r\n     */\r\n    const { inputName = this.defaultName } = this.options;\r\n    this.input = {};\r\n    this.input[inputName] = '';\r\n\r\n    /**\r\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\r\n     */\r\n    this.keyboardDOMClass = keyboardDOMClass;\r\n\r\n    /**\r\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\r\n     */\r\n    this.buttonElements = {};\r\n\r\n    /**\r\n     * Simple-keyboard Instances\r\n     * This enables multiple simple-keyboard support with easier management\r\n     */\r\n    if (!(window as SKWindow)['SimpleKeyboardInstances']) (window as SKWindow)['SimpleKeyboardInstances'] = {};\r\n\r\n    this.currentInstanceName = this.utilities.camelCase(this.keyboardDOMClass);\r\n    (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName] = this;\r\n\r\n    /**\r\n     * Instance vars\r\n     */\r\n    this.allKeyboardInstances = (window as SKWindow)['SimpleKeyboardInstances'];\r\n    this.keyboardInstanceNames = Object.keys((window as SKWindow)['SimpleKeyboardInstances']);\r\n    this.isFirstKeyboardInstance = this.keyboardInstanceNames[0] === this.currentInstanceName;\r\n\r\n    /**\r\n     * Physical Keyboard support\r\n     */\r\n    this.physicalKeyboard = new PhysicalKeyboard({\r\n      dispatch: this.dispatch,\r\n      getOptions: this.getOptions,\r\n    });\r\n\r\n    /**\r\n     * Initializing CandidateBox\r\n     */\r\n    this.candidateBox = this.options.enableLayoutCandidates\r\n      ? new CandidateBox({\r\n          utilities: this.utilities,\r\n          options: this.options,\r\n        })\r\n      : null;\r\n\r\n    /**\r\n     * Rendering keyboard\r\n     */\r\n    if (this.keyboardDOM) this.render();\r\n    else {\r\n      console.warn(`\".${keyboardDOMClass}\" was not found in the DOM.`);\r\n      throw new Error('KEYBOARD_DOM_ERROR');\r\n    }\r\n\r\n    /**\r\n     * Modules\r\n     */\r\n    this.modules = {};\r\n    this.loadModules();\r\n  }\r\n\r\n  /**\r\n   * Accessibility Announcer\r\n   * This module is responsible for announcing changes in the keyboard state to assistive technologies.\r\n   */\r\n  private ensureAnnouncer(keyboardEl: Element): HTMLDivElement {\r\n    const parentEl = keyboardEl.parentElement;\r\n\r\n    // Prefer sibling announcer\r\n    if (parentEl) {\r\n      let announcerEl = parentEl.querySelector<HTMLDivElement>(':scope > .hg-live-region');\r\n      if (!announcerEl) {\r\n        announcerEl = document.createElement('div');\r\n        announcerEl.className = 'hg-live-region sr-only';\r\n        announcerEl.setAttribute('role', 'status');\r\n        announcerEl.setAttribute('aria-live', 'polite');\r\n        announcerEl.setAttribute('aria-atomic', 'false');\r\n        keyboardEl.insertAdjacentElement('afterend', announcerEl);\r\n      } else {\r\n        announcerEl.textContent = '';\r\n      }\r\n      return announcerEl;\r\n    }\r\n\r\n    // Fallback: insert inside root but outside key rows\r\n    let announcerEl = keyboardEl.querySelector<HTMLDivElement>(':scope > .hg-live-region');\r\n    if (!announcerEl) {\r\n      announcerEl = document.createElement('div');\r\n      announcerEl.className = 'hg-live-region sr-only';\r\n      announcerEl.setAttribute('role', 'status');\r\n      announcerEl.setAttribute('aria-live', 'polite');\r\n      announcerEl.setAttribute('aria-atomic', 'false');\r\n\r\n      const rowsEl = keyboardEl.querySelector(':scope > .hg-rows');\r\n      if (rowsEl && rowsEl.nextSibling) {\r\n        keyboardEl.insertBefore(announcerEl, rowsEl.nextSibling);\r\n      } else {\r\n        keyboardEl.appendChild(announcerEl);\r\n      }\r\n    } else {\r\n      announcerEl.textContent = '';\r\n    }\r\n\r\n    return announcerEl;\r\n  }\r\n\r\n  /**\r\n   * parseParams\r\n   */\r\n  handleParams = (\r\n    selectorOrOptions?: string | HTMLDivElement | KeyboardOptions,\r\n    keyboardOptions?: KeyboardOptions\r\n  ): {\r\n    keyboardDOMClass: string;\r\n    keyboardDOM: KeyboardElement;\r\n    options: Partial<KeyboardOptions | undefined>;\r\n  } => {\r\n    let keyboardDOMClass;\r\n    let keyboardDOM;\r\n    let options;\r\n\r\n    /**\r\n     * If first parameter is a string:\r\n     * Consider it as an element's class\r\n     */\r\n    if (typeof selectorOrOptions === 'string') {\r\n      keyboardDOMClass = selectorOrOptions.split('.').join('');\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`) as KeyboardElement;\r\n      options = keyboardOptions;\r\n\r\n      /**\r\n       * If first parameter is an KeyboardElement\r\n       * Consider it as the keyboard DOM element\r\n       */\r\n    } else if (selectorOrOptions instanceof HTMLDivElement) {\r\n      /**\r\n       * This element must have a class, otherwise throw\r\n       */\r\n      if (!selectorOrOptions.className) {\r\n        console.warn('Any DOM element passed as parameter must have a class.');\r\n        throw new Error('KEYBOARD_DOM_CLASS_ERROR');\r\n      }\r\n\r\n      keyboardDOMClass = selectorOrOptions.className.split(' ')[0];\r\n      keyboardDOM = selectorOrOptions;\r\n      options = keyboardOptions;\r\n\r\n      /**\r\n       * Otherwise, search for .simple-keyboard DOM element\r\n       */\r\n    } else {\r\n      keyboardDOMClass = 'simple-keyboard';\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`) as KeyboardElement;\r\n      options = selectorOrOptions;\r\n    }\r\n\r\n    return {\r\n      keyboardDOMClass,\r\n      keyboardDOM,\r\n      options,\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Getters\r\n   */\r\n  getOptions = (): KeyboardOptions => this.options;\r\n  getCaretPosition = (): number | null => this.caretPosition;\r\n  getCaretPositionEnd = (): number | null => this.caretPositionEnd;\r\n\r\n  /**\r\n   * Changes the internal caret position\r\n   * @param {number} position The caret's start position\r\n   * @param {number} positionEnd The caret's end position\r\n   */\r\n  setCaretPosition(position: number | null, endPosition = position): void {\r\n    this.caretPosition = position;\r\n    this.caretPositionEnd = endPosition;\r\n  }\r\n\r\n  /**\r\n   * Retrieve the candidates for a given input\r\n   * @param input The input string to check\r\n   */\r\n  getInputCandidates(input: string): { candidateKey: string; candidateValue: string } | Record<string, never> {\r\n    const { layoutCandidates: layoutCandidatesObj, layoutCandidatesCaseSensitiveMatch } = this.options;\r\n\r\n    if (!layoutCandidatesObj || typeof layoutCandidatesObj !== 'object') {\r\n      return {};\r\n    }\r\n\r\n    const layoutCandidates = Object.keys(layoutCandidatesObj).filter((layoutCandidate: string) => {\r\n      const inputSubstr = input.substring(0, this.getCaretPositionEnd() || 0) || input;\r\n      const regexp = new RegExp(\r\n        `${this.utilities.escapeRegex(layoutCandidate)}$`,\r\n        layoutCandidatesCaseSensitiveMatch ? 'g' : 'gi'\r\n      );\r\n      const matches = [...inputSubstr.matchAll(regexp)];\r\n      return !!matches.length;\r\n    });\r\n\r\n    if (layoutCandidates.length > 1) {\r\n      const candidateKey = layoutCandidates.sort((a, b) => b.length - a.length)[0];\r\n      return {\r\n        candidateKey,\r\n        candidateValue: layoutCandidatesObj[candidateKey],\r\n      };\r\n    } else if (layoutCandidates.length) {\r\n      const candidateKey = layoutCandidates[0];\r\n      return {\r\n        candidateKey,\r\n        candidateValue: layoutCandidatesObj[candidateKey],\r\n      };\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows a suggestion box with a list of candidate words\r\n   * @param candidates The chosen candidates string as defined in the layoutCandidates option\r\n   * @param targetElement The element next to which the candidates box will be shown\r\n   */\r\n  showCandidatesBox(candidateKey: string, candidateValue: string, targetElement: KeyboardElement): void {\r\n    if (this.candidateBox) {\r\n      this.candidateBox.show({\r\n        candidateValue,\r\n        targetElement,\r\n        onSelect: (selectedCandidate: string, e: MouseEvent) => {\r\n          const { layoutCandidatesCaseSensitiveMatch, disableCandidateNormalization, enableLayoutCandidatesKeyPress } =\r\n            this.options;\r\n\r\n          let candidateStr = selectedCandidate;\r\n\r\n          if (!disableCandidateNormalization) {\r\n            /**\r\n             * Making sure that our suggestions are not composed characters\r\n             */\r\n            candidateStr = selectedCandidate.normalize('NFD');\r\n          }\r\n\r\n          /**\r\n           * Perform an action before any input change\r\n           */\r\n          if (typeof this.options.beforeInputUpdate === 'function') {\r\n            this.options.beforeInputUpdate(this);\r\n          }\r\n\r\n          const currentInput = this.getInput(this.options.inputName, true);\r\n          const initialCaretPosition = this.getCaretPositionEnd() || 0;\r\n          const inputSubstr = currentInput.substring(0, initialCaretPosition || 0) || currentInput;\r\n\r\n          const regexp = new RegExp(\r\n            `${this.utilities.escapeRegex(candidateKey)}$`,\r\n            layoutCandidatesCaseSensitiveMatch ? 'g' : 'gi'\r\n          );\r\n          const newInputSubstr = inputSubstr.replace(regexp, candidateStr);\r\n          const newInput = currentInput.replace(inputSubstr, newInputSubstr);\r\n\r\n          const caretPositionDiff = newInputSubstr.length - inputSubstr.length;\r\n          let newCaretPosition = (initialCaretPosition || currentInput.length) + caretPositionDiff;\r\n\r\n          if (newCaretPosition < 0) newCaretPosition = 0;\r\n\r\n          this.setInput(newInput, this.options.inputName, true);\r\n          this.setCaretPosition(newCaretPosition);\r\n\r\n          /**\r\n           * Calling onKeyPress\r\n           * We pass in the composed candidate instead of the decomposed one\r\n           * To prevent confusion for users\r\n           */\r\n          if (enableLayoutCandidatesKeyPress && typeof this.options.onKeyPress === 'function') {\r\n            this.options.onKeyPress(selectedCandidate, e);\r\n          }\r\n\r\n          if (typeof this.options.onChange === 'function') {\r\n            this.options.onChange(this.getInput(this.options.inputName, true), e);\r\n          }\r\n\r\n          /**\r\n           * Calling onChangeAll\r\n           */\r\n          if (typeof this.options.onChangeAll === 'function') this.options.onChangeAll(this.getAllInputs(), e);\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles clicks made to keyboard buttons\r\n   * @param  {string} button The button's layout name.\r\n   */\r\n  handleButtonClicked(button: string, e?: KeyboardHandlerEvent): void {\r\n    const { inputName = this.defaultName, debug } = this.options;\r\n    /**\r\n     * Ignoring placeholder buttons\r\n     */\r\n    if (button === '{//}') return;\r\n\r\n    /**\r\n     * Creating inputName if it doesn't exist\r\n     */\r\n    if (!this.input[inputName]) this.input[inputName] = '';\r\n\r\n    /**\r\n     * Perform an action before any input change\r\n     */\r\n    if (typeof this.options.beforeInputUpdate === 'function') {\r\n      this.options.beforeInputUpdate(this);\r\n    }\r\n\r\n    /**\r\n     * Calculating new input\r\n     */\r\n    const updatedInput = this.utilities.getUpdatedInput(\r\n      button,\r\n      this.input[inputName],\r\n      this.caretPosition,\r\n      this.caretPositionEnd\r\n    );\r\n\r\n    /**\r\n     * EDGE CASE: Check for whole input selection changes that will yield same updatedInput\r\n     */\r\n    if (this.utilities.isStandardButton(button) && this.activeInputElement) {\r\n      const isEntireInputSelection =\r\n        this.input[inputName] &&\r\n        this.input[inputName] === updatedInput &&\r\n        this.caretPosition === 0 &&\r\n        this.caretPositionEnd === updatedInput.length;\r\n\r\n      if (isEntireInputSelection) {\r\n        this.setInput('', this.options.inputName, true);\r\n        this.setCaretPosition(0);\r\n        this.activeInputElement.value = '';\r\n        this.activeInputElement.setSelectionRange(0, 0);\r\n        this.handleButtonClicked(button, e);\r\n        return;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Calling onKeyPress\r\n     */\r\n    if (typeof this.options.onKeyPress === 'function') this.options.onKeyPress(button, e);\r\n\r\n    if (\r\n      // If input will change as a result of this button press\r\n      this.input[inputName] !== updatedInput &&\r\n      // This pertains to the \"inputPattern\" option:\r\n      // If inputPattern isn't set\r\n      (!this.options.inputPattern ||\r\n        // Or, if it is set and if the pattern is valid - we proceed.\r\n        (this.options.inputPattern && this.inputPatternIsValid(updatedInput)))\r\n    ) {\r\n      /**\r\n       * If maxLength and handleMaxLength yield true, halting\r\n       */\r\n      if (this.options.maxLength && this.utilities.handleMaxLength(this.input, updatedInput)) {\r\n        return;\r\n      }\r\n\r\n      /**\r\n       * Updating input\r\n       */\r\n      const newInputValue = this.utilities.getUpdatedInput(\r\n        button,\r\n        this.input[inputName],\r\n        this.caretPosition,\r\n        this.caretPositionEnd,\r\n        true\r\n      );\r\n\r\n      this.setInput(newInputValue, this.options.inputName, true);\r\n\r\n      if (debug) console.log('Input changed:', this.getAllInputs());\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          'Caret at: ',\r\n          this.getCaretPosition(),\r\n          this.getCaretPositionEnd(),\r\n          `(${this.keyboardDOMClass})`,\r\n          e?.type\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Enforce syncInstanceInputs, if set\r\n       */\r\n      if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n\r\n      /**\r\n       * Calling onChange\r\n       */\r\n      if (typeof this.options.onChange === 'function')\r\n        this.options.onChange(this.getInput(this.options.inputName, true), e);\r\n\r\n      /**\r\n       * Calling onChangeAll\r\n       */\r\n      if (typeof this.options.onChangeAll === 'function') this.options.onChangeAll(this.getAllInputs(), e);\r\n\r\n      /**\r\n       * Check if this new input has candidates (suggested words)\r\n       */\r\n      if (e?.target && this.options.enableLayoutCandidates) {\r\n        const { candidateKey, candidateValue } = this.getInputCandidates(updatedInput);\r\n\r\n        if (candidateKey && candidateValue) {\r\n          this.showCandidatesBox(candidateKey, candidateValue, this.keyboardDOM);\r\n        } else {\r\n          this.candidateBox?.destroy();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * After a button is clicked the selection (if any) will disappear\r\n     * we should reflect this in our state, as applicable\r\n     */\r\n    if (this.caretPositionEnd && this.caretPosition !== this.caretPositionEnd) {\r\n      this.setCaretPosition(this.caretPositionEnd, this.caretPositionEnd);\r\n\r\n      if (this.activeInputElement) {\r\n        this.activeInputElement.setSelectionRange(this.caretPositionEnd, this.caretPositionEnd);\r\n      }\r\n\r\n      if (this.options.debug) {\r\n        console.log('Caret position aligned', this.caretPosition);\r\n      }\r\n    }\r\n\r\n    if (debug) {\r\n      console.log('Key pressed:', button);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get mouse hold state\r\n   */\r\n  getMouseHold() {\r\n    return this.isMouseHold;\r\n  }\r\n\r\n  /**\r\n   * Mark mouse hold state as set\r\n   */\r\n  setMouseHold(value: boolean) {\r\n    if (this.options.syncInstanceInputs) {\r\n      this.dispatch((instance: SimpleKeyboard) => {\r\n        instance.isMouseHold = value;\r\n      });\r\n    } else {\r\n      this.isMouseHold = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mousedown\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonMouseDown(button: string, e: KeyboardHandlerEvent): void {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseDownDefault) e.preventDefault();\r\n      if (this.options.stopMouseDownPropagation) e.stopPropagation();\r\n\r\n      /**\r\n       * Add active class\r\n       */\r\n      e.target.classList.add(this.activeButtonClass);\r\n    }\r\n\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n    if (this.holdTimeout) clearTimeout(this.holdTimeout);\r\n\r\n    /**\r\n     * @type {boolean} Whether the mouse is being held onKeyPress\r\n     */\r\n    this.setMouseHold(true);\r\n\r\n    /**\r\n     * @type {object} Time to wait until a key hold is detected\r\n     */\r\n    if (!this.options.disableButtonHold) {\r\n      this.holdTimeout = window.setTimeout(() => {\r\n        if (\r\n          (this.getMouseHold() &&\r\n            // TODO: This needs to be configurable through options\r\n            ((!button.includes('{') && !button.includes('}')) ||\r\n              button === '{delete}' ||\r\n              button === '{backspace}' ||\r\n              button === '{bksp}' ||\r\n              button === '{space}' ||\r\n              button === '{tab}')) ||\r\n          button === '{arrowright}' ||\r\n          button === '{arrowleft}' ||\r\n          button === '{arrowup}' ||\r\n          button === '{arrowdown}'\r\n        ) {\r\n          if (this.options.debug) console.log('Button held:', button);\r\n\r\n          this.handleButtonHold(button);\r\n        }\r\n        clearTimeout(this.holdTimeout);\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mouseup\r\n   */\r\n  handleButtonMouseUp(button?: string, e?: KeyboardHandlerEvent): void {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseUpDefault && e.preventDefault) e.preventDefault();\r\n      if (this.options.stopMouseUpPropagation && e.stopPropagation) e.stopPropagation();\r\n\r\n      /* istanbul ignore next */\r\n      const isKeyboard =\r\n        e.target === this.keyboardDOM ||\r\n        (e.target && this.keyboardDOM.contains(e.target)) ||\r\n        (this.candidateBox &&\r\n          this.candidateBox.candidateBoxElement &&\r\n          (e.target === this.candidateBox.candidateBoxElement ||\r\n            (e.target && this.candidateBox.candidateBoxElement.contains(e.target))));\r\n\r\n      /**\r\n       * On click outside, remove candidateBox\r\n       */\r\n      if (!isKeyboard && this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Remove active class\r\n     */\r\n    this.recurseButtons((buttonElement: Element) => {\r\n      buttonElement.classList.remove(this.activeButtonClass);\r\n    });\r\n\r\n    this.setMouseHold(false);\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * Calling onKeyReleased\r\n     */\r\n    if (button && typeof this.options.onKeyReleased === 'function') this.options.onKeyReleased(button, e);\r\n  }\r\n\r\n  /**\r\n   * Handles container mousedown\r\n   */\r\n  handleKeyboardContainerMouseDown(e: KeyboardHandlerEvent): void {\r\n    /**\r\n     * Handle event options\r\n     */\r\n    if (this.options.preventMouseDownDefault) e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Handles button hold\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonHold(button: string): void {\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * @type {object} Timeout dictating the speed of key hold iterations\r\n     */\r\n    this.holdInteractionTimeout = window.setTimeout(() => {\r\n      if (this.getMouseHold()) {\r\n        this.handleButtonClicked(button);\r\n        this.handleButtonHold(button);\r\n      } else {\r\n        clearTimeout(this.holdInteractionTimeout);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances (if you have several instances).\r\n   */\r\n  syncInstanceInputs(): void {\r\n    this.dispatch((instance: SimpleKeyboard) => {\r\n      instance.replaceInput(this.input);\r\n      instance.setCaretPosition(this.caretPosition, this.caretPositionEnd);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the keyboard’s input.\r\n   * @param {string} [inputName] optional - the internal input to select\r\n   */\r\n  clearInput(inputName: string = this.options.inputName || this.defaultName): void {\r\n    this.input[inputName] = '';\r\n\r\n    /**\r\n     * Reset caretPosition\r\n     */\r\n    this.setCaretPosition(0);\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Get the keyboard’s input (You can also get it from the onChange prop).\r\n   * @param  {string} [inputName] optional - the internal input to select\r\n   */\r\n  getInput(inputName: string = this.options.inputName || this.defaultName, skipSync = false): string {\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs && !skipSync) this.syncInstanceInputs();\r\n\r\n    if (this.options.rtl) {\r\n      // Remove existing control chars\r\n      const inputWithoutRTLControl = this.input[inputName].replace('\\u202B', '').replace('\\u202C', '');\r\n\r\n      return '\\u202B' + inputWithoutRTLControl + '\\u202C';\r\n    } else {\r\n      return this.input[inputName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all simple-keyboard inputs\r\n   */\r\n  getAllInputs(): KeyboardInput {\r\n    const output = {} as KeyboardInput;\r\n    const inputNames = Object.keys(this.input);\r\n\r\n    inputNames.forEach((inputName) => {\r\n      output[inputName] = this.getInput(inputName, true);\r\n    });\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Set the keyboard’s input.\r\n   * @param  {string} input the input value\r\n   * @param  {string} inputName optional - the internal input to select\r\n   */\r\n  setInput(input: string, inputName: string = this.options.inputName || this.defaultName, skipSync?: boolean): void {\r\n    // Reserved channel for focus restoration\r\n    if (inputName === '_focusRestore') {\r\n      const prev = this.input['_focusRestore'];\r\n      this.input['_focusRestore'] = input;\r\n\r\n      const mode = this.options.restoreFocusOnChange || 'content';\r\n\r\n      if (mode === 'never') return;\r\n\r\n      if (mode === 'content' && prev === input) {\r\n        return; // No content change → skip focus restore\r\n      }\r\n\r\n      this.keyboardDOM?.focus();\r\n      return;\r\n    }\r\n\r\n    this.input[inputName] = input;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (!skipSync && this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Replace the input object (`keyboard.input`)\r\n   * @param  {object} inputObj The input object\r\n   */\r\n  replaceInput(inputObj: KeyboardInput): void {\r\n    this.input = inputObj;\r\n  }\r\n\r\n  /**\r\n   * Set new option or modify existing ones after initialization.\r\n   * @param  {object} options The options to set\r\n   */\r\n  setOptions(options = {}): void {\r\n    const changedOptions = this.changedOptions(options);\r\n    this.options = Object.assign(this.options, options);\r\n\r\n    if (changedOptions.length) {\r\n      if (this.options.debug) {\r\n        console.log('changedOptions', changedOptions);\r\n      }\r\n\r\n      /**\r\n       * Some option changes require adjustments before re-render\r\n       */\r\n      this.onSetOptions(changedOptions);\r\n\r\n      /**\r\n       * Rendering\r\n       */\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detecting changes to non-function options\r\n   * This allows us to ascertain whether a button re-render is needed\r\n   */\r\n  changedOptions(newOptions: Partial<KeyboardOptions>): string[] {\r\n    return Object.keys(newOptions).filter(\r\n      (optionName) => JSON.stringify(newOptions[optionName]) !== JSON.stringify(this.options[optionName])\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Executing actions depending on changed options\r\n   * @param  {object} options The options to set\r\n   */\r\n  onSetOptions(changedOptions: string[] = []): void {\r\n    /**\r\n     * Changed: layoutName\r\n     */\r\n    if (changedOptions.includes('layoutName')) {\r\n      /**\r\n       * Reset candidateBox\r\n       */\r\n      if (this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Changed: layoutCandidatesPageSize, layoutCandidates\r\n     */\r\n    if (changedOptions.includes('layoutCandidatesPageSize') || changedOptions.includes('layoutCandidates')) {\r\n      /**\r\n       * Reset and recreate candidateBox\r\n       */\r\n      if (this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n        this.candidateBox = new CandidateBox({\r\n          utilities: this.utilities,\r\n          options: this.options,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all keyboard rows and reset keyboard values.\r\n   * Used internally between re-renders.\r\n   */\r\n  resetRows(): void {\r\n    if (this.keyboardRowsDOM) {\r\n      this.keyboardRowsDOM.remove();\r\n    }\r\n\r\n    this.keyboardDOM.className = this.keyboardDOMClass;\r\n    this.keyboardDOM.setAttribute('data-skInstance', this.currentInstanceName);\r\n    this.buttonElements = {};\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\r\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\r\n   */\r\n  // eslint-disable-next-line no-unused-vars\r\n  dispatch(callback: (instance: SimpleKeyboard, key?: string) => void): void {\r\n    if (!(window as SKWindow)['SimpleKeyboardInstances']) {\r\n      console.warn(`SimpleKeyboardInstances is not defined. Dispatch cannot be called.`);\r\n      throw new Error('INSTANCES_VAR_ERROR');\r\n    }\r\n\r\n    return Object.keys((window as SKWindow)['SimpleKeyboardInstances']).forEach((key) => {\r\n      callback((window as SKWindow)['SimpleKeyboardInstances'][key], key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  addButtonTheme(buttons: string, className: string): void {\r\n    if (!className || !buttons) return;\r\n\r\n    buttons.split(' ').forEach((button) => {\r\n      className.split(' ').forEach((classNameItem) => {\r\n        if (!this.options.buttonTheme) this.options.buttonTheme = [];\r\n\r\n        let classNameFound = false;\r\n\r\n        /**\r\n         * If class is already defined, we add button to class definition\r\n         */\r\n        this.options.buttonTheme.map((buttonTheme) => {\r\n          if (buttonTheme?.class.split(' ').includes(classNameItem)) {\r\n            classNameFound = true;\r\n\r\n            const buttonThemeArray = buttonTheme.buttons.split(' ');\r\n            if (!buttonThemeArray.includes(button)) {\r\n              classNameFound = true;\r\n              buttonThemeArray.push(button);\r\n              buttonTheme.buttons = buttonThemeArray.join(' ');\r\n            }\r\n          }\r\n          return buttonTheme;\r\n        });\r\n\r\n        /**\r\n         * If class is not defined, we create a new entry\r\n         */\r\n        if (!classNameFound) {\r\n          this.options.buttonTheme.push({\r\n            class: classNameItem,\r\n            buttons: buttons,\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  removeButtonTheme(buttons: string, className: string): void {\r\n    /**\r\n     * When called with empty parameters, remove all button themes\r\n     */\r\n    if (!buttons && !className) {\r\n      this.options.buttonTheme = [];\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * If buttons are passed and buttonTheme has items\r\n     */\r\n    if (buttons && Array.isArray(this.options.buttonTheme) && this.options.buttonTheme.length) {\r\n      const buttonArray = buttons.split(' ');\r\n      buttonArray.forEach((button) => {\r\n        this.options?.buttonTheme?.map((buttonTheme, index) => {\r\n          /**\r\n           * If className is set, we affect the buttons only for that class\r\n           * Otherwise, we afect all classes\r\n           */\r\n          if ((buttonTheme && className && className.includes(buttonTheme.class)) || !className) {\r\n            const filteredButtonArray = buttonTheme?.buttons.split(' ').filter((item) => item !== button);\r\n\r\n            /**\r\n             * If buttons left, return them, otherwise, remove button Theme\r\n             */\r\n            if (buttonTheme && filteredButtonArray?.length) {\r\n              buttonTheme.buttons = filteredButtonArray.join(' ');\r\n            } else {\r\n              this.options.buttonTheme?.splice(index, 1);\r\n              buttonTheme = null;\r\n            }\r\n          }\r\n\r\n          return buttonTheme;\r\n        });\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\r\n   * @param  {string} button The button layout name to select\r\n   */\r\n  getButtonElement(button: string): KeyboardElement | KeyboardElement[] | undefined {\r\n    let output;\r\n\r\n    const buttonArr = this.buttonElements[button];\r\n    if (buttonArr) {\r\n      if (buttonArr.length > 1) {\r\n        output = buttonArr;\r\n      } else {\r\n        output = buttonArr[0];\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * This handles the \"inputPattern\" option\r\n   * by checking if the provided inputPattern passes\r\n   */\r\n  inputPatternIsValid(inputVal: string): boolean {\r\n    const inputPatternRaw = this.options.inputPattern;\r\n    let inputPattern;\r\n\r\n    /**\r\n     * Check if input pattern is global or targeted to individual inputs\r\n     */\r\n    if (inputPatternRaw instanceof RegExp) {\r\n      inputPattern = inputPatternRaw;\r\n    } else {\r\n      inputPattern = inputPatternRaw[this.options.inputName || this.defaultName];\r\n    }\r\n\r\n    if (inputPattern && inputVal) {\r\n      const didInputMatch = inputPattern.test(inputVal);\r\n\r\n      if (this.options.debug) {\r\n        console.log(`inputPattern (\"${inputPattern}\"): ${didInputMatch ? 'passed' : 'did not pass!'}`);\r\n      }\r\n\r\n      return didInputMatch;\r\n    } else {\r\n      /**\r\n       * inputPattern doesn't seem to be set for the current input, or input is empty. Pass.\r\n       */\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the removal of event listers before initializing new ones\r\n   * This is useful when changing options that require a fresh set of event listeners\r\n   */\r\n\r\n  removeEventListeners(): void {\r\n    document.removeEventListener('keydown', this.handleKeyDownBound);\r\n    document.removeEventListener('keyup', this.handleKeyUpBound);\r\n    document.removeEventListener('mouseup', this.handleMouseUpBound);\r\n    document.removeEventListener('touchend', this.handleTouchEndBound);\r\n    document.removeEventListener('select', this.handleSelectBound);\r\n\r\n    if (this.options.updateCaretOnSelectionChange) {\r\n      document.removeEventListener('selectionchange', this.handleSelectionChangeBound);\r\n    }\r\n\r\n    this.listenersAdded = false; // Allow re-adding if necessary\r\n  }\r\n  /**\r\n   * Handles simple-keyboard event listeners\r\n   */\r\n  setEventListeners(): void {\r\n    /**\r\n     * Only first instance should set the event listeners\r\n     */\r\n    if (this.isFirstKeyboardInstance || !this.allKeyboardInstances) {\r\n      if (this.options.debug) {\r\n        console.log(`Caret handling started (${this.keyboardDOMClass})`);\r\n      }\r\n\r\n      // LPJr: Prevent duplicate listeners\r\n      if (this.listenersAdded) {\r\n        return;\r\n      }\r\n\r\n      // Ensure existing listeners are removed before adding new ones\r\n      this.removeEventListeners();\r\n\r\n      // LPJr: added named event handlers instead of anonymous functions\r\n      this.handleKeyDownBound = this.handleKeyDown.bind(this);\r\n      this.handleInternalKeyNavBound = this.handleInternalKeyNav.bind(this);\r\n      document.addEventListener('keydown', this.handleInternalKeyNavBound as EventListener);\r\n\r\n      this.handleKeyUpBound = this.handleKeyUp.bind(this);\r\n      this.handleMouseUpBound = this.handleMouseUp.bind(this);\r\n      this.handleTouchEndBound = () => this.handleTouchEnd(this);\r\n      this.handleSelectBound = () => this.handleSelect(this);\r\n      this.handleSelectionChangeBound = this.handleSelectionChange.bind(this);\r\n\r\n      document.addEventListener('keydown', this.handleKeyDownBound);\r\n      document.addEventListener('keyup', this.handleKeyUpBound);\r\n      document.addEventListener('mouseup', this.handleMouseUpBound);\r\n      document.addEventListener('touchend', this.handleTouchEndBound);\r\n\r\n      if (this.options.updateCaretOnSelectionChange) {\r\n        document.addEventListener('selectionchange', this.handleSelectionChangeBound);\r\n      }\r\n\r\n      document.addEventListener('select', this.handleSelectBound);\r\n\r\n      // Mark listeners as added to prevent duplicates\r\n      this.listenersAdded = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Debug Logger\r\n   */\r\n  logEventType(tag: string, event: Event) {\r\n    console.log(`[${tag}] Event type:`, event.type, '→', event.constructor.name);\r\n  }\r\n\r\n  isSupportedEvent(event: Event): boolean {\r\n    return (\r\n      event instanceof KeyboardEvent ||\r\n      event instanceof MouseEvent ||\r\n      event instanceof TouchEvent ||\r\n      event instanceof PointerEvent\r\n    );\r\n  }\r\n\r\n  handleGetButtonAndAnnounce(event: KeyboardHandlerEvent): void {\r\n    if (!this.isSupportedEvent(event)) return;\r\n    this.getButtonAndAnnounce(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyUp\r\n   */\r\n  handleKeyUp(event: KeyboardHandlerEvent): void {\r\n    // 1. CandidateBox owns key handling if open\r\n    if (CandidateBox.isOpen) {\r\n      return;\r\n    }\r\n\r\n    // 2. Normalize key\r\n    const key = event.key;\r\n\r\n    // 3. Prevent default only for printable chars when configured\r\n    const bypassKeys = new Set([\r\n      'Tab',\r\n      'ArrowUp',\r\n      'ArrowDown',\r\n      'ArrowLeft',\r\n      'ArrowRight',\r\n      'Enter',\r\n      'Escape',\r\n      ' ',\r\n      'Spacebar',\r\n    ]);\r\n\r\n    if (this.options.physicalKeyboardHighlightPreventDefault && event instanceof KeyboardEvent) {\r\n      const isPrintable = key.length === 1;\r\n      if (!bypassKeys.has(key) && isPrintable) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n\r\n    // 4. Caret handling\r\n    this.caretEventHandler(event);\r\n\r\n    // 5. Release physical highlight\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyUp(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyDown\r\n   */\r\n  handleKeyDown(event: KeyboardHandlerEvent): void {\r\n    // 1. CandidateBox takes over completely when open\r\n    if (CandidateBox.isOpen) {\r\n      return;\r\n    }\r\n\r\n    // 2. Normalize key values (Spacebar → ' ')\r\n    const key = event.key;\r\n\r\n    // 3. Prevent browser defaults for printable keys if highlightPreventDefault is enabled\r\n    const bypassKeys = new Set([\r\n      'Tab',\r\n      'ArrowUp',\r\n      'ArrowDown',\r\n      'ArrowLeft',\r\n      'ArrowRight',\r\n      'Enter',\r\n      'Escape',\r\n      ' ',\r\n      'Spacebar',\r\n    ]);\r\n\r\n    if (this.options.physicalKeyboardHighlightPreventDefault && event instanceof KeyboardEvent) {\r\n      const isPrintable = key.length === 1; // single character like a, 1, !\r\n      if (!bypassKeys.has(key) && isPrintable) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n\r\n    // 4. Activation keys (Enter, Space)\r\n    if (event instanceof KeyboardEvent && key === 'Enter' && this.navEngaged) {\r\n      const active = this.keyboardDOM.querySelector('.hg-button[aria-selected=\"true\"]') as HTMLElement;\r\n      if (active?.hasAttribute('data-skbtn')) {\r\n        event.preventDefault(); // Prevent form submission (Enter) or scroll (Space)\r\n        const buttonLabel = active.getAttribute('data-skbtn');\r\n        if (buttonLabel) {\r\n          this.handleButtonClicked(buttonLabel, event);\r\n        }\r\n      }\r\n    }\r\n\r\n    // 5. Log the event\r\n    this.logEventType('Keyboard', event);\r\n\r\n    // 6. Sync physical highlight\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyDown(event);\r\n    }\r\n\r\n    // 7. Announce keys to assistive tech\r\n    this.handleGetButtonAndAnnounce(event);\r\n  }\r\n\r\n  /**\r\n   * Check if the physical key pressed matches the button that would be triggered\r\n   * by the physical keyboard system. This prevents double triggering.\r\n   */\r\n  isPhysicalKeyMatchingButton(event: KeyboardEvent, buttonLabel: string): boolean {\r\n    // For space keys, only match if we're on the spacebar button\r\n    if (event.key === ' ' || event.key === 'Spacebar') {\r\n      return buttonLabel === '{space}' || buttonLabel.toLowerCase().includes('space');\r\n    }\r\n\r\n    // For other keys, we need to check if the physical key would trigger this exact button\r\n    // This is a simplified check - in reality, the PhysicalKeyboard service has complex mapping logic\r\n    // But for our use case, we mainly care about preventing space key double-triggering\r\n\r\n    // For standard alphanumeric characters\r\n    if (event.key.length === 1) {\r\n      return buttonLabel === event.key.toLowerCase() || buttonLabel === event.key.toUpperCase();\r\n    }\r\n\r\n    // For special keys like Enter\r\n    if (event.key === 'Enter') {\r\n      return buttonLabel === '{enter}' || buttonLabel.toLowerCase().includes('enter');\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getAnnounceLabel(pressedKey: string): string | null {\r\n    const isNamedKey = this.NAMED_KEYS_TO_ANNOUNCE.has(pressedKey);\r\n    const isPrintable = pressedKey.length === 1;\r\n\r\n    const focused = document.activeElement as HTMLElement;\r\n    const focusedLabel =\r\n      focused?.getAttribute('aria-label') || focused?.textContent?.trim() || focused?.getAttribute('data-skbtn');\r\n\r\n    if (isNamedKey && focusedLabel && focusedLabel !== pressedKey) {\r\n      return focusedLabel;\r\n    }\r\n\r\n    if (!isPrintable && !isNamedKey) return null;\r\n\r\n    return this.NAMED_READABLE[pressedKey] || pressedKey;\r\n  }\r\n\r\n  /**\r\n   * Determine if announcements should be suppressed based on current context\r\n   */\r\n  shouldSuppressAnnouncements(): boolean {\r\n    // Always respect the useLiveRegion setting\r\n    if (!this.options.useLiveRegion) return true;\r\n\r\n    // Respect announcement mode\r\n    const announceMode = this.options.liveRegionAnnounceMode || 'actions';\r\n    if (announceMode === 'none') return true;\r\n\r\n    // Check if we should suppress when input is focused\r\n    if (this.options.suppressAnnouncementsOnInputFocus) {\r\n      const activeElement = document.activeElement;\r\n      if (activeElement && (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA')) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Get the content result for a button press (for content-mode announcements)\r\n   */\r\n  getContentForButton(buttonLabel: string): string | null {\r\n    // Handle special buttons\r\n    if (buttonLabel === '{space}') return 'space';\r\n    if (buttonLabel === '{enter}') return 'new line';\r\n    if (buttonLabel === '{bksp}' || buttonLabel === '{backspace}') return 'deleted';\r\n    if (buttonLabel === '{tab}') return 'tab';\r\n    if (buttonLabel === '{delete}') return 'deleted';\r\n\r\n    // For regular character buttons, return the character itself\r\n    if (buttonLabel.length === 1) {\r\n      return buttonLabel;\r\n    }\r\n\r\n    // For other special buttons, try to get display name\r\n    const displayName = this.utilities.getButtonDisplayName(\r\n      buttonLabel,\r\n      this.options.display,\r\n      this.options.mergeDisplay\r\n    );\r\n\r\n    return displayName !== buttonLabel ? displayName : null;\r\n  }\r\n\r\n  /**\r\n   * Get the Button Element for Live Region announcements\r\n   * Backward-compatible entry point; now internally gated.\r\n   */\r\n  getButtonAndAnnounce(event: Event): void {\r\n    if (!this.isSupportedEvent(event)) return;\r\n\r\n    // Check if announcements should be suppressed\r\n    if (this.shouldSuppressAnnouncements()) return;\r\n\r\n    let pressedKey: string | null = null;\r\n    let buttonLabel: string | null = null;\r\n\r\n    // 1. KeyboardEvent path\r\n    if (event instanceof KeyboardEvent) {\r\n      if (event.isComposing || event.repeat) return;\r\n      pressedKey = event.key;\r\n    }\r\n\r\n    // 2. Pointer/touch path\r\n    if (event instanceof MouseEvent || event instanceof PointerEvent || event instanceof TouchEvent) {\r\n      const target = (event.target as HTMLElement)?.closest?.('[data-skbtn]');\r\n      if (!target || !this.keyboardDOM.contains(target)) return;\r\n\r\n      buttonLabel = target.getAttribute('data-skbtn');\r\n      pressedKey = target.getAttribute('aria-label') || target.textContent?.trim() || buttonLabel;\r\n    }\r\n\r\n    if (!pressedKey) return;\r\n\r\n    const announceMode = this.options.liveRegionAnnounceMode || 'actions';\r\n\r\n    if (announceMode === 'none') return;\r\n\r\n    // Announce button action\r\n    if (announceMode === 'actions' || announceMode === 'both') {\r\n      const actionLabel = this.getAnnounceLabel(pressedKey);\r\n      if (actionLabel) {\r\n        this.announceLiveRegion(actionLabel, 'pressed');\r\n      }\r\n    }\r\n\r\n    // Announce content result\r\n    if ((announceMode === 'content' || announceMode === 'both') && buttonLabel) {\r\n      const contentResult = this.getContentForButton(buttonLabel);\r\n      if (contentResult) {\r\n        // Small delay to avoid conflicts with action announcement\r\n        setTimeout(\r\n          () => {\r\n            this.announceLiveRegion(contentResult, '');\r\n          },\r\n          announceMode === 'both' ? 200 : 0\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * WCAG 2.1 Live Region for announcing key focus changes\r\n   * This is used to announce key focus changes for screen readers\r\n   */\r\n\r\n  announceLiveRegion(keyLabel: string, context = 'pressed'): void {\r\n    if (!this.options.useLiveRegion || !this.announcerEl) return;\r\n\r\n    if (this.ariaLiveTimer) clearTimeout(this.ariaLiveTimer);\r\n\r\n    this.ariaLiveTimer = setTimeout(() => {\r\n      if (this.announcerEl) {\r\n        this.announcerEl.textContent = '';\r\n        requestAnimationFrame(() => {\r\n          if (this.announcerEl) {\r\n            this.announcerEl.textContent = `Key ${keyLabel} ${context}`;\r\n          }\r\n        });\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: Internal Key Navigation\r\n   */\r\n  handleInternalKeyNav(event: KeyboardEvent): void {\r\n    if (!(event instanceof KeyboardEvent)) return;\r\n    if (!this.keyboardDOM?.offsetParent) return;\r\n    if (CandidateBox.isOpen) return;\r\n\r\n    // Gate arrow key handling to when keyboard is not active surface\r\n    if (this.options.activeSurface !== 'keyboard') return;\r\n\r\n    const { key } = event;\r\n\r\n    if (!['ArrowRight', 'ArrowLeft', 'ArrowDown', 'ArrowUp'].includes(key)) return;\r\n\r\n    event.preventDefault();\r\n\r\n    const focused = this.keyboardDOM.querySelector('[aria-selected=\"true\"]') as HTMLElement;\r\n\r\n    // Find the currently focused button\r\n    if (!focused || !focused.hasAttribute('data-skbtn')) return;\r\n\r\n    // Implement directional logic\r\n    let nextButton: HTMLElement | null = null;\r\n\r\n    switch (key) {\r\n      case 'ArrowRight':\r\n        nextButton = this.findNextButton(focused);\r\n        break;\r\n      case 'ArrowLeft':\r\n        nextButton = this.findPreviousButton(focused);\r\n        break;\r\n      case 'ArrowDown':\r\n        nextButton = this.findVerticalButton(focused, 'down');\r\n        break;\r\n      case 'ArrowUp':\r\n        nextButton = this.findVerticalButton(focused, 'up');\r\n        break;\r\n    }\r\n\r\n    if (nextButton) {\r\n      focused.setAttribute('aria-selected', 'false');\r\n      nextButton.setAttribute('aria-selected', 'true');\r\n      this.keyboardDOM.setAttribute('aria-activedescendant', nextButton.id);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find the next button in the keyboard layout\r\n   */\r\n  findNextButton(current: HTMLElement): HTMLElement | null {\r\n    const allButtons = Array.from(this.keyboardDOM.querySelectorAll('[data-skBtn]')) as HTMLElement[];\r\n\r\n    const idx = allButtons.indexOf(current);\r\n    return allButtons[idx + 1] || null;\r\n  }\r\n\r\n  /**\r\n   * Find the previous button in the keyboard layout\r\n   */\r\n  findPreviousButton(current: HTMLElement): HTMLElement | null {\r\n    const allButtons = Array.from(this.keyboardDOM.querySelectorAll('[data-skBtn]')) as HTMLElement[];\r\n\r\n    const idx = allButtons.indexOf(current);\r\n    return allButtons[idx - 1] || null;\r\n  }\r\n\r\n  /**\r\n   * Find the vertically closest button above or below the current one.\r\n   */\r\n  findVerticalButton(current: HTMLElement, direction: 'up' | 'down'): HTMLElement | null {\r\n    const rows = Array.from(this.keyboardDOM.querySelectorAll('.hg-row')) as HTMLElement[];\r\n    const currentRow = current.closest('.hg-row') as HTMLElement | null;\r\n    if (!currentRow) return null;\r\n\r\n    const rowIndex = rows.indexOf(currentRow);\r\n    const targetIndex = direction === 'up' ? rowIndex - 1 : rowIndex + 1;\r\n    const targetRow = rows[targetIndex];\r\n    if (!targetRow) return null; // already at top or bottom\r\n\r\n    const currentRect = current.getBoundingClientRect();\r\n    const currentCenterX = currentRect.left + currentRect.width / 2;\r\n\r\n    const candidates = Array.from(targetRow.querySelectorAll<HTMLElement>('[data-skBtn]'));\r\n    if (!candidates.length) return null;\r\n\r\n    // Find the key in target row closest in X to the current key\r\n    let closest = candidates[0];\r\n    let minDelta = Number.POSITIVE_INFINITY;\r\n\r\n    for (const el of candidates) {\r\n      const rect = el.getBoundingClientRect();\r\n      const centerX = rect.left + rect.width / 2;\r\n      const delta = Math.abs(centerX - currentCenterX);\r\n      if (delta < minDelta) {\r\n        minDelta = delta;\r\n        closest = el;\r\n      }\r\n    }\r\n\r\n    return closest;\r\n  }\r\n\r\n  /**\r\n   * Event Handler: MouseUp\r\n   */\r\n  handleMouseUp(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n\r\n    this.logEventType('Mouse', event);\r\n\r\n    this.handleGetButtonAndAnnounce(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: TouchEnd\r\n   */\r\n  /* istanbul ignore next */\r\n  handleTouchEnd(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n\r\n    this.logEventType('Touch', event);\r\n\r\n    this.handleGetButtonAndAnnounce(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: Select\r\n   */\r\n  /* istanbul ignore next */\r\n  handleSelect(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: SelectionChange\r\n   */\r\n  /* istanbul ignore next */\r\n  handleSelectionChange(event: KeyboardHandlerEvent): void {\r\n    /**\r\n     * Firefox is not reporting the correct caret position through this event\r\n     * https://github.com/hodgef/simple-keyboard/issues/1839\r\n     */\r\n    if (navigator.userAgent.includes('Firefox')) {\r\n      return;\r\n    }\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Called by {@link setEventListeners} when an event that warrants a cursor position update is triggered\r\n   */\r\n  caretEventHandler(event: KeyboardHandlerEvent): void {\r\n    const target = event?.target as HTMLElement | null;\r\n\r\n    let targetTagName = '';\r\n    if (target?.tagName) {\r\n      targetTagName = target.tagName.toLowerCase();\r\n    }\r\n    this.dispatch((instance) => {\r\n      let isKeyboard =\r\n        event.target === instance.keyboardDOM || (event.target && instance.keyboardDOM.contains(event.target));\r\n\r\n      /**\r\n       * If syncInstanceInputs option is enabled, make isKeyboard match any instance\r\n       * not just the current one\r\n       */\r\n      if (this.options.syncInstanceInputs && Array.isArray(event.path)) {\r\n        isKeyboard = event.path.some((item: HTMLElement) => item?.hasAttribute?.('data-skInstance'));\r\n      }\r\n\r\n      if (\r\n        (targetTagName === 'textarea' ||\r\n          (targetTagName === 'input' && ['text', 'search', 'url', 'tel', 'password'].includes(event.target.type))) &&\r\n        !instance.options.disableCaretPositioning\r\n      ) {\r\n        /**\r\n         * Tracks current cursor position\r\n         * As keys are pressed, text will be added/removed at that position within the input.\r\n         */\r\n        let selectionStart = event.target.selectionStart;\r\n        let selectionEnd = event.target.selectionEnd;\r\n\r\n        if (instance.options.rtl) {\r\n          selectionStart = instance.utilities.getRtlOffset(selectionStart, instance.getInput());\r\n          selectionEnd = instance.utilities.getRtlOffset(selectionEnd, instance.getInput());\r\n        }\r\n\r\n        instance.setCaretPosition(selectionStart, selectionEnd);\r\n\r\n        /**\r\n         * Tracking current input in order to handle caret positioning edge cases\r\n         */\r\n        instance.activeInputElement = event.target;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(\r\n            'Caret at: ',\r\n            instance.getCaretPosition(),\r\n            instance.getCaretPositionEnd(),\r\n            event && event.target.tagName.toLowerCase(),\r\n            `(${instance.keyboardDOMClass})`,\r\n            event?.type\r\n          );\r\n        }\r\n      } else if ((instance.options.disableCaretPositioning || !isKeyboard) && event?.type !== 'selectionchange') {\r\n        /**\r\n         * If we toggled off disableCaretPositioning, we must ensure caretPosition doesn't persist once reactivated.\r\n         */\r\n        instance.setCaretPosition(null);\r\n\r\n        /**\r\n         * Resetting activeInputElement\r\n         */\r\n        instance.activeInputElement = null;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(`Caret position reset due to \"${event?.type}\" event`, event);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute an operation on each button\r\n   */\r\n  recurseButtons(fn: any): void {\r\n    if (!fn) return;\r\n\r\n    Object.keys(this.buttonElements).forEach((buttonName) => this.buttonElements[buttonName].forEach(fn));\r\n  }\r\n\r\n  /**\r\n   * Destroy keyboard listeners and DOM elements\r\n   */\r\n  destroy(): void {\r\n    if (this.options.debug) console.log(`Destroying simple-keyboard instance: ${this.currentInstanceName}`);\r\n\r\n    const { physicalKeyboardHighlightPreventDefault = false } = this.options;\r\n\r\n    /**\r\n     * Remove document listeners\r\n     */\r\n    document.removeEventListener('keyup', this.handleKeyUpBound);\r\n    document.removeEventListener('keydown', this.handleKeyDownBound);\r\n    document.removeEventListener('mouseup', this.handleMouseUpBound);\r\n    document.removeEventListener('touchend', this.handleTouchEndBound);\r\n    document.removeEventListener('select', this.handleSelectBound);\r\n    document.removeEventListener('keydown', this.handleInternalKeyNavBound);\r\n\r\n    // selectionchange is causing caret update issues on Chrome\r\n    // https://github.com/hodgef/simple-keyboard/issues/2346\r\n    if (this.options.updateCaretOnSelectionChange) {\r\n      document.removeEventListener('selectionchange', this.handleSelectionChangeBound);\r\n    }\r\n\r\n    document.onpointerup = null;\r\n    document.ontouchend = null;\r\n    document.ontouchcancel = null;\r\n    document.onmouseup = null;\r\n\r\n    /**\r\n     * Remove buttons\r\n     */\r\n    const deleteButton = (buttonElement: KeyboardElement | null) => {\r\n      if (buttonElement) {\r\n        buttonElement.onpointerdown = null;\r\n        buttonElement.onpointerup = null;\r\n        buttonElement.onpointercancel = null;\r\n        buttonElement.ontouchstart = null;\r\n        buttonElement.ontouchend = null;\r\n        buttonElement.ontouchcancel = null;\r\n        buttonElement.onclick = null;\r\n        buttonElement.onmousedown = null;\r\n        buttonElement.onmouseup = null;\r\n\r\n        buttonElement.remove();\r\n        buttonElement = null;\r\n      }\r\n    };\r\n\r\n    this.recurseButtons(deleteButton);\r\n\r\n    /**\r\n     * Remove wrapper events\r\n     */\r\n    this.keyboardDOM.onpointerdown = null;\r\n    this.keyboardDOM.ontouchstart = null;\r\n    this.keyboardDOM.onmousedown = null;\r\n\r\n    /**\r\n     * Clearing keyboard rows\r\n     */\r\n    this.resetRows();\r\n\r\n    /**\r\n     * Candidate box\r\n     */\r\n    if (this.candidateBox) {\r\n      this.candidateBox.destroy();\r\n      this.candidateBox = null;\r\n    }\r\n\r\n    /**\r\n     * Clearing activeInputElement\r\n     */\r\n    this.activeInputElement = null;\r\n\r\n    /**\r\n     * Removing instance attribute\r\n     */\r\n    this.keyboardDOM.removeAttribute('data-skInstance');\r\n\r\n    /**\r\n     * Clearing keyboardDOM\r\n     */\r\n    this.keyboardDOM.innerHTML = '';\r\n\r\n    /**\r\n     * Remove instance\r\n     */\r\n    (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName] = null;\r\n    delete (window as SKWindow)['SimpleKeyboardInstances'][this.currentInstanceName];\r\n\r\n    /**\r\n     * Reset initialized flag\r\n     */\r\n    this.initialized = false;\r\n  }\r\n\r\n  /**\r\n   * Process buttonTheme option\r\n   */\r\n  getButtonThemeClasses(button: string): string[] {\r\n    const buttonTheme = this.options.buttonTheme;\r\n    let buttonClasses: string[] = [];\r\n\r\n    if (Array.isArray(buttonTheme)) {\r\n      buttonTheme.forEach((themeObj) => {\r\n        if (\r\n          themeObj &&\r\n          themeObj.class &&\r\n          typeof themeObj.class === 'string' &&\r\n          themeObj.buttons &&\r\n          typeof themeObj.buttons === 'string'\r\n        ) {\r\n          const themeObjClasses = themeObj.class.split(' ');\r\n          const themeObjButtons = themeObj.buttons.split(' ');\r\n\r\n          if (themeObjButtons.includes(button)) {\r\n            buttonClasses = [...buttonClasses, ...themeObjClasses];\r\n          }\r\n        } else {\r\n          console.warn(`Incorrect \"buttonTheme\". Please check the documentation.`, themeObj);\r\n        }\r\n      });\r\n    }\r\n\r\n    return buttonClasses;\r\n  }\r\n\r\n  /**\r\n   * Process buttonAttributes option\r\n   */\r\n  setDOMButtonAttributes(button: string, callback: any): void {\r\n    const buttonAttributes = this.options.buttonAttributes;\r\n\r\n    if (Array.isArray(buttonAttributes)) {\r\n      buttonAttributes.forEach((attrObj) => {\r\n        if (\r\n          attrObj.attribute &&\r\n          typeof attrObj.attribute === 'string' &&\r\n          attrObj.value &&\r\n          typeof attrObj.value === 'string' &&\r\n          attrObj.buttons &&\r\n          typeof attrObj.buttons === 'string'\r\n        ) {\r\n          const attrObjButtons = attrObj.buttons.split(' ');\r\n\r\n          if (attrObjButtons.includes(button)) {\r\n            callback(attrObj.attribute, attrObj.value);\r\n          }\r\n        } else {\r\n          console.warn(`Incorrect \"buttonAttributes\". Please check the documentation.`, attrObj);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onTouchDeviceDetected() {\r\n    /**\r\n     * Processing autoTouchEvents\r\n     */\r\n    this.processAutoTouchEvents();\r\n\r\n    /**\r\n     * Disabling contextual window on touch devices\r\n     */\r\n    this.disableContextualWindow();\r\n  }\r\n\r\n  /**\r\n   * Disabling contextual window for hg-button\r\n   */\r\n  /* istanbul ignore next */\r\n  disableContextualWindow() {\r\n    window.oncontextmenu = (event: KeyboardHandlerEvent) => {\r\n      if (event.target.classList.contains('hg-button')) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process autoTouchEvents option\r\n   */\r\n  processAutoTouchEvents() {\r\n    if (this.options.autoUseTouchEvents) {\r\n      this.options.useTouchEvents = true;\r\n\r\n      if (this.options.debug) {\r\n        console.log(`autoUseTouchEvents: Touch device detected, useTouchEvents enabled.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n   */\r\n  onInit() {\r\n    if (this.options.debug) {\r\n      console.log(`${this.keyboardDOMClass} Initialized`);\r\n    }\r\n\r\n    //Initialize Announcer\r\n    this.announcerEl = this.ensureAnnouncer(this.keyboardDOM);\r\n\r\n    /**\r\n     * setEventListeners\r\n     */\r\n    this.setEventListeners();\r\n\r\n    // Handle autoFocus after full initialization - ensures DOM is complete and painted\r\n    if (this.options.autoFocus) {\r\n      this.handleAutoFocus();\r\n    }\r\n\r\n    if (typeof this.options.onInit === 'function') this.options.onInit(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeFirstRender() {\r\n    /**\r\n     * Performing actions when touch device detected\r\n     */\r\n    if (this.utilities.isTouchDevice()) {\r\n      this.onTouchDeviceDetected();\r\n    }\r\n\r\n    if (typeof this.options.beforeFirstRender === 'function') this.options.beforeFirstRender(this);\r\n\r\n    /**\r\n     * Notify about PointerEvents usage\r\n     */\r\n    if (\r\n      this.isFirstKeyboardInstance &&\r\n      this.utilities.pointerEventsSupported() &&\r\n      !this.options.useTouchEvents &&\r\n      !this.options.useMouseEvents\r\n    ) {\r\n      if (this.options.debug) {\r\n        console.log('Using PointerEvents as it is supported by this browser');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Notify about touch events usage\r\n     */\r\n    if (this.options.useTouchEvents) {\r\n      if (this.options.debug) {\r\n        console.log('useTouchEvents has been enabled. Only touch events will be used.');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeRender() {\r\n    if (typeof this.options.beforeRender === 'function') this.options.beforeRender(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n   */\r\n  onRender() {\r\n    if (typeof this.options.onRender === 'function') this.options.onRender(this);\r\n\r\n    this.announcerEl = this.ensureAnnouncer(this.keyboardDOM);\r\n  }\r\n\r\n  /**\r\n   * Handles automatic focus to the first key when autoFocus option is enabled\r\n   * Called from onInit to ensure DOM is fully complete and painted\r\n   */\r\n  handleAutoFocus(): void {\r\n    setTimeout(() => {\r\n      requestAnimationFrame(() => {\r\n        const firstActive = this.keyboardDOM.querySelector('[data-skBtn][aria-selected=\"true\"]') as HTMLElement;\r\n\r\n        if (firstActive) {\r\n          if (this.options.debug) {\r\n            console.log('AutoFocus: First keyboard button already active');\r\n          }\r\n        } else {\r\n          // Fallback: just grab the first button\r\n          const fallbackButton = this.keyboardDOM.querySelector('[data-skBtn]') as HTMLElement;\r\n\r\n          if (fallbackButton) {\r\n            fallbackButton.setAttribute('aria-selected', 'true');\r\n            if (this.options.debug) {\r\n              console.log('AutoFocus: Activated fallback keyboard button');\r\n            }\r\n          } else if (this.options.debug) {\r\n            console.warn('AutoFocus: No keyboard buttons found to activate!');\r\n          }\r\n        }\r\n      });\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once all modules have been loaded\r\n   */\r\n  onModulesLoaded() {\r\n    if (typeof this.options.onModulesLoaded === 'function') this.options.onModulesLoaded(this);\r\n  }\r\n\r\n  /**\r\n   * Register module\r\n   */\r\n  registerModule = (name: string, initCallback: any) => {\r\n    if (!this.modules[name]) this.modules[name] = {};\r\n\r\n    initCallback(this.modules[name]);\r\n  };\r\n\r\n  /**\r\n   * Load modules\r\n   */\r\n  loadModules() {\r\n    if (Array.isArray(this.options.modules)) {\r\n      this.options.modules.forEach((KeyboardModule) => {\r\n        const keyboardModule = this.utilities.isConstructor(KeyboardModule)\r\n          ? new KeyboardModule(this)\r\n          : KeyboardModule(this);\r\n\r\n        keyboardModule.init && keyboardModule.init(this);\r\n      });\r\n\r\n      this.keyboardPluginClasses = 'modules-loaded';\r\n\r\n      this.render();\r\n      this.onModulesLoaded();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get module prop\r\n   */\r\n  getModuleProp(name: string, prop: string) {\r\n    if (!this.modules[name]) return false;\r\n\r\n    return this.modules[name][prop];\r\n  }\r\n\r\n  /**\r\n   * getModulesList\r\n   */\r\n  getModulesList() {\r\n    return Object.keys(this.modules);\r\n  }\r\n\r\n  /**\r\n   * Parse Row DOM containers\r\n   */\r\n  parseRowDOMContainers(\r\n    rowDOM: HTMLDivElement,\r\n    rowIndex: number,\r\n    containerStartIndexes: number[],\r\n    containerEndIndexes: number[]\r\n  ) {\r\n    const rowDOMArray = Array.from(rowDOM.children);\r\n    let removedElements = 0;\r\n\r\n    if (rowDOMArray.length) {\r\n      containerStartIndexes.forEach((startIndex, arrIndex) => {\r\n        const endIndex = containerEndIndexes[arrIndex];\r\n\r\n        /**\r\n         * If there exists a respective end index\r\n         * if end index comes after start index\r\n         */\r\n        if (!endIndex || !(endIndex > startIndex)) {\r\n          return false;\r\n        }\r\n\r\n        /**\r\n         * Updated startIndex, endIndex\r\n         * This is since the removal of buttons to place a single button container\r\n         * results in a modified array size\r\n         */\r\n        const updated_startIndex = startIndex - removedElements;\r\n        const updated_endIndex = endIndex - removedElements;\r\n\r\n        /**\r\n         * Create button container\r\n         */\r\n        const containerDOM = document.createElement('div');\r\n        containerDOM.className += 'hg-button-container';\r\n        const containerUID = `${this.options.layoutName}-r${rowIndex}c${arrIndex}`;\r\n        containerDOM.setAttribute('data-skUID', containerUID);\r\n\r\n        /**\r\n         * Taking elements due to be inserted into container\r\n         */\r\n        const containedElements = rowDOMArray.splice(updated_startIndex, updated_endIndex - updated_startIndex + 1);\r\n        removedElements += updated_endIndex - updated_startIndex;\r\n\r\n        /**\r\n         * Inserting elements to container\r\n         */\r\n        containedElements.forEach((element) => containerDOM.appendChild(element));\r\n\r\n        /**\r\n         * Adding container at correct position within rowDOMArray\r\n         */\r\n        rowDOMArray.splice(updated_startIndex, 0, containerDOM);\r\n\r\n        /**\r\n         * Clearing old rowDOM children structure\r\n         */\r\n        rowDOM.innerHTML = '';\r\n\r\n        /**\r\n         * Appending rowDOM new children list\r\n         */\r\n        rowDOMArray.forEach((element) => rowDOM.appendChild(element));\r\n\r\n        if (this.options.debug) {\r\n          console.log('rowDOMContainer', containedElements, updated_startIndex, updated_endIndex, removedElements + 1);\r\n        }\r\n      });\r\n    }\r\n\r\n    return rowDOM;\r\n  }\r\n\r\n  /**\r\n   * getKeyboardClassString\r\n   */\r\n  getKeyboardClassString = (...baseDOMClasses: any[]) => {\r\n    const keyboardClasses = [this.keyboardDOMClass, ...baseDOMClasses].filter((DOMClass) => !!DOMClass);\r\n\r\n    return keyboardClasses.join(' ');\r\n  };\r\n\r\n  /**\r\n   * Renders rows and buttons as per options\r\n   */\r\n  render() {\r\n    /**\r\n     * Clear keyboard\r\n     */\r\n    this.resetRows();\r\n\r\n    /**\r\n     * Calling beforeFirstRender\r\n     */\r\n    if (!this.initialized) {\r\n      this.beforeFirstRender();\r\n    }\r\n\r\n    /**\r\n     * Calling beforeRender\r\n     */\r\n    this.beforeRender();\r\n\r\n    const layoutClass = `hg-layout-${this.options.layoutName}`;\r\n    const layout = this.options.layout || getDefaultLayout();\r\n    const useTouchEvents = this.options.useTouchEvents || false;\r\n    const useTouchEventsClass = useTouchEvents ? 'hg-touch-events' : '';\r\n    const useMouseEvents = this.options.useMouseEvents || false;\r\n    const disableRowButtonContainers = this.options.disableRowButtonContainers;\r\n\r\n    /**\r\n     * Adding themeClass, layoutClass to keyboardDOM\r\n     */\r\n    this.keyboardDOM.className = this.getKeyboardClassString(\r\n      this.options.theme,\r\n      layoutClass,\r\n      this.keyboardPluginClasses,\r\n      useTouchEventsClass\r\n    );\r\n\r\n    /**\r\n     * Adding keyboard identifier\r\n     */\r\n    this.keyboardDOM.setAttribute('data-skInstance', this.currentInstanceName);\r\n\r\n    /**\r\n     * Add WCAG 2.1 compliance attributes - LPJr\r\n     * https://www.w3.org/WAI/WCAG21/Understanding/keyboard.html\r\n     */\r\n\r\n    /**\r\n     * WCAG 2.1 / Section 508a Accessibility Compliance - LPJr\r\n     *\r\n     * This virtual keyboard component follows best-effort WCAG 2.1 Level AA and 508a compliance practices:\r\n     *\r\n     * Keyboard Navigability (2.1.1)\r\n     *    - All keys are operable via arrow keys and focus management\r\n     *    - `Tab` and `Shift+Tab` allow exiting and re-entering the keyboard area\r\n     *\r\n     * Focus Visibility (2.4.7)\r\n     *    - Each key uses `tabIndex` and is visibly highlighted when focused\r\n     *\r\n     * Name, Role, Value (4.1.2)\r\n     *    - Each key has `role=\"button\"` (if not native <button>)\r\n     *    - Each key has an `aria-label` and visible text\r\n     *    - Keyboard container has `role=\"application\"` and a programmatic label\r\n     *\r\n     * Live Region Announcements\r\n     *    - Not implemented to avoid screen reader overload\r\n     *    - Optional feature per WCAG; not required for conformance\r\n     *    - Output is assumed to be visually accessible or programmatically exposed elsewhere\r\n     *\r\n     * Customization\r\n     *    - `aria-label` for the keyboard can be overridden via `options.ariaLabel`\r\n     *    - Accessible layout is language-agnostic and screen reader-friendly\r\n     */\r\n\r\n    this.options.useLiveRegion ??= true;\r\n    this.options.liveRegionMode ??= 'polite';\r\n    this.options.liveRegionDelay ??= 100;\r\n    this.options.ariaLabel ??= 'Virtual Keyboard';\r\n\r\n    this.keyboardDOM.setAttribute('role', 'application');\r\n    this.keyboardDOM.setAttribute('aria-label', this.options.ariaLabel || 'Virtual Keyboard');\r\n    this.keyboardDOM.setAttribute('tabindex', '-1');\r\n\r\n    this.instructions =\r\n      this.options.instructions || 'Arrow keys navigate. Enter to select. Tab to exit keyboard, Shift+Tab to return.';\r\n\r\n    // Add layout header for context\r\n    this.keyboardHeader = document.createElement('h2');\r\n    this.keyboardHeader.classList.add('hg-header', 'sr-only');\r\n    this.keyboardHeader.id = 'hg-virtual-keyboard-header';\r\n    this.keyboardHeader.textContent = 'QWERTY Virtual Keyboard';\r\n    this.keyboardDOM.appendChild(this.keyboardHeader);\r\n\r\n    this.keyboardInstructions = document.createElement('p');\r\n    this.keyboardInstructions.classList.add('hg-instructions', 'sr-only');\r\n    this.keyboardInstructions.id = 'hg-virtual-keyboard-instructions';\r\n    this.keyboardInstructions.setAttribute('role', 'note');\r\n    this.keyboardInstructions.textContent = this.instructions;\r\n    this.keyboardDOM.appendChild(this.keyboardInstructions);\r\n\r\n    // Update ARIA attributes to reference both header and instructions\r\n    this.keyboardDOM.setAttribute('aria-labelledby', this.keyboardHeader.id);\r\n    this.keyboardDOM.setAttribute('aria-describedby', this.keyboardInstructions.id);\r\n\r\n    /**\r\n     * Create row wrapper\r\n     */\r\n    this.keyboardRowsDOM = document.createElement('div');\r\n    this.keyboardRowsDOM.className = 'hg-rows';\r\n\r\n    /**\r\n     * Iterating through each row\r\n     */\r\n    layout[this.options.layoutName || this.defaultName].forEach((row: string, rIndex: number) => {\r\n      let rowArray = row.split(' ');\r\n\r\n      /**\r\n       * Enforce excludeFromLayout\r\n       */\r\n      if (\r\n        this.options.excludeFromLayout &&\r\n        this.options.excludeFromLayout[this.options.layoutName || this.defaultName]\r\n      ) {\r\n        rowArray = rowArray.filter(\r\n          (buttonName) =>\r\n            this.options.excludeFromLayout &&\r\n            !this.options.excludeFromLayout[this.options.layoutName || this.defaultName].includes(buttonName)\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Creating empty row\r\n       */\r\n      let rowDOM = document.createElement('div');\r\n      rowDOM.className += 'hg-row';\r\n\r\n      /**\r\n       * Tracking container indicators in rows\r\n       */\r\n      const containerStartIndexes: number[] = [];\r\n      const containerEndIndexes: number[] = [];\r\n\r\n      /**\r\n       * Iterating through each button in row\r\n       */\r\n      rowArray.forEach((button, bIndex) => {\r\n        /**\r\n         * Check if button has a container indicator\r\n         */\r\n        const buttonHasContainerStart =\r\n          !disableRowButtonContainers && typeof button === 'string' && button.length > 1 && button.indexOf('[') === 0;\r\n\r\n        const buttonHasContainerEnd =\r\n          !disableRowButtonContainers &&\r\n          typeof button === 'string' &&\r\n          button.length > 1 &&\r\n          button.indexOf(']') === button.length - 1;\r\n\r\n        /**\r\n         * Save container start index, if applicable\r\n         */\r\n        if (buttonHasContainerStart) {\r\n          containerStartIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\[/g, '');\r\n        }\r\n\r\n        if (buttonHasContainerEnd) {\r\n          containerEndIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\]/g, '');\r\n        }\r\n\r\n        /**\r\n         * Processing button options\r\n         */\r\n        const fctBtnClass = this.utilities.getButtonClass(button);\r\n        const buttonDisplayName = this.utilities.getButtonDisplayName(\r\n          button,\r\n          this.options.display,\r\n          this.options.mergeDisplay\r\n        );\r\n\r\n        /**\r\n         * Creating button\r\n         */\r\n        const buttonType = this.options.useButtonTag ? 'button' : 'div';\r\n        const buttonDOM = document.createElement(buttonType);\r\n        buttonDOM.className += `hg-button ${fctBtnClass}`;\r\n\r\n        /**\r\n         * Adding buttonTheme\r\n         */\r\n        buttonDOM.classList.add(...this.getButtonThemeClasses(button));\r\n\r\n        /**\r\n         * Adding buttonAttributes\r\n         */\r\n        this.setDOMButtonAttributes(button, (attribute: string, value: string) => {\r\n          buttonDOM.setAttribute(attribute, value);\r\n        });\r\n\r\n        this.activeButtonClass = 'hg-activeButton';\r\n\r\n        /**\r\n         * Handle button click event\r\n         */\r\n        /* istanbul ignore next */\r\n        if (this.utilities.pointerEventsSupported() && !useTouchEvents && !useMouseEvents) {\r\n          /**\r\n           * Handle PointerEvents\r\n           */\r\n          buttonDOM.onpointerdown = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonClicked(button, e);\r\n            this.handleButtonMouseDown(button, e);\r\n          };\r\n          buttonDOM.onpointerup = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n          buttonDOM.onpointercancel = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n        } else {\r\n          /**\r\n           * Fallback for browsers not supporting PointerEvents\r\n           */\r\n          if (useTouchEvents) {\r\n            /**\r\n             * Handle touch events\r\n             */\r\n            buttonDOM.ontouchstart = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonClicked(button, e);\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.ontouchend = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n            buttonDOM.ontouchcancel = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          } else {\r\n            /**\r\n             * Handle mouse events\r\n             */\r\n            buttonDOM.onclick = (e: KeyboardHandlerEvent) => {\r\n              this.setMouseHold(false);\r\n              /**\r\n               * Fire button handler in onclick for compatibility reasons\r\n               * This fires handler before onKeyReleased, therefore when that option is set we will fire the handler\r\n               * in onmousedown instead\r\n               */\r\n              if (\r\n                typeof this.options.onKeyReleased !== 'function' &&\r\n                !(this.options.useMouseEvents && this.options.clickOnMouseDown)\r\n              ) {\r\n                this.handleButtonClicked(button, e);\r\n              }\r\n            };\r\n            buttonDOM.onmousedown = (e: KeyboardHandlerEvent) => {\r\n              /**\r\n               * Fire button handler for onKeyReleased use-case\r\n               */\r\n              if (\r\n                (typeof this.options.onKeyReleased === 'function' ||\r\n                  (this.options.useMouseEvents && this.options.clickOnMouseDown)) &&\r\n                !this.isMouseHold\r\n              ) {\r\n                this.handleButtonClicked(button, e);\r\n              }\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.onmouseup = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          }\r\n        }\r\n\r\n        /**\r\n         * Adding identifier\r\n         */\r\n        buttonDOM.setAttribute('data-skBtn', button);\r\n\r\n        /**\r\n         * Adding unique id\r\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\r\n         */\r\n        const buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\r\n        buttonDOM.setAttribute('data-skBtnUID', buttonUID);\r\n\r\n        /**\r\n         * Adding WCAG 2.1 compliance attributes - LPjr\r\n         */\r\n        // Accessibility: Set role and focus management\r\n        if (buttonType === 'div') {\r\n          buttonDOM.setAttribute('role', 'button');\r\n        }\r\n\r\n        buttonDOM.setAttribute('aria-selected', 'false'); // Only one key should be tabbable at a time\r\n        buttonDOM.setAttribute('tabindex', '-1'); // Managed manually for arrow key navigation\r\n\r\n        // Accessibility: Aria-label for screen readers\r\n        // If the buttonDisplayName is a symbol or icon, consider customizing the aria-label via options.display\r\n        buttonDOM.setAttribute('aria-label', buttonDisplayName);\r\n\r\n        // Optional: Title attribute for screen readers\r\n        buttonDOM.setAttribute('title', buttonDisplayName);\r\n\r\n        // stable id for key\r\n        buttonDOM.id = `key-${rIndex}-${bIndex}-${button.replace(/\\s+/g, '-')}`;\r\n\r\n        // Example: If this is the first key, make it focusable\r\n        if (rIndex === 0 && bIndex === 0) {\r\n          buttonDOM.setAttribute('aria-selected', 'true');\r\n        }\r\n\r\n        /**\r\n         * Adding button label to button\r\n         */\r\n        const buttonSpanDOM = document.createElement('span');\r\n        buttonSpanDOM.innerHTML = buttonDisplayName;\r\n        buttonDOM.appendChild(buttonSpanDOM);\r\n\r\n        /**\r\n         * Adding to buttonElements\r\n         */\r\n        if (!this.buttonElements[button]) this.buttonElements[button] = [];\r\n\r\n        this.buttonElements[button].push(buttonDOM);\r\n\r\n        /**\r\n         * Appending button to row\r\n         */\r\n        rowDOM.appendChild(buttonDOM);\r\n      });\r\n\r\n      /**\r\n       * Parse containers in row\r\n       */\r\n      rowDOM = this.parseRowDOMContainers(rowDOM, rIndex, containerStartIndexes, containerEndIndexes);\r\n\r\n      /**\r\n       * Appending row to hg-rows\r\n       */\r\n      this.keyboardRowsDOM.appendChild(rowDOM);\r\n    });\r\n\r\n    /**\r\n     * Appending row to keyboard\r\n     */\r\n    this.keyboardDOM.appendChild(this.keyboardRowsDOM);\r\n\r\n    /**\r\n     * Calling onRender\r\n     */\r\n    this.onRender();\r\n\r\n    if (!this.initialized) {\r\n      /**\r\n       * Ensures that onInit and beforeFirstRender are only called once per instantiation\r\n       */\r\n      this.initialized = true;\r\n\r\n      /**\r\n       * Handling parent events\r\n       */\r\n      /* istanbul ignore next */\r\n      if (this.utilities.pointerEventsSupported() && !useTouchEvents && !useMouseEvents) {\r\n        document.onpointerup = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        this.keyboardDOM.onpointerdown = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      } else if (useTouchEvents) {\r\n        /**\r\n         * Handling ontouchend, ontouchcancel\r\n         */\r\n        document.ontouchend = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        document.ontouchcancel = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n\r\n        this.keyboardDOM.ontouchstart = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      } else if (!useTouchEvents) {\r\n        /**\r\n         * Handling mouseup\r\n         */\r\n        document.onmouseup = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        this.keyboardDOM.onmousedown = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      }\r\n\r\n      /**\r\n       * Calling onInit\r\n       */\r\n      this.onInit();\r\n    }\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboard;\r\n","import SimpleKeyboard from \"./components/Keyboard\";\r\nexport { SimpleKeyboard };\r\nexport default SimpleKeyboard;\r\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Utilities","_ref","getOptions","getCaretPosition","getCaretPositionEnd","dispatch","_classCallCheck","_defineProperty","button","length","bindMethods","includes","buttonTypeClass","getButtonType","buttonWithoutBraces","replace","buttonNormalized","concat","display","arguments","undefined","assign","getDefaultDisplay","input","caretPos","caretPosEnd","moveCaret","options","commonParams","output","removeAt","apply","removeForwardsAt","addStringAt","tabCharOnTab","newLineOnEnter","Number","isInteger","debug","console","log","minus","newCaretPos","updateCaretPosAction","instance","setCaretPosition","caretPosition","source","str","position","positionEnd","slice","join","isMaxLengthReached","updateCaretPos","emojiMatchedReg","substring","match","substr","inputObj","updatedInput","maxLength","currentInput","inputName","condition","maxLengthReached","_typeof","Boolean","window","navigator","maxTouchPoints","PointerEvent","toLowerCase","trim","split","reduce","word","toUpperCase","arr","size","_toConsumableArray","Array","Math","ceil","map","_","i","index","newIndex","startMarkerIndex","indexOf","f","Reflect","construct","String","e","myClass","_step","_iterator","_createForOfIteratorHelper","getOwnPropertyNames","s","n","done","myMethod","bind","err","PhysicalKeyboard","_this","Set","altKey","ctrlKey","shiftKey","code","keyCodeToKey","keyCode","layout","_this$getOptions","lastLayout","layoutJSON","mapLayoutToEventCodes","extractAndPadLayout","default","shift","shiftActive","capslockActive","buttonPressed","getSimpleKeyboardLayoutKey","buttonDOM","buttonName","standardButtonPressed","getButtonElement","functionButtonPressed","_buttonDOM$","_buttonDOM$$onpointer","_buttonDOM","_buttonDOM$onpointerd","applyButtonStyle","buttonElement","style","background","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","isArray","forEach","physicalKeyboardHighlightPress","physicalKeyboardHighlightPressUsePointerEvents","onpointerdown","physicalKeyboardHighlightPressUseClick","_buttonDOM$2","click","handleButtonClicked","_buttonDOM$3","_buttonDOM$3$onpointe","_buttonDOM$onpointeru","removeAttribute","onpointerup","STANDARD_CODES","has","upper","rawKey","shiftleft","shiftright","controlleft","controlright","altleft","altright","metaleft","metaright","backspace","capslock","enter","tab","_options$layout$defau","_options$layout","currentLayout","_options$layout2","eCode","normalizeToStandardCode","layoutEntry","toString","normal","normalizeOutput","fallbackKeys","qwertyRowLengths","processedLayout","_i","_arr","type","rows","row","push","mappedLayout","qwertyRows","rowIndex","colIndex","_layout$default$rowIn","_layout$shift$rowInde","eventCode","normalKey","CandidateBox","utilities","document","querySelector","pageSize","layoutCandidatesPageSize","handleActiveIndexBound","handleActiveIndex","firstLastNavBound","firstLastNav","listenersAttached","addEventListener","capture","removeEventListener","detachDocListeners","candidateBoxElement","setTimeout","remove","isOpen","activeIndex","candidateOptions","oldListbox","replaceWith","cloneNode","pageIndex","_ref2","_this2","candidateValue","targetElement","onSelect","candidateListPages","chunkArray","renderPage","nbPages","onItemSelected","selectedCandidate","destroy","_this$candidateBoxEle","focusable","querySelectorAll","first","last","preventDefault","setAttribute","_ref3","_this$candidateBoxEle2","_this3","attachDocListeners","createElement","className","instructionsElement","id","classList","add","innerHTML","appendChild","candidateListULElement","candidateListItem","_this3$options$displa","candidateListLIElement","getMouseEvent","mouseEvent","useTouchEvents","TouchEvent","MouseEvent","onclick","globalLiveRegionElement","_candidateListLIEleme","label","textContent","ontouchstart","_candidateListLIEleme2","isPrevBtnElementActive","prevBtnElement","isNextBtnElementActive","nextBtnElement","prepend","setupKeyboardNav","updateActiveIndex","activateSelectedOption","listbox","from","option","setActiveOption","prev","next","scrollIntoView","block","_next$textContent","total","activeOption","_activeOption$textCon","SimpleKeyboard","selectorOrOptions","keyboardOptions","Spacebar","keyboardDOMClass","keyboardDOM","HTMLDivElement","warn","Error","caretPositionEnd","name","initCallback","modules","_len","baseDOMClasses","_key","filter","DOMClass","_this$handleParams","handleParams","_this$handleParams$op","announcerEl","ensureAnnouncer","_objectSpread","layoutName","theme","preventMouseDownDefault","enableLayoutCandidates","excludeFromLayout","keyboardPluginClasses","_this$options$inputNa","defaultName","buttonElements","currentInstanceName","camelCase","allKeyboardInstances","keyboardInstanceNames","keys","isFirstKeyboardInstance","physicalKeyboard","candidateBox","render","loadModules","keyboardEl","parentEl","parentElement","insertAdjacentElement","rowsEl","nextSibling","insertBefore","endPosition","_this$options","layoutCandidatesObj","layoutCandidates","layoutCandidatesCaseSensitiveMatch","layoutCandidate","inputSubstr","regexp","RegExp","escapeRegex","matchAll","candidateKey","sort","a","b","show","_this3$options","disableCandidateNormalization","enableLayoutCandidatesKeyPress","candidateStr","normalize","beforeInputUpdate","getInput","initialCaretPosition","newInputSubstr","newInput","caretPositionDiff","newCaretPosition","setInput","onKeyPress","onChange","onChangeAll","getAllInputs","_this$options2","_this$options2$inputN","getUpdatedInput","isStandardButton","activeInputElement","setSelectionRange","inputPattern","inputPatternIsValid","handleMaxLength","newInputValue","syncInstanceInputs","target","_this$candidateBox","_this$getInputCandida","getInputCandidates","showCandidatesBox","isMouseHold","_this4","stopMouseDownPropagation","stopPropagation","activeButtonClass","holdInteractionTimeout","clearTimeout","holdTimeout","setMouseHold","disableButtonHold","getMouseHold","handleButtonHold","_this5","preventMouseUpDefault","stopMouseUpPropagation","contains","recurseButtons","onKeyReleased","_this6","_this7","replaceInput","skipSync","rtl","_this8","_this$keyboardDOM","mode","restoreFocusOnChange","focus","changedOptions","onSetOptions","newOptions","_this9","optionName","JSON","stringify","keyboardRowsDOM","callback","buttons","_this0","classNameItem","buttonTheme","classNameFound","buttonThemeArray","class","_this1","_this1$options","_buttonTheme","_this1$options$button","filteredButtonArray","item","splice","buttonArr","inputVal","inputPatternRaw","didInputMatch","test","handleKeyDownBound","handleKeyUpBound","handleMouseUpBound","handleTouchEndBound","handleSelectBound","updateCaretOnSelectionChange","handleSelectionChangeBound","listenersAdded","_this10","removeEventListeners","handleKeyDown","handleInternalKeyNavBound","handleInternalKeyNav","handleKeyUp","handleMouseUp","handleTouchEnd","handleSelect","handleSelectionChange","tag","event","constructor","KeyboardEvent","isSupportedEvent","getButtonAndAnnounce","bypassKeys","physicalKeyboardHighlightPreventDefault","isPrintable","caretEventHandler","physicalKeyboardHighlight","handleHighlightKeyUp","navEngaged","active","hasAttribute","buttonLabel","getAttribute","logEventType","handleHighlightKeyDown","handleGetButtonAndAnnounce","pressedKey","_focused$textContent","isNamedKey","NAMED_KEYS_TO_ANNOUNCE","focused","activeElement","focusedLabel","NAMED_READABLE","useLiveRegion","liveRegionAnnounceMode","suppressAnnouncementsOnInputFocus","tagName","displayName","getButtonDisplayName","mergeDisplay","_this11","shouldSuppressAnnouncements","isComposing","repeat","_event$target","_event$target$closest","_target$textContent","closest","announceMode","actionLabel","getAnnounceLabel","announceLiveRegion","contentResult","getContentForButton","keyLabel","_this12","context","ariaLiveTimer","requestAnimationFrame","_this$keyboardDOM2","offsetParent","activeSurface","nextButton","findNextButton","findPreviousButton","findVerticalButton","current","allButtons","idx","direction","currentRow","targetRow","currentRect","getBoundingClientRect","currentCenterX","left","width","candidates","minDelta","POSITIVE_INFINITY","_candidates","el","rect","centerX","delta","abs","userAgent","_this13","targetTagName","isKeyboard","path","some","_item$hasAttribute","disableCaretPositioning","selectionStart","selectionEnd","getRtlOffset","fn","_this14","ontouchend","ontouchcancel","onmouseup","onpointercancel","onmousedown","resetRows","initialized","buttonClasses","themeObj","themeObjClasses","buttonAttributes","attrObj","attribute","processAutoTouchEvents","disableContextualWindow","oncontextmenu","autoUseTouchEvents","setEventListeners","autoFocus","handleAutoFocus","onInit","isTouchDevice","onTouchDeviceDetected","beforeFirstRender","pointerEventsSupported","useMouseEvents","beforeRender","onRender","_this15","fallbackButton","onModulesLoaded","_this16","KeyboardModule","keyboardModule","isConstructor","init","rowDOM","containerStartIndexes","containerEndIndexes","_this17","rowDOMArray","children","removedElements","startIndex","arrIndex","endIndex","updated_startIndex","updated_endIndex","containerDOM","containerUID","containedElements","element","_this$options3","_this$options3$useLiv","_this$options4","_this$options4$liveRe","_this$options5","_this$options5$liveRe","_this$options6","_this$options6$ariaLa","_this18","layoutClass","useTouchEventsClass","disableRowButtonContainers","getKeyboardClassString","liveRegionMode","liveRegionDelay","ariaLabel","instructions","keyboardHeader","keyboardInstructions","rIndex","rowArray","bIndex","_buttonDOM$classList","buttonHasContainerStart","buttonHasContainerEnd","fctBtnClass","getButtonClass","buttonDisplayName","buttonType","useButtonTag","getButtonThemeClasses","setDOMButtonAttributes","handleButtonMouseDown","handleButtonMouseUp","clickOnMouseDown","buttonUID","buttonSpanDOM","parseRowDOMContainers","handleKeyboardContainerMouseDown"],"sourceRoot":""}