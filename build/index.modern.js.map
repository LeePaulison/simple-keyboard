{"version":3,"file":"index.modern.js","mappings":"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","sources":["webpack://SimpleKeyboard/webpack/universalModuleDefinition","webpack://SimpleKeyboard/webpack/bootstrap","webpack://SimpleKeyboard/webpack/runtime/define property getters","webpack://SimpleKeyboard/webpack/runtime/hasOwnProperty shorthand","webpack://SimpleKeyboard/webpack/runtime/make namespace object","webpack://SimpleKeyboard/./src/lib/services/Utilities.ts","webpack://SimpleKeyboard/./src/lib/services/PhysicalKeyboard.ts","webpack://SimpleKeyboard/./src/lib/services/KeyboardLayout.ts","webpack://SimpleKeyboard/./src/lib/components/CandidateBox.ts","webpack://SimpleKeyboard/./src/lib/components/Keyboard.ts","webpack://SimpleKeyboard/./src/lib/index.modern.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboard\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboard\"] = factory();\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { KeyboardInput } from \"./../interfaces\";\r\nimport { KeyboardOptions, UtilitiesParams } from \"../interfaces\";\r\n\r\n/**\r\n * Utility Service\r\n */\r\nclass Utilities {\r\n  getOptions: () => KeyboardOptions;\r\n  getCaretPosition: () => number | null;\r\n  getCaretPositionEnd: () => number | null;\r\n  dispatch: any;\r\n  maxLengthReached!: boolean;\r\n\r\n  /**\r\n   * Creates an instance of the Utility service\r\n   */\r\n  constructor({ getOptions, getCaretPosition, getCaretPositionEnd, dispatch }: UtilitiesParams) {\r\n    this.getOptions = getOptions;\r\n    this.getCaretPosition = getCaretPosition;\r\n    this.getCaretPositionEnd = getCaretPositionEnd;\r\n    this.dispatch = dispatch;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(Utilities, this);\r\n  }\r\n\r\n  /**\r\n   * Retrieve button type\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The button type\r\n   */\r\n  getButtonType(button: string): string {\r\n    return button.includes(\"{\") && button.includes(\"}\") && button !== \"{//}\" ? \"functionBtn\" : \"standardBtn\";\r\n  }\r\n\r\n  /**\r\n   * Adds default classes to a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The classes to be added to the button\r\n   */\r\n  getButtonClass(button: string): string {\r\n    const buttonTypeClass = this.getButtonType(button);\r\n    const buttonWithoutBraces = button.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    let buttonNormalized = \"\";\r\n\r\n    if (buttonTypeClass !== \"standardBtn\") buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\r\n\r\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\r\n  }\r\n\r\n  /**\r\n   * Default button display labels\r\n   */\r\n  getDefaultDisplay() {\r\n    return {\r\n      \"{bksp}\": \"backspace\",\r\n      \"{backspace}\": \"backspace\",\r\n      \"{enter}\": \"< enter\",\r\n      \"{shift}\": \"shift\",\r\n      \"{shiftleft}\": \"shift\",\r\n      \"{shiftright}\": \"shift\",\r\n      \"{alt}\": \"alt\",\r\n      \"{s}\": \"shift\",\r\n      \"{tab}\": \"tab\",\r\n      \"{lock}\": \"caps\",\r\n      \"{capslock}\": \"caps\",\r\n      \"{accept}\": \"Submit\",\r\n      \"{space}\": \" \",\r\n      \"{//}\": \" \",\r\n      \"{esc}\": \"esc\",\r\n      \"{escape}\": \"esc\",\r\n      \"{f1}\": \"f1\",\r\n      \"{f2}\": \"f2\",\r\n      \"{f3}\": \"f3\",\r\n      \"{f4}\": \"f4\",\r\n      \"{f5}\": \"f5\",\r\n      \"{f6}\": \"f6\",\r\n      \"{f7}\": \"f7\",\r\n      \"{f8}\": \"f8\",\r\n      \"{f9}\": \"f9\",\r\n      \"{f10}\": \"f10\",\r\n      \"{f11}\": \"f11\",\r\n      \"{f12}\": \"f12\",\r\n      \"{numpaddivide}\": \"/\",\r\n      \"{numlock}\": \"lock\",\r\n      \"{arrowup}\": \"↑\",\r\n      \"{arrowleft}\": \"←\",\r\n      \"{arrowdown}\": \"↓\",\r\n      \"{arrowright}\": \"→\",\r\n      \"{prtscr}\": \"print\",\r\n      \"{scrolllock}\": \"scroll\",\r\n      \"{pause}\": \"pause\",\r\n      \"{insert}\": \"ins\",\r\n      \"{home}\": \"home\",\r\n      \"{pageup}\": \"up\",\r\n      \"{delete}\": \"del\",\r\n      \"{forwarddelete}\": \"del\",\r\n      \"{end}\": \"end\",\r\n      \"{pagedown}\": \"down\",\r\n      \"{numpadmultiply}\": \"*\",\r\n      \"{numpadsubtract}\": \"-\",\r\n      \"{numpadadd}\": \"+\",\r\n      \"{numpadenter}\": \"enter\",\r\n      \"{period}\": \".\",\r\n      \"{numpaddecimal}\": \".\",\r\n      \"{numpad0}\": \"0\",\r\n      \"{numpad1}\": \"1\",\r\n      \"{numpad2}\": \"2\",\r\n      \"{numpad3}\": \"3\",\r\n      \"{numpad4}\": \"4\",\r\n      \"{numpad5}\": \"5\",\r\n      \"{numpad6}\": \"6\",\r\n      \"{numpad7}\": \"7\",\r\n      \"{numpad8}\": \"8\",\r\n      \"{numpad9}\": \"9\",\r\n    };\r\n  }\r\n  /**\r\n   * Returns the display (label) name for a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {object} display The provided display option\r\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\r\n   */\r\n  getButtonDisplayName(button: string, display: KeyboardOptions[\"display\"], mergeDisplay = false) {\r\n    if (mergeDisplay) {\r\n      display = Object.assign({}, this.getDefaultDisplay(), display);\r\n    } else {\r\n      display = display || this.getDefaultDisplay();\r\n    }\r\n\r\n    return display[button] || button;\r\n  }\r\n\r\n  /**\r\n   * Returns the updated input resulting from clicking a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {string} input The input string\r\n   * @param  {number} caretPos The cursor's current position\r\n   * @param  {number} caretPosEnd The cursor's current end position\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  getUpdatedInput(button: string, input: string, caretPos: any, caretPosEnd = caretPos, moveCaret = false) {\r\n    const options = this.getOptions();\r\n    const commonParams: [number | undefined, number | undefined, boolean] = [caretPos, caretPosEnd, moveCaret];\r\n\r\n    let output = input;\r\n\r\n    if ((button === \"{bksp}\" || button === \"{backspace}\") && output.length > 0) {\r\n      output = this.removeAt(output, ...commonParams);\r\n    } else if ((button === \"{delete}\" || button === \"{forwarddelete}\") && output.length > 0) {\r\n      output = this.removeForwardsAt(output, ...commonParams);\r\n    } else if (button === \"{space}\") output = this.addStringAt(output, \" \", ...commonParams);\r\n    else if (button === \"{tab}\" && !(typeof options.tabCharOnTab === \"boolean\" && options.tabCharOnTab === false)) {\r\n      output = this.addStringAt(output, \"\\t\", ...commonParams);\r\n    } else if ((button === \"{enter}\" || button === \"{numpadenter}\") && options.newLineOnEnter)\r\n      output = this.addStringAt(output, \"\\n\", ...commonParams);\r\n    else if (button.includes(\"numpad\") && Number.isInteger(Number(button[button.length - 2]))) {\r\n      output = this.addStringAt(output, button[button.length - 2], ...commonParams);\r\n    } else if (button === \"{numpaddivide}\") output = this.addStringAt(output, \"/\", ...commonParams);\r\n    else if (button === \"{numpadmultiply}\") output = this.addStringAt(output, \"*\", ...commonParams);\r\n    else if (button === \"{numpadsubtract}\") output = this.addStringAt(output, \"-\", ...commonParams);\r\n    else if (button === \"{numpadadd}\") output = this.addStringAt(output, \"+\", ...commonParams);\r\n    else if (button === \"{numpaddecimal}\") output = this.addStringAt(output, \".\", ...commonParams);\r\n    else if (button === \"{\" || button === \"}\") output = this.addStringAt(output, button, ...commonParams);\r\n    else if (!button.includes(\"{\") && !button.includes(\"}\")) output = this.addStringAt(output, button, ...commonParams);\r\n\r\n    if (options.debug) {\r\n      console.log(\"Input will be: \" + output);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Moves the cursor position by a given amount\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPos(length: number, minus = false) {\r\n    const newCaretPos = this.updateCaretPosAction(length, minus);\r\n\r\n    this.dispatch((instance: any) => {\r\n      instance.setCaretPosition(newCaretPos);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Action method of updateCaretPos\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPosAction(length: number, minus = false) {\r\n    const options = this.getOptions();\r\n    let caretPosition = this.getCaretPosition();\r\n\r\n    if (caretPosition != null) {\r\n      if (minus) {\r\n        if (caretPosition > 0) caretPosition = caretPosition - length;\r\n      } else {\r\n        caretPosition = caretPosition + length;\r\n      }\r\n    }\r\n\r\n    if (options.debug) {\r\n      console.log(\"Caret at:\", caretPosition);\r\n    }\r\n\r\n    return caretPosition;\r\n  }\r\n\r\n  /**\r\n   * Adds a string to the input at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {string} str The string to add\r\n   * @param  {number} position The (cursor) position where the string should be added\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  addStringAt(source: string, str: string, position = source.length, positionEnd = source.length, moveCaret = false) {\r\n    let output;\r\n\r\n    if (!position && position !== 0) {\r\n      output = source + str;\r\n    } else {\r\n      output = [source.slice(0, position), str, source.slice(positionEnd)].join(\"\");\r\n\r\n      /**\r\n       * Avoid caret position change when maxLength is set\r\n       */\r\n      if (!this.isMaxLengthReached()) {\r\n        if (moveCaret) this.updateCaretPos(str.length);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Check whether the button is a standard button\r\n   */\r\n  isStandardButton = (button: string) => button && !(button[0] === \"{\" && button[button.length - 1] === \"}\");\r\n\r\n  /**\r\n   * Removes an amount of characters before a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  removeAt(source: string, position = source.length, positionEnd = source.length, moveCaret = false) {\r\n    if (position === 0 && positionEnd === 0) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      let prevTwoChars;\r\n      let emojiMatched;\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      if (position && position >= 0) {\r\n        prevTwoChars = source.substring(position - 2, position);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.substr(0, position - 2) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.substr(0, position - 1) + source.substr(position);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      } else {\r\n        prevTwoChars = source.slice(-2);\r\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n        if (emojiMatched) {\r\n          output = source.slice(0, -2);\r\n          if (moveCaret) this.updateCaretPos(2, true);\r\n        } else {\r\n          output = source.slice(0, -1);\r\n          if (moveCaret) this.updateCaretPos(1, true);\r\n        }\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch((instance: any) => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Removes an amount of characters after a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   */\r\n  removeForwardsAt(\r\n    source: string,\r\n    position: number = source.length,\r\n    positionEnd: number = source.length,\r\n    moveCaret = false\r\n  ) {\r\n    if (!source?.length || position === null) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n\r\n    if (position === positionEnd) {\r\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n      /**\r\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n       */\r\n      const nextTwoChars = source.substring(position, position + 2);\r\n      const emojiMatched = nextTwoChars.match(emojiMatchedReg);\r\n\r\n      if (emojiMatched) {\r\n        output = source.substr(0, position) + source.substr(position + 2);\r\n      } else {\r\n        output = source.substr(0, position) + source.substr(position + 1);\r\n      }\r\n    } else {\r\n      output = source.slice(0, position) + source.slice(positionEnd);\r\n      if (moveCaret) {\r\n        this.dispatch((instance: any) => {\r\n          instance.setCaretPosition(position);\r\n        });\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\r\n   *\r\n   * @param  {object} inputObj\r\n   * @param  {string} updatedInput\r\n   */\r\n  handleMaxLength(inputObj: KeyboardInput, updatedInput: string) {\r\n    const options = this.getOptions();\r\n    const maxLength = options.maxLength;\r\n    const currentInput = inputObj[options.inputName || \"default\"];\r\n    const condition = updatedInput.length - 1 >= maxLength;\r\n\r\n    if (\r\n      /**\r\n       * If pressing this button won't add more characters\r\n       * We exit out of this limiter function\r\n       */\r\n      updatedInput.length <= currentInput.length\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (Number.isInteger(maxLength)) {\r\n      if (options.debug) {\r\n        console.log(\"maxLength (num) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        /**\r\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\r\n         */\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (typeof maxLength === \"object\") {\r\n      const condition = updatedInput.length - 1 >= maxLength[options.inputName || \"default\"];\r\n\r\n      if (options.debug) {\r\n        console.log(\"maxLength (obj) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of maxLengthReached\r\n   */\r\n  isMaxLengthReached() {\r\n    return Boolean(this.maxLengthReached);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a touch device is being used\r\n   */\r\n  isTouchDevice() {\r\n    return \"ontouchstart\" in window || navigator.maxTouchPoints;\r\n  }\r\n\r\n  /**\r\n   * Determines whether pointer events are supported\r\n   */\r\n  pointerEventsSupported() {\r\n    return !!window.PointerEvent;\r\n  }\r\n\r\n  /**\r\n   * Bind all methods in a given class\r\n   */\r\n\r\n  static bindMethods(myClass: any, instance: any) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (const myMethod of Object.getOwnPropertyNames(myClass.prototype)) {\r\n      const excludeMethod = myMethod === \"constructor\" || myMethod === \"bindMethods\";\r\n      if (!excludeMethod) {\r\n        instance[myMethod] = instance[myMethod].bind(instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transforms an arbitrary string to camelCase\r\n   *\r\n   * @param  {string} str The string to transform.\r\n   */\r\n  camelCase(str: string): string {\r\n    if (!str) return \"\";\r\n\r\n    return str\r\n      .toLowerCase()\r\n      .trim()\r\n      .split(/[.\\-_\\s]/g)\r\n      .reduce((str, word) => (word.length ? str + word[0].toUpperCase() + word.slice(1) : str));\r\n  }\r\n\r\n  /**\r\n   * Split array into chunks\r\n   */\r\n  chunkArray<T>(arr: T[], size: number): T[][] {\r\n    return [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));\r\n  }\r\n\r\n  /**\r\n   * Escape regex input\r\n   */\r\n  escapeRegex(str: string) {\r\n    return str.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\r\n  }\r\n\r\n  /**\r\n   * Calculate caret position offset when using rtl option\r\n   */\r\n  getRtlOffset(index: number, input: string) {\r\n    let newIndex = index;\r\n    const startMarkerIndex = input.indexOf(\"\\u202B\");\r\n    const endMarkerIndex = input.indexOf(\"\\u202C\");\r\n\r\n    if (startMarkerIndex < index && startMarkerIndex != -1) {\r\n      newIndex--;\r\n    }\r\n    if (endMarkerIndex < index && startMarkerIndex != -1) {\r\n      newIndex--;\r\n    }\r\n\r\n    return newIndex < 0 ? 0 : newIndex;\r\n  }\r\n\r\n  /**\r\n   * Reusable empty function\r\n   */\r\n  static noop = () => {};\r\n}\r\n\r\nexport default Utilities;\r\n","import { KeyboardOptions, PhysicalKeyboardParams } from \"../interfaces\";\r\nimport Utilities from \"../services/Utilities\";\r\nimport { getDefaultLayout } from \"../services/KeyboardLayout\";\r\n\r\n/**\r\n * Layout Key Mapping Interface\r\n */\r\ninterface LayoutKeyMapping {\r\n  normal: string | number;\r\n  shift: string | number;\r\n}\r\n\r\n/**\r\n * Physical Keyboard Service\r\n */\r\nclass PhysicalKeyboard {\r\n  getOptions: () => KeyboardOptions;\r\n  dispatch: any;\r\n  layoutJSON: Record<string, LayoutKeyMapping> | null = null;\r\n  shiftActive = false;\r\n  capslockActive = false;\r\n\r\n  /**\r\n   * Creates an instance of the PhysicalKeyboard service\r\n   */\r\n  constructor({ dispatch, getOptions }: PhysicalKeyboardParams) {\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.dispatch = dispatch;\r\n    this.getOptions = getOptions;\r\n    if (this.getOptions() && this.getOptions().layout) {\r\n      const layout = this.getOptions().layout;\r\n      if (layout) {\r\n        this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(layout));\r\n      }\r\n    } else {\r\n      this.layoutJSON = this.mapLayoutToEventCodes(this.extractAndPadLayout(getDefaultLayout()));\r\n    }\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(PhysicalKeyboard, this);\r\n  }\r\n\r\n  handleHighlightKeyDown(e: KeyboardEvent) {\r\n    const options = this.getOptions();\r\n\r\n    // if (options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)) {\r\n    //   e.preventDefault();\r\n    //   e.stopImmediatePropagation();\r\n    // }\r\n\r\n    if ((e.code === \"ShiftLeft\" || e.code === \"ShiftRight\") && !this.shiftActive) {\r\n      this.shiftActive = !this.shiftActive;\r\n    }\r\n\r\n    if (e.code === \"CapsLock\") {\r\n      this.capslockActive = !this.capslockActive;\r\n    }\r\n\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\r\n\r\n    this.dispatch((instance: any) => {\r\n      const standardButtonPressed = instance.getButtonElement(buttonPressed);\r\n      const functionButtonPressed = instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      console.log(\"standardButtonPressed\", standardButtonPressed);\r\n      console.log(\"functionButtonPressed\", functionButtonPressed);\r\n\r\n      let buttonDOM;\r\n      let buttonName: string;\r\n\r\n      if (standardButtonPressed) {\r\n        buttonDOM = standardButtonPressed;\r\n        buttonName = buttonPressed;\r\n      } else if (functionButtonPressed) {\r\n        buttonDOM = functionButtonPressed;\r\n        buttonName = `{${buttonPressed}}`;\r\n      } else {\r\n        return;\r\n      }\r\n\r\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\r\n        buttonElement.style.background = options.physicalKeyboardHighlightBgColor || \"#dadce4\";\r\n        buttonElement.style.color = options.physicalKeyboardHighlightTextColor || \"black\";\r\n      };\r\n\r\n      if (buttonDOM) {\r\n        if (Array.isArray(buttonDOM)) {\r\n          buttonDOM.forEach((buttonElement) => applyButtonStyle(buttonElement));\r\n\r\n          // Even though we have an array of buttons, we just want to press one of them\r\n          if (options.physicalKeyboardHighlightPress) {\r\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n              buttonDOM[0]?.onpointerdown?.(e);\r\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\r\n              buttonDOM[0]?.click();\r\n            } else {\r\n              instance.handleButtonClicked(buttonName, e);\r\n            }\r\n          }\r\n        } else {\r\n          applyButtonStyle(buttonDOM);\r\n\r\n          if (options.physicalKeyboardHighlightPress) {\r\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n              buttonDOM?.onpointerdown?.(e);\r\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\r\n              buttonDOM.click();\r\n            } else {\r\n              instance.handleButtonClicked(buttonName, e);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  handleHighlightKeyUp(e: KeyboardEvent) {\r\n    const options = this.getOptions();\r\n\r\n    // if (options.physicalKeyboardHighlightPreventDefault && this.isModifierKey(e)) {\r\n    //   e.preventDefault();\r\n    //   e.stopImmediatePropagation();\r\n    // }\r\n\r\n    if (e.code === \"ShiftLeft\" || e.code === \"ShiftRight\") {\r\n      this.shiftActive = false;\r\n    }\r\n\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\r\n\r\n    this.dispatch((instance: any) => {\r\n      const buttonDOM = instance.getButtonElement(buttonPressed) || instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\r\n        if (buttonElement.removeAttribute) {\r\n          buttonElement.removeAttribute(\"style\");\r\n        }\r\n      };\r\n\r\n      if (buttonDOM) {\r\n        if (Array.isArray(buttonDOM)) {\r\n          buttonDOM.forEach((buttonElement) => applyButtonStyle(buttonElement));\r\n\r\n          // Even though we have an array of buttons, we just want to press one of them\r\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n            buttonDOM[0]?.onpointerup?.(e);\r\n          }\r\n        } else {\r\n          applyButtonStyle(buttonDOM);\r\n\r\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\r\n            buttonDOM?.onpointerup?.(e);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\r\n   * @param  {object} e The KeyboardEvent\r\n   * @returns {string} The simple-keyboard layout key\r\n   */\r\n  getSimpleKeyboardLayoutKey(e: KeyboardEvent): string {\r\n    let output = \"\";\r\n\r\n    if (this.layoutJSON && this.layoutJSON[e.code]) {\r\n      // Determine whether to use normal or shift based on Shift & CapsLock state\r\n      output =\r\n        this.shiftActive || this.capslockActive\r\n          ? this.layoutJSON[e.code].shift.toString()\r\n          : this.layoutJSON[e.code].normal.toString();\r\n    } else {\r\n      output = e.key && e.key !== \"Unidentified\" ? e.key : this.keyCodeToKey(e?.keyCode);\r\n    }\r\n\r\n    // Normalize left/right variations\r\n    const normalizeKeyMap: Record<string, string> = {\r\n      ShiftLeft: \"shift\",\r\n      ShiftRight: \"shift\",\r\n      ControlLeft: \"ctrl\",\r\n      ControlRight: \"ctrl\",\r\n      AltLeft: \"alt\",\r\n      AltRight: \"alt\",\r\n      MetaLeft: \"meta\",\r\n      MetaRight: \"meta\",\r\n      Backspace: \"bksp\",\r\n      CapsLock: \"lock\",\r\n      Enter: \"enter\",\r\n      Tab: \"tab\",\r\n    };\r\n\r\n    return normalizeKeyMap[output] || (output.length > 1 ? output.toLowerCase() : output);\r\n  }\r\n\r\n  /**\r\n   * Retrieve key from keyCode\r\n   */\r\n  keyCodeToKey(keyCode: number): string {\r\n    return (\r\n      {\r\n        8: \"Backspace\",\r\n        9: \"Tab\",\r\n        13: \"Enter\",\r\n        16: \"Shift\",\r\n        17: \"Ctrl\",\r\n        18: \"Alt\",\r\n        19: \"Pause\",\r\n        20: \"CapsLock\",\r\n        27: \"Esc\",\r\n        32: \"Space\",\r\n        33: \"PageUp\",\r\n        34: \"PageDown\",\r\n        35: \"End\",\r\n        36: \"Home\",\r\n        37: \"ArrowLeft\",\r\n        38: \"ArrowUp\",\r\n        39: \"ArrowRight\",\r\n        40: \"ArrowDown\",\r\n        45: \"Insert\",\r\n        46: \"Delete\",\r\n        48: \"0\",\r\n        49: \"1\",\r\n        50: \"2\",\r\n        51: \"3\",\r\n        52: \"4\",\r\n        53: \"5\",\r\n        54: \"6\",\r\n        55: \"7\",\r\n        56: \"8\",\r\n        57: \"9\",\r\n        65: \"A\",\r\n        66: \"B\",\r\n        67: \"C\",\r\n        68: \"D\",\r\n        69: \"E\",\r\n        70: \"F\",\r\n        71: \"G\",\r\n        72: \"H\",\r\n        73: \"I\",\r\n        74: \"J\",\r\n        75: \"K\",\r\n        76: \"L\",\r\n        77: \"M\",\r\n        78: \"N\",\r\n        79: \"O\",\r\n        80: \"P\",\r\n        81: \"Q\",\r\n        82: \"R\",\r\n        83: \"S\",\r\n        84: \"T\",\r\n        85: \"U\",\r\n        86: \"V\",\r\n        87: \"W\",\r\n        88: \"X\",\r\n        89: \"Y\",\r\n        90: \"Z\",\r\n        91: \"Meta\",\r\n        96: \"Numpad0\",\r\n        97: \"Numpad1\",\r\n        98: \"Numpad2\",\r\n        99: \"Numpad3\",\r\n        100: \"Numpad4\",\r\n        101: \"Numpad5\",\r\n        102: \"Numpad6\",\r\n        103: \"Numpad7\",\r\n        104: \"Numpad8\",\r\n        105: \"Numpad9\",\r\n        106: \"NumpadMultiply\",\r\n        107: \"NumpadAdd\",\r\n        109: \"NumpadSubtract\",\r\n        110: \"NumpadDecimal\",\r\n        111: \"NumpadDivide\",\r\n        112: \"F1\",\r\n        113: \"F2\",\r\n        114: \"F3\",\r\n        115: \"F4\",\r\n        116: \"F5\",\r\n        117: \"F6\",\r\n        118: \"F7\",\r\n        119: \"F8\",\r\n        120: \"F9\",\r\n        121: \"F10\",\r\n        122: \"F11\",\r\n        123: \"F12\",\r\n        144: \"NumLock\",\r\n        145: \"ScrollLock\",\r\n        186: \";\",\r\n        187: \"=\",\r\n        188: \",\",\r\n        189: \"-\",\r\n        190: \".\",\r\n        191: \"/\",\r\n        192: \"`\",\r\n        219: \"[\",\r\n        220: \"\\\\\",\r\n        221: \"]\",\r\n        222: \"'\",\r\n      }[keyCode] || \"\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Extracts and pads a layout object\r\n   * @param  {object} layout The layout object\r\n   * @returns {object} The layout object with padding\r\n   */\r\n  extractAndPadLayout(layout: Record<string, string[]>): Record<string, (string | number)[][]> {\r\n    const qwertyRowLengths = [14, 14, 13, 12, 3]; // Number of keys per QWERTY row\r\n\r\n    const processedLayout: Record<string, (string | number)[][]> = { default: [], shift: [] };\r\n\r\n    for (const type of [\"default\", \"shift\"]) {\r\n      if (!layout[type]) continue; // Skip if layout type is missing\r\n\r\n      const rows = layout[type].map((row) => row.split(\" \"));\r\n\r\n      for (let i = 0; i < qwertyRowLengths.length; i++) {\r\n        processedLayout[type][i] = rows[i] ? [...rows[i]] : [];\r\n        while (processedLayout[type][i].length < qwertyRowLengths[i]) {\r\n          processedLayout[type][i].push(-1); // Fill missing spots\r\n        }\r\n      }\r\n    }\r\n\r\n    return processedLayout;\r\n  }\r\n\r\n  /**\r\n   * Maps a layout object to event codes\r\n   * @param  {object} layout The layout object\r\n   * @returns {object} The layout object with event codes\r\n   */\r\n\r\n  mapLayoutToEventCodes(layout: Record<string, (string | number)[][]>): Record<string, LayoutKeyMapping> {\r\n    const mappedLayout: Record<string, LayoutKeyMapping> = {};\r\n\r\n    const qwertyRows = [\r\n      [\r\n        \"Backquote\",\r\n        \"Digit1\",\r\n        \"Digit2\",\r\n        \"Digit3\",\r\n        \"Digit4\",\r\n        \"Digit5\",\r\n        \"Digit6\",\r\n        \"Digit7\",\r\n        \"Digit8\",\r\n        \"Digit9\",\r\n        \"Digit0\",\r\n        \"Minus\",\r\n        \"Equal\",\r\n        \"Backspace\",\r\n      ],\r\n      [\r\n        \"Tab\",\r\n        \"KeyQ\",\r\n        \"KeyW\",\r\n        \"KeyE\",\r\n        \"KeyR\",\r\n        \"KeyT\",\r\n        \"KeyY\",\r\n        \"KeyU\",\r\n        \"KeyI\",\r\n        \"KeyO\",\r\n        \"KeyP\",\r\n        \"BracketLeft\",\r\n        \"BracketRight\",\r\n        \"Backslash\",\r\n      ],\r\n      [\r\n        \"CapsLock\",\r\n        \"KeyA\",\r\n        \"KeyS\",\r\n        \"KeyD\",\r\n        \"KeyF\",\r\n        \"KeyG\",\r\n        \"KeyH\",\r\n        \"KeyJ\",\r\n        \"KeyK\",\r\n        \"KeyL\",\r\n        \"Semicolon\",\r\n        \"Quote\",\r\n        \"Enter\",\r\n      ],\r\n      [\"ShiftLeft\", \"KeyZ\", \"KeyX\", \"KeyC\", \"KeyV\", \"KeyB\", \"KeyN\", \"KeyM\", \"Comma\", \"Period\", \"Slash\", \"ShiftRight\"],\r\n      [\"ControlLeft\", \"AltLeft\", \"Space\"],\r\n    ];\r\n\r\n    for (let rowIndex = 0; rowIndex < qwertyRows.length; rowIndex++) {\r\n      for (let colIndex = 0; colIndex < qwertyRows[rowIndex].length; colIndex++) {\r\n        const eventCode = qwertyRows[rowIndex][colIndex];\r\n        const normalKey = layout.default[rowIndex][colIndex] ?? \"\";\r\n        const shiftKey = layout.shift[rowIndex][colIndex] ?? \"\";\r\n\r\n        mappedLayout[eventCode] = {\r\n          normal: normalKey !== -1 ? normalKey : \"\",\r\n          shift: shiftKey !== -1 ? shiftKey : \"\",\r\n        };\r\n      }\r\n    }\r\n\r\n    return mappedLayout;\r\n  }\r\n\r\n  isModifierKey = (e: KeyboardEvent): boolean => {\r\n    return (\r\n      e.altKey ||\r\n      e.ctrlKey ||\r\n      e.shiftKey ||\r\n      [\"Tab\", \"CapsLock\", \"Esc\", \"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].includes(\r\n        e.code || e.key || this.keyCodeToKey(e?.keyCode)\r\n      )\r\n    );\r\n  };\r\n}\r\n\r\nexport default PhysicalKeyboard;\r\n","import { KeyboardLayoutObject } from \"../interfaces\";\r\n\r\nexport const getDefaultLayout = (): KeyboardLayoutObject => {\r\n  return {\r\n    default: [\r\n      \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\r\n      \"{tab} q w e r t y u i o p [ ] \\\\\",\r\n      \"{lock} a s d f g h j k l ; ' {enter}\",\r\n      \"{shift} z x c v b n m , . / {shift}\",\r\n      \".com @ {space}\",\r\n    ],\r\n    shift: [\r\n      \"~ ! @ # $ % ^ & * ( ) _ + {bksp}\",\r\n      \"{tab} Q W E R T Y U I O P { } |\",\r\n      '{lock} A S D F G H J K L : \" {enter}',\r\n      \"{shift} Z X C V B N M < > ? {shift}\",\r\n      \".com @ {space}\",\r\n    ],\r\n  };\r\n};\r\n","import \"./css/CandidateBox.css\";\r\n\r\nimport Utilities from \"../services/Utilities\";\r\nimport {\r\n  CandidateBoxParams,\r\n  CandidateBoxRenderParams,\r\n  CandidateBoxShowParams,\r\n  KeyboardOptions,\r\n} from \"./../interfaces\";\r\n\r\nclass CandidateBox {\r\n  utilities: Utilities;\r\n  options: KeyboardOptions;\r\n  candidateBoxElement!: HTMLDivElement;\r\n  pageIndex = 0;\r\n  pageSize: number;\r\n\r\n  constructor({ utilities, options }: CandidateBoxParams) {\r\n    this.utilities = utilities;\r\n    this.options = options;\r\n    Utilities.bindMethods(CandidateBox, this);\r\n    this.pageSize = this.utilities.getOptions().layoutCandidatesPageSize || 5;\r\n  }\r\n\r\n  destroy() {\r\n    if (this.candidateBoxElement) {\r\n      this.candidateBoxElement.remove();\r\n      this.pageIndex = 0;\r\n    }\r\n  }\r\n\r\n  show({\r\n    candidateValue,\r\n    targetElement,\r\n    onSelect,\r\n  }: CandidateBoxShowParams): void {\r\n    if (!candidateValue || !candidateValue.length) {\r\n      return;\r\n    }\r\n\r\n    const candidateListPages = this.utilities.chunkArray(\r\n      candidateValue.split(\" \"),\r\n      this.pageSize\r\n    );\r\n\r\n    this.renderPage({\r\n      candidateListPages,\r\n      targetElement,\r\n      pageIndex: this.pageIndex,\r\n      nbPages: candidateListPages.length,\r\n      onItemSelected: (selectedCandidate: string, e: MouseEvent) => {\r\n        onSelect(selectedCandidate, e);\r\n        this.destroy();\r\n      },\r\n    });\r\n  }\r\n\r\n  renderPage({\r\n    candidateListPages,\r\n    targetElement,\r\n    pageIndex,\r\n    nbPages,\r\n    onItemSelected,\r\n  }: CandidateBoxRenderParams) {\r\n    // Remove current candidate box, if any\r\n    this.candidateBoxElement?.remove();\r\n\r\n    // Create candidate box element\r\n    this.candidateBoxElement = document.createElement(\"div\");\r\n    this.candidateBoxElement.className = \"hg-candidate-box\";\r\n\r\n    // Candidate box list\r\n    const candidateListULElement = document.createElement(\"ul\");\r\n    candidateListULElement.className = \"hg-candidate-box-list\";\r\n\r\n    // Create Candidate box list items\r\n    candidateListPages[pageIndex].forEach((candidateListItem) => {\r\n      const candidateListLIElement = document.createElement(\"li\");\r\n      const getMouseEvent = () => {\r\n        const mouseEvent = new (this.options.useTouchEvents ? TouchEvent : MouseEvent)(\"click\");\r\n        Object.defineProperty(mouseEvent, \"target\", {\r\n          value: candidateListLIElement,\r\n        });\r\n        return mouseEvent;\r\n      };\r\n\r\n      candidateListLIElement.className = \"hg-candidate-box-list-item\";\r\n      candidateListLIElement.innerHTML = this.options.display?.[candidateListItem] || candidateListItem;\r\n\r\n      if(this.options.useTouchEvents) {\r\n        candidateListLIElement.ontouchstart = (e: any) =>\r\n          onItemSelected(candidateListItem, e || getMouseEvent());\r\n      } else {\r\n        candidateListLIElement.onclick = (e = getMouseEvent() as MouseEvent) =>\r\n          onItemSelected(candidateListItem, e);\r\n      }\r\n\r\n      // Append list item to ul\r\n      candidateListULElement.appendChild(candidateListLIElement);\r\n    });\r\n\r\n    // Add previous button\r\n    const isPrevBtnElementActive = pageIndex > 0;\r\n    const prevBtnElement = document.createElement(\"div\");\r\n    prevBtnElement.classList.add(\"hg-candidate-box-prev\");\r\n    isPrevBtnElementActive &&\r\n      prevBtnElement.classList.add(\"hg-candidate-box-btn-active\");\r\n\r\n    const prevBtnElementClickAction = () => {\r\n      if (!isPrevBtnElementActive) return;\r\n      this.renderPage({\r\n        candidateListPages,\r\n        targetElement,\r\n        pageIndex: pageIndex - 1,\r\n        nbPages,\r\n        onItemSelected,\r\n      });\r\n    };\r\n\r\n    if(this.options.useTouchEvents) {\r\n      prevBtnElement.ontouchstart = prevBtnElementClickAction;\r\n    } else {\r\n      prevBtnElement.onclick = prevBtnElementClickAction;\r\n    }\r\n    \r\n    this.candidateBoxElement.appendChild(prevBtnElement);\r\n\r\n    // Add elements to container\r\n    this.candidateBoxElement.appendChild(candidateListULElement);\r\n\r\n    // Add next button\r\n    const isNextBtnElementActive = pageIndex < nbPages - 1;\r\n    const nextBtnElement = document.createElement(\"div\");\r\n    nextBtnElement.classList.add(\"hg-candidate-box-next\");\r\n    isNextBtnElementActive &&\r\n      nextBtnElement.classList.add(\"hg-candidate-box-btn-active\");\r\n\r\n    const nextBtnElementClickAction = () => {\r\n      if (!isNextBtnElementActive) return;\r\n      this.renderPage({\r\n        candidateListPages,\r\n        targetElement,\r\n        pageIndex: pageIndex + 1,\r\n        nbPages,\r\n        onItemSelected,\r\n      });\r\n    };\r\n\r\n    if(this.options.useTouchEvents) {\r\n      nextBtnElement.ontouchstart = nextBtnElementClickAction;\r\n    } else {\r\n      nextBtnElement.onclick = nextBtnElementClickAction;\r\n    }\r\n\r\n    this.candidateBoxElement.appendChild(nextBtnElement);\r\n\r\n    // Append candidate box to target element\r\n    targetElement.prepend(this.candidateBoxElement);\r\n  }\r\n}\r\n\r\nexport default CandidateBox;\r\n","import \"./css/Keyboard.css\";\r\n\r\nimport { getDefaultLayout } from \"../services/KeyboardLayout\";\r\nimport PhysicalKeyboard from \"../services/PhysicalKeyboard\";\r\nimport Utilities from \"../services/Utilities\";\r\nimport {\r\n  KeyboardOptions,\r\n  KeyboardInput,\r\n  KeyboardButtonElements,\r\n  KeyboardHandlerEvent,\r\n  KeyboardElement,\r\n  SKWindow,\r\n} from \"../interfaces\";\r\nimport CandidateBox from \"./CandidateBox\";\r\n\r\n/**\r\n * Root class for simple-keyboard.\r\n * This class:\r\n * - Parses the options\r\n * - Renders the rows and buttons\r\n * - Handles button functionality\r\n */\r\nclass SimpleKeyboard {\r\n  input!: KeyboardInput;\r\n  options!: KeyboardOptions;\r\n  utilities!: Utilities;\r\n  caretPosition!: number | null;\r\n  caretPositionEnd!: number | null;\r\n  keyboardDOM!: KeyboardElement;\r\n  keyboardPluginClasses!: string;\r\n  keyboardDOMClass!: string;\r\n  buttonElements!: KeyboardButtonElements;\r\n  currentInstanceName!: string;\r\n  allKeyboardInstances!: { [key: string]: SimpleKeyboard };\r\n  keyboardInstanceNames!: string[];\r\n  isFirstKeyboardInstance!: boolean;\r\n  physicalKeyboard!: PhysicalKeyboard;\r\n  modules!: { [key: string]: any };\r\n  activeButtonClass!: string;\r\n  holdInteractionTimeout!: number;\r\n  holdTimeout!: number;\r\n  isMouseHold!: boolean;\r\n  initialized!: boolean;\r\n  candidateBox!: CandidateBox | null;\r\n  keyboardRowsDOM!: KeyboardElement;\r\n  defaultName = \"default\";\r\n  activeInputElement: HTMLInputElement | HTMLTextAreaElement | null = null;\r\n\r\n  /**\r\n   * Creates an instance of SimpleKeyboard\r\n   * @param {Array} selectorOrOptions If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\r\n   */\r\n  constructor(selectorOrOptions?: string | HTMLDivElement | KeyboardOptions, keyboardOptions?: KeyboardOptions) {\r\n    if (typeof window === \"undefined\") return;\r\n\r\n    const { keyboardDOMClass, keyboardDOM, options = {} } = this.handleParams(selectorOrOptions, keyboardOptions);\r\n\r\n    /**\r\n     * Initializing Utilities\r\n     */\r\n    this.utilities = new Utilities({\r\n      getOptions: this.getOptions,\r\n      getCaretPosition: this.getCaretPosition,\r\n      getCaretPositionEnd: this.getCaretPositionEnd,\r\n      dispatch: this.dispatch,\r\n    });\r\n\r\n    /**\r\n     * Caret position\r\n     */\r\n    this.caretPosition = null;\r\n\r\n    /**\r\n     * Caret position end\r\n     */\r\n    this.caretPositionEnd = null;\r\n\r\n    /**\r\n     * Processing options\r\n     */\r\n    this.keyboardDOM = keyboardDOM;\r\n\r\n    /**\r\n     * @type {object}\r\n     * @property {object} layout Modify the keyboard layout.\r\n     * @property {string} layoutName Specifies which layout should be used.\r\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\r\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\r\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\r\n     * @property {array} buttonTheme A prop to add your own css classes to one or several buttons.\r\n     * @property {array} buttonAttributes A prop to add your own attributes to one or several buttons.\r\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\r\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\r\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\r\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\r\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\r\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\r\n     * @property {boolean} physicalKeyboardHighlightPress Presses keys highlighted by physicalKeyboardHighlight\r\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\r\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\r\n     * @property {boolean} physicalKeyboardHighlightPressUseClick Whether physicalKeyboardHighlightPress should use clicks to trigger buttons.\r\n     * @property {boolean} physicalKeyboardHighlightPressUsePointerEvents Whether physicalKeyboardHighlightPress should use pointer events to trigger buttons.\r\n     * @property {boolean} physicalKeyboardHighlightPreventDefault Whether physicalKeyboardHighlight should use preventDefault to disable default browser actions.\r\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\r\n     * @property {boolean} preventMouseUpDefault Calling preventDefault for the mouseup events.\r\n     * @property {boolean} stopMouseDownPropagation Stops pointer down events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {boolean} stopMouseUpPropagation Stops pointer up events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\r\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\r\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n     * @property {function(keyboard: Keyboard):void} beforeInputUpdate Perform an action before any input change\r\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\r\n     * @property {boolean} useButtonTag Render buttons as a button element instead of a div element.\r\n     * @property {boolean} disableCaretPositioning A prop to ensure characters are always be added/removed at the end of the string.\r\n     * @property {object} inputPattern Restrains input(s) change to the defined regular expression pattern.\r\n     * @property {boolean} useTouchEvents Instructs simple-keyboard to use touch events instead of click events.\r\n     * @property {boolean} autoUseTouchEvents Enable useTouchEvents automatically when touch device is detected.\r\n     * @property {boolean} useMouseEvents Opt out of PointerEvents handling, falling back to the prior mouse event logic.\r\n     * @property {function} destroy Clears keyboard listeners and DOM elements.\r\n     * @property {boolean} disableButtonHold Disable button hold action.\r\n     * @property {boolean} rtl Adds unicode right-to-left control characters to input return values.\r\n     * @property {function} onKeyReleased Executes the callback function on key release.\r\n     * @property {array} modules Module classes to be loaded by simple-keyboard.\r\n     * @property {boolean} enableLayoutCandidates Enable input method editor candidate list support.\r\n     * @property {object} excludeFromLayout Buttons to exclude from layout\r\n     * @property {number} layoutCandidatesPageSize Determines size of layout candidate list\r\n     * @property {boolean} layoutCandidatesCaseSensitiveMatch Determines whether layout candidate match should be case sensitive.\r\n     * @property {boolean} disableCandidateNormalization Disables the automatic normalization for selected layout candidates\r\n     * @property {boolean} enableLayoutCandidatesKeyPress Enables onKeyPress triggering for layoutCandidate items\r\n     * @property {boolean} updateCaretOnSelectionChange Updates caret when selectionchange event is fired\r\n     * @property {boolean} clickOnMouseDown When useMouseEvents is enabled, this option allows you to trigger a button click event on mousedown\r\n     */\r\n    this.options = {\r\n      layoutName: \"default\",\r\n      theme: \"hg-theme-default\",\r\n      inputName: \"default\",\r\n      preventMouseDownDefault: false,\r\n      enableLayoutCandidates: true,\r\n      excludeFromLayout: {},\r\n      ...options,\r\n    };\r\n\r\n    /**\r\n     * @type {object} Classes identifying loaded plugins\r\n     */\r\n    this.keyboardPluginClasses = \"\";\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(SimpleKeyboard, this);\r\n\r\n    /**\r\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\r\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\r\n     * @example\r\n     * // To get entered input\r\n     * const input = keyboard.getInput();\r\n     *\r\n     * // To clear entered input.\r\n     * keyboard.clearInput();\r\n     *\r\n     * @type {object}\r\n     * @property {object} default Default SimpleKeyboard internal input.\r\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\r\n     */\r\n    const { inputName = this.defaultName } = this.options;\r\n    this.input = {};\r\n    this.input[inputName] = \"\";\r\n\r\n    /**\r\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\r\n     */\r\n    this.keyboardDOMClass = keyboardDOMClass;\r\n\r\n    /**\r\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\r\n     */\r\n    this.buttonElements = {};\r\n\r\n    /**\r\n     * Simple-keyboard Instances\r\n     * This enables multiple simple-keyboard support with easier management\r\n     */\r\n    if (!(window as SKWindow)[\"SimpleKeyboardInstances\"]) (window as SKWindow)[\"SimpleKeyboardInstances\"] = {};\r\n\r\n    this.currentInstanceName = this.utilities.camelCase(this.keyboardDOMClass);\r\n    (window as SKWindow)[\"SimpleKeyboardInstances\"][this.currentInstanceName] = this;\r\n\r\n    /**\r\n     * Instance vars\r\n     */\r\n    this.allKeyboardInstances = (window as SKWindow)[\"SimpleKeyboardInstances\"];\r\n    this.keyboardInstanceNames = Object.keys((window as SKWindow)[\"SimpleKeyboardInstances\"]);\r\n    this.isFirstKeyboardInstance = this.keyboardInstanceNames[0] === this.currentInstanceName;\r\n\r\n    /**\r\n     * Physical Keyboard support\r\n     */\r\n    this.physicalKeyboard = new PhysicalKeyboard({\r\n      dispatch: this.dispatch,\r\n      getOptions: this.getOptions,\r\n    });\r\n\r\n    /**\r\n     * Initializing CandidateBox\r\n     */\r\n    this.candidateBox = this.options.enableLayoutCandidates\r\n      ? new CandidateBox({\r\n          utilities: this.utilities,\r\n          options: this.options,\r\n        })\r\n      : null;\r\n\r\n    /**\r\n     * Rendering keyboard\r\n     */\r\n    if (this.keyboardDOM) this.render();\r\n    else {\r\n      console.warn(`\".${keyboardDOMClass}\" was not found in the DOM.`);\r\n      throw new Error(\"KEYBOARD_DOM_ERROR\");\r\n    }\r\n\r\n    /**\r\n     * Modules\r\n     */\r\n    this.modules = {};\r\n    this.loadModules();\r\n  }\r\n\r\n  /**\r\n   * parseParams\r\n   */\r\n  handleParams = (\r\n    selectorOrOptions?: string | HTMLDivElement | KeyboardOptions,\r\n    keyboardOptions?: KeyboardOptions\r\n  ): {\r\n    keyboardDOMClass: string;\r\n    keyboardDOM: KeyboardElement;\r\n    options: Partial<KeyboardOptions | undefined>;\r\n  } => {\r\n    let keyboardDOMClass;\r\n    let keyboardDOM;\r\n    let options;\r\n\r\n    /**\r\n     * If first parameter is a string:\r\n     * Consider it as an element's class\r\n     */\r\n    if (typeof selectorOrOptions === \"string\") {\r\n      keyboardDOMClass = selectorOrOptions.split(\".\").join(\"\");\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`) as KeyboardElement;\r\n      options = keyboardOptions;\r\n\r\n      /**\r\n       * If first parameter is an KeyboardElement\r\n       * Consider it as the keyboard DOM element\r\n       */\r\n    } else if (selectorOrOptions instanceof HTMLDivElement) {\r\n      /**\r\n       * This element must have a class, otherwise throw\r\n       */\r\n      if (!selectorOrOptions.className) {\r\n        console.warn(\"Any DOM element passed as parameter must have a class.\");\r\n        throw new Error(\"KEYBOARD_DOM_CLASS_ERROR\");\r\n      }\r\n\r\n      keyboardDOMClass = selectorOrOptions.className.split(\" \")[0];\r\n      keyboardDOM = selectorOrOptions;\r\n      options = keyboardOptions;\r\n\r\n      /**\r\n       * Otherwise, search for .simple-keyboard DOM element\r\n       */\r\n    } else {\r\n      keyboardDOMClass = \"simple-keyboard\";\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`) as KeyboardElement;\r\n      options = selectorOrOptions;\r\n    }\r\n\r\n    return {\r\n      keyboardDOMClass,\r\n      keyboardDOM,\r\n      options,\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Getters\r\n   */\r\n  getOptions = (): KeyboardOptions => this.options;\r\n  getCaretPosition = (): number | null => this.caretPosition;\r\n  getCaretPositionEnd = (): number | null => this.caretPositionEnd;\r\n\r\n  /**\r\n   * Changes the internal caret position\r\n   * @param {number} position The caret's start position\r\n   * @param {number} positionEnd The caret's end position\r\n   */\r\n  setCaretPosition(position: number | null, endPosition = position): void {\r\n    this.caretPosition = position;\r\n    this.caretPositionEnd = endPosition;\r\n  }\r\n\r\n  /**\r\n   * Retrieve the candidates for a given input\r\n   * @param input The input string to check\r\n   */\r\n  getInputCandidates(input: string): { candidateKey: string; candidateValue: string } | Record<string, never> {\r\n    const { layoutCandidates: layoutCandidatesObj, layoutCandidatesCaseSensitiveMatch } = this.options;\r\n\r\n    if (!layoutCandidatesObj || typeof layoutCandidatesObj !== \"object\") {\r\n      return {};\r\n    }\r\n\r\n    const layoutCandidates = Object.keys(layoutCandidatesObj).filter((layoutCandidate: string) => {\r\n      const inputSubstr = input.substring(0, this.getCaretPositionEnd() || 0) || input;\r\n      const regexp = new RegExp(\r\n        `${this.utilities.escapeRegex(layoutCandidate)}$`,\r\n        layoutCandidatesCaseSensitiveMatch ? \"g\" : \"gi\"\r\n      );\r\n      const matches = [...inputSubstr.matchAll(regexp)];\r\n      return !!matches.length;\r\n    });\r\n\r\n    if (layoutCandidates.length > 1) {\r\n      const candidateKey = layoutCandidates.sort((a, b) => b.length - a.length)[0];\r\n      return {\r\n        candidateKey,\r\n        candidateValue: layoutCandidatesObj[candidateKey],\r\n      };\r\n    } else if (layoutCandidates.length) {\r\n      const candidateKey = layoutCandidates[0];\r\n      return {\r\n        candidateKey,\r\n        candidateValue: layoutCandidatesObj[candidateKey],\r\n      };\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows a suggestion box with a list of candidate words\r\n   * @param candidates The chosen candidates string as defined in the layoutCandidates option\r\n   * @param targetElement The element next to which the candidates box will be shown\r\n   */\r\n  showCandidatesBox(candidateKey: string, candidateValue: string, targetElement: KeyboardElement): void {\r\n    if (this.candidateBox) {\r\n      this.candidateBox.show({\r\n        candidateValue,\r\n        targetElement,\r\n        onSelect: (selectedCandidate: string, e: MouseEvent) => {\r\n          const { layoutCandidatesCaseSensitiveMatch, disableCandidateNormalization, enableLayoutCandidatesKeyPress } =\r\n            this.options;\r\n\r\n          let candidateStr = selectedCandidate;\r\n\r\n          if (!disableCandidateNormalization) {\r\n            /**\r\n             * Making sure that our suggestions are not composed characters\r\n             */\r\n            candidateStr = selectedCandidate.normalize(\"NFD\");\r\n          }\r\n\r\n          /**\r\n           * Perform an action before any input change\r\n           */\r\n          if (typeof this.options.beforeInputUpdate === \"function\") {\r\n            this.options.beforeInputUpdate(this);\r\n          }\r\n\r\n          const currentInput = this.getInput(this.options.inputName, true);\r\n          const initialCaretPosition = this.getCaretPositionEnd() || 0;\r\n          const inputSubstr = currentInput.substring(0, initialCaretPosition || 0) || currentInput;\r\n\r\n          const regexp = new RegExp(\r\n            `${this.utilities.escapeRegex(candidateKey)}$`,\r\n            layoutCandidatesCaseSensitiveMatch ? \"g\" : \"gi\"\r\n          );\r\n          const newInputSubstr = inputSubstr.replace(regexp, candidateStr);\r\n          const newInput = currentInput.replace(inputSubstr, newInputSubstr);\r\n\r\n          const caretPositionDiff = newInputSubstr.length - inputSubstr.length;\r\n          let newCaretPosition = (initialCaretPosition || currentInput.length) + caretPositionDiff;\r\n\r\n          if (newCaretPosition < 0) newCaretPosition = 0;\r\n\r\n          this.setInput(newInput, this.options.inputName, true);\r\n          this.setCaretPosition(newCaretPosition);\r\n\r\n          /**\r\n           * Calling onKeyPress\r\n           * We pass in the composed candidate instead of the decomposed one\r\n           * To prevent confusion for users\r\n           */\r\n          if (enableLayoutCandidatesKeyPress && typeof this.options.onKeyPress === \"function\") {\r\n            this.options.onKeyPress(selectedCandidate, e);\r\n          }\r\n\r\n          if (typeof this.options.onChange === \"function\") {\r\n            this.options.onChange(this.getInput(this.options.inputName, true), e);\r\n          }\r\n\r\n          /**\r\n           * Calling onChangeAll\r\n           */\r\n          if (typeof this.options.onChangeAll === \"function\") this.options.onChangeAll(this.getAllInputs(), e);\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles clicks made to keyboard buttons\r\n   * @param  {string} button The button's layout name.\r\n   */\r\n  handleButtonClicked(button: string, e?: KeyboardHandlerEvent): void {\r\n    const { inputName = this.defaultName, debug } = this.options;\r\n    /**\r\n     * Ignoring placeholder buttons\r\n     */\r\n    if (button === \"{//}\") return;\r\n\r\n    /**\r\n     * Creating inputName if it doesn't exist\r\n     */\r\n    if (!this.input[inputName]) this.input[inputName] = \"\";\r\n\r\n    /**\r\n     * Perform an action before any input change\r\n     */\r\n    if (typeof this.options.beforeInputUpdate === \"function\") {\r\n      this.options.beforeInputUpdate(this);\r\n    }\r\n\r\n    /**\r\n     * Calculating new input\r\n     */\r\n    const updatedInput = this.utilities.getUpdatedInput(\r\n      button,\r\n      this.input[inputName],\r\n      this.caretPosition,\r\n      this.caretPositionEnd\r\n    );\r\n\r\n    /**\r\n     * EDGE CASE: Check for whole input selection changes that will yield same updatedInput\r\n     */\r\n    if (this.utilities.isStandardButton(button) && this.activeInputElement) {\r\n      const isEntireInputSelection =\r\n        this.input[inputName] &&\r\n        this.input[inputName] === updatedInput &&\r\n        this.caretPosition === 0 &&\r\n        this.caretPositionEnd === updatedInput.length;\r\n\r\n      if (isEntireInputSelection) {\r\n        this.setInput(\"\", this.options.inputName, true);\r\n        this.setCaretPosition(0);\r\n        this.activeInputElement.value = \"\";\r\n        this.activeInputElement.setSelectionRange(0, 0);\r\n        this.handleButtonClicked(button, e);\r\n        return;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Calling onKeyPress\r\n     */\r\n    if (typeof this.options.onKeyPress === \"function\") this.options.onKeyPress(button, e);\r\n\r\n    if (\r\n      // If input will change as a result of this button press\r\n      this.input[inputName] !== updatedInput &&\r\n      // This pertains to the \"inputPattern\" option:\r\n      // If inputPattern isn't set\r\n      (!this.options.inputPattern ||\r\n        // Or, if it is set and if the pattern is valid - we proceed.\r\n        (this.options.inputPattern && this.inputPatternIsValid(updatedInput)))\r\n    ) {\r\n      /**\r\n       * If maxLength and handleMaxLength yield true, halting\r\n       */\r\n      if (this.options.maxLength && this.utilities.handleMaxLength(this.input, updatedInput)) {\r\n        return;\r\n      }\r\n\r\n      /**\r\n       * Updating input\r\n       */\r\n      const newInputValue = this.utilities.getUpdatedInput(\r\n        button,\r\n        this.input[inputName],\r\n        this.caretPosition,\r\n        this.caretPositionEnd,\r\n        true\r\n      );\r\n\r\n      this.setInput(newInputValue, this.options.inputName, true);\r\n\r\n      if (debug) console.log(\"Input changed:\", this.getAllInputs());\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          \"Caret at: \",\r\n          this.getCaretPosition(),\r\n          this.getCaretPositionEnd(),\r\n          `(${this.keyboardDOMClass})`,\r\n          e?.type\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Enforce syncInstanceInputs, if set\r\n       */\r\n      if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n\r\n      /**\r\n       * Calling onChange\r\n       */\r\n      if (typeof this.options.onChange === \"function\")\r\n        this.options.onChange(this.getInput(this.options.inputName, true), e);\r\n\r\n      /**\r\n       * Calling onChangeAll\r\n       */\r\n      if (typeof this.options.onChangeAll === \"function\") this.options.onChangeAll(this.getAllInputs(), e);\r\n\r\n      /**\r\n       * Check if this new input has candidates (suggested words)\r\n       */\r\n      if (e?.target && this.options.enableLayoutCandidates) {\r\n        const { candidateKey, candidateValue } = this.getInputCandidates(updatedInput);\r\n\r\n        if (candidateKey && candidateValue) {\r\n          this.showCandidatesBox(candidateKey, candidateValue, this.keyboardDOM);\r\n        } else {\r\n          this.candidateBox?.destroy();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * After a button is clicked the selection (if any) will disappear\r\n     * we should reflect this in our state, as applicable\r\n     */\r\n    if (this.caretPositionEnd && this.caretPosition !== this.caretPositionEnd) {\r\n      this.setCaretPosition(this.caretPositionEnd, this.caretPositionEnd);\r\n\r\n      if (this.activeInputElement) {\r\n        this.activeInputElement.setSelectionRange(this.caretPositionEnd, this.caretPositionEnd);\r\n      }\r\n\r\n      if (this.options.debug) {\r\n        console.log(\"Caret position aligned\", this.caretPosition);\r\n      }\r\n    }\r\n\r\n    if (debug) {\r\n      console.log(\"Key pressed:\", button);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get mouse hold state\r\n   */\r\n  getMouseHold() {\r\n    return this.isMouseHold;\r\n  }\r\n\r\n  /**\r\n   * Mark mouse hold state as set\r\n   */\r\n  setMouseHold(value: boolean) {\r\n    if (this.options.syncInstanceInputs) {\r\n      this.dispatch((instance: SimpleKeyboard) => {\r\n        instance.isMouseHold = value;\r\n      });\r\n    } else {\r\n      this.isMouseHold = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mousedown\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonMouseDown(button: string, e: KeyboardHandlerEvent): void {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseDownDefault) e.preventDefault();\r\n      if (this.options.stopMouseDownPropagation) e.stopPropagation();\r\n\r\n      /**\r\n       * Add active class\r\n       */\r\n      e.target.classList.add(this.activeButtonClass);\r\n    }\r\n\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n    if (this.holdTimeout) clearTimeout(this.holdTimeout);\r\n\r\n    /**\r\n     * @type {boolean} Whether the mouse is being held onKeyPress\r\n     */\r\n    this.setMouseHold(true);\r\n\r\n    /**\r\n     * @type {object} Time to wait until a key hold is detected\r\n     */\r\n    if (!this.options.disableButtonHold) {\r\n      this.holdTimeout = window.setTimeout(() => {\r\n        if (\r\n          (this.getMouseHold() &&\r\n            // TODO: This needs to be configurable through options\r\n            ((!button.includes(\"{\") && !button.includes(\"}\")) ||\r\n              button === \"{delete}\" ||\r\n              button === \"{backspace}\" ||\r\n              button === \"{bksp}\" ||\r\n              button === \"{space}\" ||\r\n              button === \"{tab}\")) ||\r\n          button === \"{arrowright}\" ||\r\n          button === \"{arrowleft}\" ||\r\n          button === \"{arrowup}\" ||\r\n          button === \"{arrowdown}\"\r\n        ) {\r\n          if (this.options.debug) console.log(\"Button held:\", button);\r\n\r\n          this.handleButtonHold(button);\r\n        }\r\n        clearTimeout(this.holdTimeout);\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mouseup\r\n   */\r\n  handleButtonMouseUp(button?: string, e?: KeyboardHandlerEvent): void {\r\n    if (e) {\r\n      /**\r\n       * Handle event options\r\n       */\r\n      if (this.options.preventMouseUpDefault && e.preventDefault) e.preventDefault();\r\n      if (this.options.stopMouseUpPropagation && e.stopPropagation) e.stopPropagation();\r\n\r\n      /* istanbul ignore next */\r\n      const isKeyboard =\r\n        e.target === this.keyboardDOM ||\r\n        (e.target && this.keyboardDOM.contains(e.target)) ||\r\n        (this.candidateBox &&\r\n          this.candidateBox.candidateBoxElement &&\r\n          (e.target === this.candidateBox.candidateBoxElement ||\r\n            (e.target && this.candidateBox.candidateBoxElement.contains(e.target))));\r\n\r\n      /**\r\n       * On click outside, remove candidateBox\r\n       */\r\n      if (!isKeyboard && this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Remove active class\r\n     */\r\n    this.recurseButtons((buttonElement: Element) => {\r\n      buttonElement.classList.remove(this.activeButtonClass);\r\n    });\r\n\r\n    this.setMouseHold(false);\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * Calling onKeyReleased\r\n     */\r\n    if (button && typeof this.options.onKeyReleased === \"function\") this.options.onKeyReleased(button, e);\r\n  }\r\n\r\n  /**\r\n   * Handles container mousedown\r\n   */\r\n  handleKeyboardContainerMouseDown(e: KeyboardHandlerEvent): void {\r\n    /**\r\n     * Handle event options\r\n     */\r\n    if (this.options.preventMouseDownDefault) e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Handles button hold\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonHold(button: string): void {\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * @type {object} Timeout dictating the speed of key hold iterations\r\n     */\r\n    this.holdInteractionTimeout = window.setTimeout(() => {\r\n      if (this.getMouseHold()) {\r\n        this.handleButtonClicked(button);\r\n        this.handleButtonHold(button);\r\n      } else {\r\n        clearTimeout(this.holdInteractionTimeout);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances (if you have several instances).\r\n   */\r\n  syncInstanceInputs(): void {\r\n    this.dispatch((instance: SimpleKeyboard) => {\r\n      instance.replaceInput(this.input);\r\n      instance.setCaretPosition(this.caretPosition, this.caretPositionEnd);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the keyboard’s input.\r\n   * @param {string} [inputName] optional - the internal input to select\r\n   */\r\n  clearInput(inputName: string = this.options.inputName || this.defaultName): void {\r\n    this.input[inputName] = \"\";\r\n\r\n    /**\r\n     * Reset caretPosition\r\n     */\r\n    this.setCaretPosition(0);\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Get the keyboard’s input (You can also get it from the onChange prop).\r\n   * @param  {string} [inputName] optional - the internal input to select\r\n   */\r\n  getInput(inputName: string = this.options.inputName || this.defaultName, skipSync = false): string {\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs && !skipSync) this.syncInstanceInputs();\r\n\r\n    if (this.options.rtl) {\r\n      // Remove existing control chars\r\n      const inputWithoutRTLControl = this.input[inputName].replace(\"\\u202B\", \"\").replace(\"\\u202C\", \"\");\r\n\r\n      return \"\\u202B\" + inputWithoutRTLControl + \"\\u202C\";\r\n    } else {\r\n      return this.input[inputName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all simple-keyboard inputs\r\n   */\r\n  getAllInputs(): KeyboardInput {\r\n    const output = {} as KeyboardInput;\r\n    const inputNames = Object.keys(this.input);\r\n\r\n    inputNames.forEach((inputName) => {\r\n      output[inputName] = this.getInput(inputName, true);\r\n    });\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Set the keyboard’s input.\r\n   * @param  {string} input the input value\r\n   * @param  {string} inputName optional - the internal input to select\r\n   */\r\n  setInput(input: string, inputName: string = this.options.inputName || this.defaultName, skipSync?: boolean): void {\r\n    this.input[inputName] = input;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (!skipSync && this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Replace the input object (`keyboard.input`)\r\n   * @param  {object} inputObj The input object\r\n   */\r\n  replaceInput(inputObj: KeyboardInput): void {\r\n    this.input = inputObj;\r\n  }\r\n\r\n  /**\r\n   * Set new option or modify existing ones after initialization.\r\n   * @param  {object} options The options to set\r\n   */\r\n  setOptions(options = {}): void {\r\n    const changedOptions = this.changedOptions(options);\r\n    this.options = Object.assign(this.options, options);\r\n\r\n    if (changedOptions.length) {\r\n      if (this.options.debug) {\r\n        console.log(\"changedOptions\", changedOptions);\r\n      }\r\n\r\n      /**\r\n       * Some option changes require adjustments before re-render\r\n       */\r\n      this.onSetOptions(changedOptions);\r\n\r\n      /**\r\n       * Rendering\r\n       */\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Detecting changes to non-function options\r\n   * This allows us to ascertain whether a button re-render is needed\r\n   */\r\n  changedOptions(newOptions: Partial<KeyboardOptions>): string[] {\r\n    return Object.keys(newOptions).filter(\r\n      (optionName) => JSON.stringify(newOptions[optionName]) !== JSON.stringify(this.options[optionName])\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Executing actions depending on changed options\r\n   * @param  {object} options The options to set\r\n   */\r\n  onSetOptions(changedOptions: string[] = []): void {\r\n    /**\r\n     * Changed: layoutName\r\n     */\r\n    if (changedOptions.includes(\"layoutName\")) {\r\n      /**\r\n       * Reset candidateBox\r\n       */\r\n      if (this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Changed: layoutCandidatesPageSize, layoutCandidates\r\n     */\r\n    if (changedOptions.includes(\"layoutCandidatesPageSize\") || changedOptions.includes(\"layoutCandidates\")) {\r\n      /**\r\n       * Reset and recreate candidateBox\r\n       */\r\n      if (this.candidateBox) {\r\n        this.candidateBox.destroy();\r\n        this.candidateBox = new CandidateBox({\r\n          utilities: this.utilities,\r\n          options: this.options,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all keyboard rows and reset keyboard values.\r\n   * Used internally between re-renders.\r\n   */\r\n  resetRows(): void {\r\n    if (this.keyboardRowsDOM) {\r\n      this.keyboardRowsDOM.remove();\r\n    }\r\n\r\n    this.keyboardDOM.className = this.keyboardDOMClass;\r\n    this.keyboardDOM.setAttribute(\"data-skInstance\", this.currentInstanceName);\r\n    this.buttonElements = {};\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\r\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\r\n   */\r\n  // eslint-disable-next-line no-unused-vars\r\n  dispatch(callback: (instance: SimpleKeyboard, key?: string) => void): void {\r\n    if (!(window as SKWindow)[\"SimpleKeyboardInstances\"]) {\r\n      console.warn(`SimpleKeyboardInstances is not defined. Dispatch cannot be called.`);\r\n      throw new Error(\"INSTANCES_VAR_ERROR\");\r\n    }\r\n\r\n    return Object.keys((window as SKWindow)[\"SimpleKeyboardInstances\"]).forEach((key) => {\r\n      callback((window as SKWindow)[\"SimpleKeyboardInstances\"][key], key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  addButtonTheme(buttons: string, className: string): void {\r\n    if (!className || !buttons) return;\r\n\r\n    buttons.split(\" \").forEach((button) => {\r\n      className.split(\" \").forEach((classNameItem) => {\r\n        if (!this.options.buttonTheme) this.options.buttonTheme = [];\r\n\r\n        let classNameFound = false;\r\n\r\n        /**\r\n         * If class is already defined, we add button to class definition\r\n         */\r\n        this.options.buttonTheme.map((buttonTheme) => {\r\n          if (buttonTheme?.class.split(\" \").includes(classNameItem)) {\r\n            classNameFound = true;\r\n\r\n            const buttonThemeArray = buttonTheme.buttons.split(\" \");\r\n            if (!buttonThemeArray.includes(button)) {\r\n              classNameFound = true;\r\n              buttonThemeArray.push(button);\r\n              buttonTheme.buttons = buttonThemeArray.join(\" \");\r\n            }\r\n          }\r\n          return buttonTheme;\r\n        });\r\n\r\n        /**\r\n         * If class is not defined, we create a new entry\r\n         */\r\n        if (!classNameFound) {\r\n          this.options.buttonTheme.push({\r\n            class: classNameItem,\r\n            buttons: buttons,\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  removeButtonTheme(buttons: string, className: string): void {\r\n    /**\r\n     * When called with empty parameters, remove all button themes\r\n     */\r\n    if (!buttons && !className) {\r\n      this.options.buttonTheme = [];\r\n      this.render();\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * If buttons are passed and buttonTheme has items\r\n     */\r\n    if (buttons && Array.isArray(this.options.buttonTheme) && this.options.buttonTheme.length) {\r\n      const buttonArray = buttons.split(\" \");\r\n      buttonArray.forEach((button) => {\r\n        this.options?.buttonTheme?.map((buttonTheme, index) => {\r\n          /**\r\n           * If className is set, we affect the buttons only for that class\r\n           * Otherwise, we afect all classes\r\n           */\r\n          if ((buttonTheme && className && className.includes(buttonTheme.class)) || !className) {\r\n            const filteredButtonArray = buttonTheme?.buttons.split(\" \").filter((item) => item !== button);\r\n\r\n            /**\r\n             * If buttons left, return them, otherwise, remove button Theme\r\n             */\r\n            if (buttonTheme && filteredButtonArray?.length) {\r\n              buttonTheme.buttons = filteredButtonArray.join(\" \");\r\n            } else {\r\n              this.options.buttonTheme?.splice(index, 1);\r\n              buttonTheme = null;\r\n            }\r\n          }\r\n\r\n          return buttonTheme;\r\n        });\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\r\n   * @param  {string} button The button layout name to select\r\n   */\r\n  getButtonElement(button: string): KeyboardElement | KeyboardElement[] | undefined {\r\n    let output;\r\n\r\n    const buttonArr = this.buttonElements[button];\r\n    if (buttonArr) {\r\n      if (buttonArr.length > 1) {\r\n        output = buttonArr;\r\n      } else {\r\n        output = buttonArr[0];\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * This handles the \"inputPattern\" option\r\n   * by checking if the provided inputPattern passes\r\n   */\r\n  inputPatternIsValid(inputVal: string): boolean {\r\n    const inputPatternRaw = this.options.inputPattern;\r\n    let inputPattern;\r\n\r\n    /**\r\n     * Check if input pattern is global or targeted to individual inputs\r\n     */\r\n    if (inputPatternRaw instanceof RegExp) {\r\n      inputPattern = inputPatternRaw;\r\n    } else {\r\n      inputPattern = inputPatternRaw[this.options.inputName || this.defaultName];\r\n    }\r\n\r\n    if (inputPattern && inputVal) {\r\n      const didInputMatch = inputPattern.test(inputVal);\r\n\r\n      if (this.options.debug) {\r\n        console.log(`inputPattern (\"${inputPattern}\"): ${didInputMatch ? \"passed\" : \"did not pass!\"}`);\r\n      }\r\n\r\n      return didInputMatch;\r\n    } else {\r\n      /**\r\n       * inputPattern doesn't seem to be set for the current input, or input is empty. Pass.\r\n       */\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles simple-keyboard event listeners\r\n   */\r\n  setEventListeners(): void {\r\n    /**\r\n     * Only first instance should set the event listeners\r\n     */\r\n    if (this.isFirstKeyboardInstance || !this.allKeyboardInstances) {\r\n      if (this.options.debug) {\r\n        console.log(`Caret handling started (${this.keyboardDOMClass})`);\r\n      }\r\n\r\n      const { physicalKeyboardHighlightPreventDefault = false } = this.options;\r\n\r\n      // LPJr: moved event listeners to the keyboardDOM element from the document\r\n      // adding tabIndex to the keyboardDOM element to allow it to receive focus\r\n      this.keyboardDOM.tabIndex = 0;\r\n      this.keyboardDOM.style.outline = \"none\";\r\n\r\n      // LPJr: added event listener to focus the keyboardDOM element when it is clicked\r\n      // third parameter controls Capture and is set to false to allow the event to bubble up\r\n      document.addEventListener(\r\n        \"keydown\",\r\n        (event) => {\r\n          if (physicalKeyboardHighlightPreventDefault) {\r\n            event.preventDefault();\r\n          }\r\n\r\n          this.handleKeyDown(event);\r\n\r\n          // // Ensure keyboardDOM stays in focus\r\n          // if (document.activeElement !== this.keyboardDOM) {\r\n          //   this.keyboardDOM.focus();\r\n          // }\r\n        },\r\n        physicalKeyboardHighlightPreventDefault\r\n      ); // Capture mode ensures this fires before bubbling\r\n\r\n      document.addEventListener(\r\n        \"keyup\",\r\n        (event) => {\r\n          if (physicalKeyboardHighlightPreventDefault) {\r\n            event.preventDefault();\r\n          }\r\n\r\n          this.handleKeyUp(event);\r\n\r\n          // Ensure keyboardDOM stays in focus\r\n          if (document.activeElement !== this.keyboardDOM) {\r\n            this.keyboardDOM.focus();\r\n          }\r\n        },\r\n        physicalKeyboardHighlightPreventDefault\r\n      );\r\n\r\n      /**\r\n       * Event Listeners\r\n       */\r\n      // LPJr: removed event listeners from the document but added my own as seen directly above\r\n      // document.addEventListener(\"keyup\", this.handleKeyUp, physicalKeyboardHighlightPreventDefault);\r\n      // document.addEventListener(\"keydown\", this.handleKeyDown, physicalKeyboardHighlightPreventDefault);\r\n      document.addEventListener(\"mouseup\", this.handleMouseUp);\r\n      document.addEventListener(\"touchend\", this.handleTouchEnd);\r\n\r\n      if (this.options.updateCaretOnSelectionChange) {\r\n        document.addEventListener(\"selectionchange\", this.handleSelectionChange);\r\n      }\r\n\r\n      document.addEventListener(\"select\", this.handleSelect);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyUp\r\n   */\r\n  handleKeyUp(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyUp(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyDown\r\n   */\r\n  handleKeyDown(event: KeyboardHandlerEvent): void {\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyDown(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: MouseUp\r\n   */\r\n  handleMouseUp(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: TouchEnd\r\n   */\r\n  /* istanbul ignore next */\r\n  handleTouchEnd(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: Select\r\n   */\r\n  /* istanbul ignore next */\r\n  handleSelect(event: KeyboardHandlerEvent): void {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: SelectionChange\r\n   */\r\n  /* istanbul ignore next */\r\n  handleSelectionChange(event: KeyboardHandlerEvent): void {\r\n    /**\r\n     * Firefox is not reporting the correct caret position through this event\r\n     * https://github.com/hodgef/simple-keyboard/issues/1839\r\n     */\r\n    if (navigator.userAgent.includes(\"Firefox\")) {\r\n      return;\r\n    }\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Called by {@link setEventListeners} when an event that warrants a cursor position update is triggered\r\n   */\r\n  caretEventHandler(event: KeyboardHandlerEvent): void {\r\n    let targetTagName: string;\r\n    if (event.target.tagName) {\r\n      targetTagName = event.target.tagName.toLowerCase();\r\n    }\r\n\r\n    this.dispatch((instance) => {\r\n      let isKeyboard =\r\n        event.target === instance.keyboardDOM || (event.target && instance.keyboardDOM.contains(event.target));\r\n\r\n      /**\r\n       * If syncInstanceInputs option is enabled, make isKeyboard match any instance\r\n       * not just the current one\r\n       */\r\n      if (this.options.syncInstanceInputs && Array.isArray(event.path)) {\r\n        isKeyboard = event.path.some((item: HTMLElement) => item?.hasAttribute?.(\"data-skInstance\"));\r\n      }\r\n\r\n      if (\r\n        (targetTagName === \"textarea\" ||\r\n          (targetTagName === \"input\" && [\"text\", \"search\", \"url\", \"tel\", \"password\"].includes(event.target.type))) &&\r\n        !instance.options.disableCaretPositioning\r\n      ) {\r\n        /**\r\n         * Tracks current cursor position\r\n         * As keys are pressed, text will be added/removed at that position within the input.\r\n         */\r\n        let selectionStart = event.target.selectionStart;\r\n        let selectionEnd = event.target.selectionEnd;\r\n\r\n        if (instance.options.rtl) {\r\n          selectionStart = instance.utilities.getRtlOffset(selectionStart, instance.getInput());\r\n          selectionEnd = instance.utilities.getRtlOffset(selectionEnd, instance.getInput());\r\n        }\r\n\r\n        instance.setCaretPosition(selectionStart, selectionEnd);\r\n\r\n        /**\r\n         * Tracking current input in order to handle caret positioning edge cases\r\n         */\r\n        instance.activeInputElement = event.target;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(\r\n            \"Caret at: \",\r\n            instance.getCaretPosition(),\r\n            instance.getCaretPositionEnd(),\r\n            event && event.target.tagName.toLowerCase(),\r\n            `(${instance.keyboardDOMClass})`,\r\n            event?.type\r\n          );\r\n        }\r\n      } else if ((instance.options.disableCaretPositioning || !isKeyboard) && event?.type !== \"selectionchange\") {\r\n        /**\r\n         * If we toggled off disableCaretPositioning, we must ensure caretPosition doesn't persist once reactivated.\r\n         */\r\n        instance.setCaretPosition(null);\r\n\r\n        /**\r\n         * Resetting activeInputElement\r\n         */\r\n        instance.activeInputElement = null;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(`Caret position reset due to \"${event?.type}\" event`, event);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute an operation on each button\r\n   */\r\n  recurseButtons(fn: any): void {\r\n    if (!fn) return;\r\n\r\n    Object.keys(this.buttonElements).forEach((buttonName) => this.buttonElements[buttonName].forEach(fn));\r\n  }\r\n\r\n  /**\r\n   * Destroy keyboard listeners and DOM elements\r\n   */\r\n  destroy(): void {\r\n    if (this.options.debug) console.log(`Destroying simple-keyboard instance: ${this.currentInstanceName}`);\r\n\r\n    const { physicalKeyboardHighlightPreventDefault = false } = this.options;\r\n\r\n    /**\r\n     * Remove document listeners\r\n     */\r\n    document.removeEventListener(\"keyup\", this.handleKeyUp, physicalKeyboardHighlightPreventDefault);\r\n    document.removeEventListener(\"keydown\", this.handleKeyDown, physicalKeyboardHighlightPreventDefault);\r\n    document.removeEventListener(\"mouseup\", this.handleMouseUp);\r\n    document.removeEventListener(\"touchend\", this.handleTouchEnd);\r\n    document.removeEventListener(\"select\", this.handleSelect);\r\n\r\n    // selectionchange is causing caret update issues on Chrome\r\n    // https://github.com/hodgef/simple-keyboard/issues/2346\r\n    if (this.options.updateCaretOnSelectionChange) {\r\n      document.removeEventListener(\"selectionchange\", this.handleSelectionChange);\r\n    }\r\n\r\n    document.onpointerup = null;\r\n    document.ontouchend = null;\r\n    document.ontouchcancel = null;\r\n    document.onmouseup = null;\r\n\r\n    /**\r\n     * Remove buttons\r\n     */\r\n    const deleteButton = (buttonElement: KeyboardElement | null) => {\r\n      if (buttonElement) {\r\n        buttonElement.onpointerdown = null;\r\n        buttonElement.onpointerup = null;\r\n        buttonElement.onpointercancel = null;\r\n        buttonElement.ontouchstart = null;\r\n        buttonElement.ontouchend = null;\r\n        buttonElement.ontouchcancel = null;\r\n        buttonElement.onclick = null;\r\n        buttonElement.onmousedown = null;\r\n        buttonElement.onmouseup = null;\r\n\r\n        buttonElement.remove();\r\n        buttonElement = null;\r\n      }\r\n    };\r\n\r\n    this.recurseButtons(deleteButton);\r\n\r\n    /**\r\n     * Remove wrapper events\r\n     */\r\n    this.keyboardDOM.onpointerdown = null;\r\n    this.keyboardDOM.ontouchstart = null;\r\n    this.keyboardDOM.onmousedown = null;\r\n\r\n    /**\r\n     * Clearing keyboard rows\r\n     */\r\n    this.resetRows();\r\n\r\n    /**\r\n     * Candidate box\r\n     */\r\n    if (this.candidateBox) {\r\n      this.candidateBox.destroy();\r\n      this.candidateBox = null;\r\n    }\r\n\r\n    /**\r\n     * Clearing activeInputElement\r\n     */\r\n    this.activeInputElement = null;\r\n\r\n    /**\r\n     * Removing instance attribute\r\n     */\r\n    this.keyboardDOM.removeAttribute(\"data-skInstance\");\r\n\r\n    /**\r\n     * Clearing keyboardDOM\r\n     */\r\n    this.keyboardDOM.innerHTML = \"\";\r\n\r\n    /**\r\n     * Remove instance\r\n     */\r\n    (window as SKWindow)[\"SimpleKeyboardInstances\"][this.currentInstanceName] = null;\r\n    delete (window as SKWindow)[\"SimpleKeyboardInstances\"][this.currentInstanceName];\r\n\r\n    /**\r\n     * Reset initialized flag\r\n     */\r\n    this.initialized = false;\r\n  }\r\n\r\n  /**\r\n   * Process buttonTheme option\r\n   */\r\n  getButtonThemeClasses(button: string): string[] {\r\n    const buttonTheme = this.options.buttonTheme;\r\n    let buttonClasses: string[] = [];\r\n\r\n    if (Array.isArray(buttonTheme)) {\r\n      buttonTheme.forEach((themeObj) => {\r\n        if (\r\n          themeObj &&\r\n          themeObj.class &&\r\n          typeof themeObj.class === \"string\" &&\r\n          themeObj.buttons &&\r\n          typeof themeObj.buttons === \"string\"\r\n        ) {\r\n          const themeObjClasses = themeObj.class.split(\" \");\r\n          const themeObjButtons = themeObj.buttons.split(\" \");\r\n\r\n          if (themeObjButtons.includes(button)) {\r\n            buttonClasses = [...buttonClasses, ...themeObjClasses];\r\n          }\r\n        } else {\r\n          console.warn(`Incorrect \"buttonTheme\". Please check the documentation.`, themeObj);\r\n        }\r\n      });\r\n    }\r\n\r\n    return buttonClasses;\r\n  }\r\n\r\n  /**\r\n   * Process buttonAttributes option\r\n   */\r\n  setDOMButtonAttributes(button: string, callback: any): void {\r\n    const buttonAttributes = this.options.buttonAttributes;\r\n\r\n    if (Array.isArray(buttonAttributes)) {\r\n      buttonAttributes.forEach((attrObj) => {\r\n        if (\r\n          attrObj.attribute &&\r\n          typeof attrObj.attribute === \"string\" &&\r\n          attrObj.value &&\r\n          typeof attrObj.value === \"string\" &&\r\n          attrObj.buttons &&\r\n          typeof attrObj.buttons === \"string\"\r\n        ) {\r\n          const attrObjButtons = attrObj.buttons.split(\" \");\r\n\r\n          if (attrObjButtons.includes(button)) {\r\n            callback(attrObj.attribute, attrObj.value);\r\n          }\r\n        } else {\r\n          console.warn(`Incorrect \"buttonAttributes\". Please check the documentation.`, attrObj);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onTouchDeviceDetected() {\r\n    /**\r\n     * Processing autoTouchEvents\r\n     */\r\n    this.processAutoTouchEvents();\r\n\r\n    /**\r\n     * Disabling contextual window on touch devices\r\n     */\r\n    this.disableContextualWindow();\r\n  }\r\n\r\n  /**\r\n   * Disabling contextual window for hg-button\r\n   */\r\n  /* istanbul ignore next */\r\n  disableContextualWindow() {\r\n    window.oncontextmenu = (event: KeyboardHandlerEvent) => {\r\n      if (event.target.classList.contains(\"hg-button\")) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process autoTouchEvents option\r\n   */\r\n  processAutoTouchEvents() {\r\n    if (this.options.autoUseTouchEvents) {\r\n      this.options.useTouchEvents = true;\r\n\r\n      if (this.options.debug) {\r\n        console.log(`autoUseTouchEvents: Touch device detected, useTouchEvents enabled.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n   */\r\n  onInit() {\r\n    if (this.options.debug) {\r\n      console.log(`${this.keyboardDOMClass} Initialized`);\r\n    }\r\n\r\n    /**\r\n     * setEventListeners\r\n     */\r\n    this.setEventListeners();\r\n\r\n    if (typeof this.options.onInit === \"function\") this.options.onInit(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeFirstRender() {\r\n    /**\r\n     * Performing actions when touch device detected\r\n     */\r\n    if (this.utilities.isTouchDevice()) {\r\n      this.onTouchDeviceDetected();\r\n    }\r\n\r\n    if (typeof this.options.beforeFirstRender === \"function\") this.options.beforeFirstRender(this);\r\n\r\n    /**\r\n     * Notify about PointerEvents usage\r\n     */\r\n    if (\r\n      this.isFirstKeyboardInstance &&\r\n      this.utilities.pointerEventsSupported() &&\r\n      !this.options.useTouchEvents &&\r\n      !this.options.useMouseEvents\r\n    ) {\r\n      if (this.options.debug) {\r\n        console.log(\"Using PointerEvents as it is supported by this browser\");\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Notify about touch events usage\r\n     */\r\n    if (this.options.useTouchEvents) {\r\n      if (this.options.debug) {\r\n        console.log(\"useTouchEvents has been enabled. Only touch events will be used.\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeRender() {\r\n    if (typeof this.options.beforeRender === \"function\") this.options.beforeRender(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n   */\r\n  onRender() {\r\n    if (typeof this.options.onRender === \"function\") this.options.onRender(this);\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once all modules have been loaded\r\n   */\r\n  onModulesLoaded() {\r\n    if (typeof this.options.onModulesLoaded === \"function\") this.options.onModulesLoaded(this);\r\n  }\r\n\r\n  /**\r\n   * Register module\r\n   */\r\n  registerModule = (name: string, initCallback: any) => {\r\n    if (!this.modules[name]) this.modules[name] = {};\r\n\r\n    initCallback(this.modules[name]);\r\n  };\r\n\r\n  /**\r\n   * Load modules\r\n   */\r\n  loadModules() {\r\n    if (Array.isArray(this.options.modules)) {\r\n      this.options.modules.forEach((KeyboardModule) => {\r\n        const keyboardModule = new KeyboardModule(this);\r\n        keyboardModule.init && keyboardModule.init(this);\r\n      });\r\n\r\n      this.keyboardPluginClasses = \"modules-loaded\";\r\n\r\n      this.render();\r\n      this.onModulesLoaded();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get module prop\r\n   */\r\n  getModuleProp(name: string, prop: string) {\r\n    if (!this.modules[name]) return false;\r\n\r\n    return this.modules[name][prop];\r\n  }\r\n\r\n  /**\r\n   * getModulesList\r\n   */\r\n  getModulesList() {\r\n    return Object.keys(this.modules);\r\n  }\r\n\r\n  /**\r\n   * Parse Row DOM containers\r\n   */\r\n  parseRowDOMContainers(\r\n    rowDOM: HTMLDivElement,\r\n    rowIndex: number,\r\n    containerStartIndexes: number[],\r\n    containerEndIndexes: number[]\r\n  ) {\r\n    const rowDOMArray = Array.from(rowDOM.children);\r\n    let removedElements = 0;\r\n\r\n    if (rowDOMArray.length) {\r\n      containerStartIndexes.forEach((startIndex, arrIndex) => {\r\n        const endIndex = containerEndIndexes[arrIndex];\r\n\r\n        /**\r\n         * If there exists a respective end index\r\n         * if end index comes after start index\r\n         */\r\n        if (!endIndex || !(endIndex > startIndex)) {\r\n          return false;\r\n        }\r\n\r\n        /**\r\n         * Updated startIndex, endIndex\r\n         * This is since the removal of buttons to place a single button container\r\n         * results in a modified array size\r\n         */\r\n        const updated_startIndex = startIndex - removedElements;\r\n        const updated_endIndex = endIndex - removedElements;\r\n\r\n        /**\r\n         * Create button container\r\n         */\r\n        const containerDOM = document.createElement(\"div\");\r\n        containerDOM.className += \"hg-button-container\";\r\n        const containerUID = `${this.options.layoutName}-r${rowIndex}c${arrIndex}`;\r\n        containerDOM.setAttribute(\"data-skUID\", containerUID);\r\n\r\n        /**\r\n         * Taking elements due to be inserted into container\r\n         */\r\n        const containedElements = rowDOMArray.splice(updated_startIndex, updated_endIndex - updated_startIndex + 1);\r\n        removedElements += updated_endIndex - updated_startIndex;\r\n\r\n        /**\r\n         * Inserting elements to container\r\n         */\r\n        containedElements.forEach((element) => containerDOM.appendChild(element));\r\n\r\n        /**\r\n         * Adding container at correct position within rowDOMArray\r\n         */\r\n        rowDOMArray.splice(updated_startIndex, 0, containerDOM);\r\n\r\n        /**\r\n         * Clearing old rowDOM children structure\r\n         */\r\n        rowDOM.innerHTML = \"\";\r\n\r\n        /**\r\n         * Appending rowDOM new children list\r\n         */\r\n        rowDOMArray.forEach((element) => rowDOM.appendChild(element));\r\n\r\n        if (this.options.debug) {\r\n          console.log(\"rowDOMContainer\", containedElements, updated_startIndex, updated_endIndex, removedElements + 1);\r\n        }\r\n      });\r\n    }\r\n\r\n    return rowDOM;\r\n  }\r\n\r\n  /**\r\n   * getKeyboardClassString\r\n   */\r\n  getKeyboardClassString = (...baseDOMClasses: any[]) => {\r\n    const keyboardClasses = [this.keyboardDOMClass, ...baseDOMClasses].filter((DOMClass) => !!DOMClass);\r\n\r\n    return keyboardClasses.join(\" \");\r\n  };\r\n\r\n  /**\r\n   * Renders rows and buttons as per options\r\n   */\r\n  render() {\r\n    /**\r\n     * Clear keyboard\r\n     */\r\n    this.resetRows();\r\n\r\n    /**\r\n     * Calling beforeFirstRender\r\n     */\r\n    if (!this.initialized) {\r\n      this.beforeFirstRender();\r\n    }\r\n\r\n    /**\r\n     * Calling beforeRender\r\n     */\r\n    this.beforeRender();\r\n\r\n    const layoutClass = `hg-layout-${this.options.layoutName}`;\r\n    const layout = this.options.layout || getDefaultLayout();\r\n    const useTouchEvents = this.options.useTouchEvents || false;\r\n    const useTouchEventsClass = useTouchEvents ? \"hg-touch-events\" : \"\";\r\n    const useMouseEvents = this.options.useMouseEvents || false;\r\n    const disableRowButtonContainers = this.options.disableRowButtonContainers;\r\n\r\n    /**\r\n     * Adding themeClass, layoutClass to keyboardDOM\r\n     */\r\n    this.keyboardDOM.className = this.getKeyboardClassString(\r\n      this.options.theme,\r\n      layoutClass,\r\n      this.keyboardPluginClasses,\r\n      useTouchEventsClass\r\n    );\r\n\r\n    /**\r\n     * Adding keyboard identifier\r\n     */\r\n    this.keyboardDOM.setAttribute(\"data-skInstance\", this.currentInstanceName);\r\n\r\n    /**\r\n     * Create row wrapper\r\n     */\r\n    this.keyboardRowsDOM = document.createElement(\"div\");\r\n    this.keyboardRowsDOM.className = \"hg-rows\";\r\n\r\n    /**\r\n     * Iterating through each row\r\n     */\r\n    layout[this.options.layoutName || this.defaultName].forEach((row: string, rIndex: number) => {\r\n      let rowArray = row.split(\" \");\r\n\r\n      /**\r\n       * Enforce excludeFromLayout\r\n       */\r\n      if (\r\n        this.options.excludeFromLayout &&\r\n        this.options.excludeFromLayout[this.options.layoutName || this.defaultName]\r\n      ) {\r\n        rowArray = rowArray.filter(\r\n          (buttonName) =>\r\n            this.options.excludeFromLayout &&\r\n            !this.options.excludeFromLayout[this.options.layoutName || this.defaultName].includes(buttonName)\r\n        );\r\n      }\r\n\r\n      /**\r\n       * Creating empty row\r\n       */\r\n      let rowDOM = document.createElement(\"div\");\r\n      rowDOM.className += \"hg-row\";\r\n\r\n      /**\r\n       * Tracking container indicators in rows\r\n       */\r\n      const containerStartIndexes: number[] = [];\r\n      const containerEndIndexes: number[] = [];\r\n\r\n      /**\r\n       * Iterating through each button in row\r\n       */\r\n      rowArray.forEach((button, bIndex) => {\r\n        /**\r\n         * Check if button has a container indicator\r\n         */\r\n        const buttonHasContainerStart =\r\n          !disableRowButtonContainers && typeof button === \"string\" && button.length > 1 && button.indexOf(\"[\") === 0;\r\n\r\n        const buttonHasContainerEnd =\r\n          !disableRowButtonContainers &&\r\n          typeof button === \"string\" &&\r\n          button.length > 1 &&\r\n          button.indexOf(\"]\") === button.length - 1;\r\n\r\n        /**\r\n         * Save container start index, if applicable\r\n         */\r\n        if (buttonHasContainerStart) {\r\n          containerStartIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\[/g, \"\");\r\n        }\r\n\r\n        if (buttonHasContainerEnd) {\r\n          containerEndIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\]/g, \"\");\r\n        }\r\n\r\n        /**\r\n         * Processing button options\r\n         */\r\n        const fctBtnClass = this.utilities.getButtonClass(button);\r\n        const buttonDisplayName = this.utilities.getButtonDisplayName(\r\n          button,\r\n          this.options.display,\r\n          this.options.mergeDisplay\r\n        );\r\n\r\n        /**\r\n         * Creating button\r\n         */\r\n        const buttonType = this.options.useButtonTag ? \"button\" : \"div\";\r\n        const buttonDOM = document.createElement(buttonType);\r\n        buttonDOM.className += `hg-button ${fctBtnClass}`;\r\n\r\n        /**\r\n         * Adding buttonTheme\r\n         */\r\n        buttonDOM.classList.add(...this.getButtonThemeClasses(button));\r\n\r\n        /**\r\n         * Adding buttonAttributes\r\n         */\r\n        this.setDOMButtonAttributes(button, (attribute: string, value: string) => {\r\n          buttonDOM.setAttribute(attribute, value);\r\n        });\r\n\r\n        this.activeButtonClass = \"hg-activeButton\";\r\n\r\n        /**\r\n         * Handle button click event\r\n         */\r\n        /* istanbul ignore next */\r\n        if (this.utilities.pointerEventsSupported() && !useTouchEvents && !useMouseEvents) {\r\n          /**\r\n           * Handle PointerEvents\r\n           */\r\n          buttonDOM.onpointerdown = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonClicked(button, e);\r\n            this.handleButtonMouseDown(button, e);\r\n          };\r\n          buttonDOM.onpointerup = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n          buttonDOM.onpointercancel = (e: KeyboardHandlerEvent) => {\r\n            this.handleButtonMouseUp(button, e);\r\n          };\r\n        } else {\r\n          /**\r\n           * Fallback for browsers not supporting PointerEvents\r\n           */\r\n          if (useTouchEvents) {\r\n            /**\r\n             * Handle touch events\r\n             */\r\n            buttonDOM.ontouchstart = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonClicked(button, e);\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.ontouchend = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n            buttonDOM.ontouchcancel = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          } else {\r\n            /**\r\n             * Handle mouse events\r\n             */\r\n            buttonDOM.onclick = (e: KeyboardHandlerEvent) => {\r\n              this.setMouseHold(false);\r\n              /**\r\n               * Fire button handler in onclick for compatibility reasons\r\n               * This fires handler before onKeyReleased, therefore when that option is set we will fire the handler\r\n               * in onmousedown instead\r\n               */\r\n              if (\r\n                typeof this.options.onKeyReleased !== \"function\" &&\r\n                !(this.options.useMouseEvents && this.options.clickOnMouseDown)\r\n              ) {\r\n                this.handleButtonClicked(button, e);\r\n              }\r\n            };\r\n            buttonDOM.onmousedown = (e: KeyboardHandlerEvent) => {\r\n              /**\r\n               * Fire button handler for onKeyReleased use-case\r\n               */\r\n              if (\r\n                (typeof this.options.onKeyReleased === \"function\" ||\r\n                  (this.options.useMouseEvents && this.options.clickOnMouseDown)) &&\r\n                !this.isMouseHold\r\n              ) {\r\n                this.handleButtonClicked(button, e);\r\n              }\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.onmouseup = (e: KeyboardHandlerEvent) => {\r\n              this.handleButtonMouseUp(button, e);\r\n            };\r\n          }\r\n        }\r\n\r\n        /**\r\n         * Adding identifier\r\n         */\r\n        buttonDOM.setAttribute(\"data-skBtn\", button);\r\n\r\n        /**\r\n         * Adding unique id\r\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\r\n         */\r\n        const buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\r\n        buttonDOM.setAttribute(\"data-skBtnUID\", buttonUID);\r\n\r\n        /**\r\n         * Adding button label to button\r\n         */\r\n        const buttonSpanDOM = document.createElement(\"span\");\r\n        buttonSpanDOM.innerHTML = buttonDisplayName;\r\n        buttonDOM.appendChild(buttonSpanDOM);\r\n\r\n        /**\r\n         * Adding to buttonElements\r\n         */\r\n        if (!this.buttonElements[button]) this.buttonElements[button] = [];\r\n\r\n        this.buttonElements[button].push(buttonDOM);\r\n\r\n        /**\r\n         * Appending button to row\r\n         */\r\n        rowDOM.appendChild(buttonDOM);\r\n      });\r\n\r\n      /**\r\n       * Parse containers in row\r\n       */\r\n      rowDOM = this.parseRowDOMContainers(rowDOM, rIndex, containerStartIndexes, containerEndIndexes);\r\n\r\n      /**\r\n       * Appending row to hg-rows\r\n       */\r\n      this.keyboardRowsDOM.appendChild(rowDOM);\r\n    });\r\n\r\n    /**\r\n     * Appending row to keyboard\r\n     */\r\n    this.keyboardDOM.appendChild(this.keyboardRowsDOM);\r\n\r\n    /**\r\n     * Calling onRender\r\n     */\r\n    this.onRender();\r\n\r\n    if (!this.initialized) {\r\n      /**\r\n       * Ensures that onInit and beforeFirstRender are only called once per instantiation\r\n       */\r\n      this.initialized = true;\r\n\r\n      /**\r\n       * Handling parent events\r\n       */\r\n      /* istanbul ignore next */\r\n      if (this.utilities.pointerEventsSupported() && !useTouchEvents && !useMouseEvents) {\r\n        document.onpointerup = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        this.keyboardDOM.onpointerdown = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      } else if (useTouchEvents) {\r\n        /**\r\n         * Handling ontouchend, ontouchcancel\r\n         */\r\n        document.ontouchend = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        document.ontouchcancel = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n\r\n        this.keyboardDOM.ontouchstart = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      } else if (!useTouchEvents) {\r\n        /**\r\n         * Handling mouseup\r\n         */\r\n        document.onmouseup = (e: KeyboardHandlerEvent) => this.handleButtonMouseUp(undefined, e);\r\n        this.keyboardDOM.onmousedown = (e: KeyboardHandlerEvent) => this.handleKeyboardContainerMouseDown(e);\r\n      }\r\n\r\n      /**\r\n       * Calling onInit\r\n       */\r\n      this.onInit();\r\n    }\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboard;\r\n","import SimpleKeyboard from \"./components/Keyboard\";\r\nexport { SimpleKeyboard };\r\nexport default SimpleKeyboard;\r\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Utilities","_ref","getOptions","getCaretPosition","getCaretPositionEnd","dispatch","_classCallCheck","_defineProperty","button","length","bindMethods","includes","buttonTypeClass","getButtonType","buttonWithoutBraces","replace","buttonNormalized","concat","display","arguments","undefined","assign","getDefaultDisplay","input","caretPos","caretPosEnd","moveCaret","options","commonParams","output","removeAt","apply","removeForwardsAt","addStringAt","tabCharOnTab","newLineOnEnter","Number","isInteger","debug","console","log","minus","newCaretPos","updateCaretPosAction","instance","setCaretPosition","caretPosition","source","str","position","positionEnd","slice","join","isMaxLengthReached","updateCaretPos","emojiMatchedReg","substring","match","substr","inputObj","updatedInput","maxLength","currentInput","inputName","condition","maxLengthReached","_typeof","Boolean","window","navigator","maxTouchPoints","PointerEvent","toLowerCase","trim","split","reduce","word","toUpperCase","arr","size","_toConsumableArray","Array","Math","ceil","map","_","i","index","newIndex","startMarkerIndex","indexOf","myClass","_step","_iterator","_createForOfIteratorHelper","getOwnPropertyNames","s","n","done","myMethod","bind","err","e","f","PhysicalKeyboard","_this","altKey","ctrlKey","shiftKey","code","keyCodeToKey","keyCode","layout","layoutJSON","mapLayoutToEventCodes","extractAndPadLayout","default","shift","shiftActive","capslockActive","buttonPressed","getSimpleKeyboardLayoutKey","buttonDOM","buttonName","standardButtonPressed","getButtonElement","functionButtonPressed","_buttonDOM$","_buttonDOM$$onpointer","_buttonDOM","_buttonDOM$onpointerd","applyButtonStyle","buttonElement","style","background","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","isArray","forEach","physicalKeyboardHighlightPress","physicalKeyboardHighlightPressUsePointerEvents","onpointerdown","physicalKeyboardHighlightPressUseClick","_buttonDOM$2","click","handleButtonClicked","_buttonDOM$3","_buttonDOM$3$onpointe","_buttonDOM$onpointeru","removeAttribute","onpointerup","ShiftLeft","ShiftRight","ControlLeft","ControlRight","AltLeft","AltRight","MetaLeft","MetaRight","Backspace","CapsLock","Enter","Tab","toString","normal","qwertyRowLengths","processedLayout","_i","_arr","type","rows","row","push","mappedLayout","qwertyRows","rowIndex","colIndex","_layout$default$rowIn","_layout$shift$rowInde","eventCode","normalKey","CandidateBox","utilities","pageSize","layoutCandidatesPageSize","candidateBoxElement","remove","pageIndex","_ref2","candidateValue","targetElement","onSelect","candidateListPages","chunkArray","renderPage","nbPages","onItemSelected","selectedCandidate","destroy","_ref3","_this$candidateBoxEle","_this2","document","createElement","className","candidateListULElement","candidateListItem","_this2$options$displa","candidateListLIElement","getMouseEvent","mouseEvent","useTouchEvents","TouchEvent","MouseEvent","innerHTML","ontouchstart","onclick","appendChild","isPrevBtnElementActive","prevBtnElement","classList","add","prevBtnElementClickAction","isNextBtnElementActive","nextBtnElement","nextBtnElementClickAction","prepend","SimpleKeyboard","selectorOrOptions","keyboardOptions","keyboardDOMClass","keyboardDOM","querySelector","HTMLDivElement","warn","Error","caretPositionEnd","name","initCallback","modules","_len","baseDOMClasses","_key","filter","DOMClass","_this$handleParams","handleParams","_this$handleParams$op","_objectSpread","layoutName","theme","preventMouseDownDefault","enableLayoutCandidates","excludeFromLayout","keyboardPluginClasses","_this$options$inputNa","defaultName","buttonElements","currentInstanceName","camelCase","allKeyboardInstances","keyboardInstanceNames","keys","isFirstKeyboardInstance","physicalKeyboard","candidateBox","render","loadModules","endPosition","_this$options","layoutCandidatesObj","layoutCandidates","layoutCandidatesCaseSensitiveMatch","layoutCandidate","inputSubstr","regexp","RegExp","escapeRegex","matchAll","candidateKey","sort","a","b","_this3","show","_this3$options","disableCandidateNormalization","enableLayoutCandidatesKeyPress","candidateStr","normalize","beforeInputUpdate","getInput","initialCaretPosition","newInputSubstr","newInput","caretPositionDiff","newCaretPosition","setInput","onKeyPress","onChange","onChangeAll","getAllInputs","_this$options2","_this$options2$inputN","getUpdatedInput","isStandardButton","activeInputElement","setSelectionRange","inputPattern","inputPatternIsValid","handleMaxLength","newInputValue","syncInstanceInputs","target","_this$candidateBox","_this$getInputCandida","getInputCandidates","showCandidatesBox","isMouseHold","_this4","preventDefault","stopMouseDownPropagation","stopPropagation","activeButtonClass","holdInteractionTimeout","clearTimeout","holdTimeout","setMouseHold","disableButtonHold","setTimeout","getMouseHold","handleButtonHold","_this5","preventMouseUpDefault","stopMouseUpPropagation","contains","recurseButtons","onKeyReleased","_this6","_this7","replaceInput","skipSync","rtl","_this8","changedOptions","onSetOptions","newOptions","_this9","optionName","JSON","stringify","keyboardRowsDOM","setAttribute","callback","buttons","_this10","classNameItem","buttonTheme","classNameFound","buttonThemeArray","class","_this11","_this11$options","_buttonTheme","_this11$options$butto","filteredButtonArray","item","splice","buttonArr","inputVal","inputPatternRaw","didInputMatch","test","_this12","_this$options$physica","physicalKeyboardHighlightPreventDefault","tabIndex","outline","addEventListener","event","handleKeyDown","handleKeyUp","activeElement","focus","handleMouseUp","handleTouchEnd","updateCaretOnSelectionChange","handleSelectionChange","handleSelect","caretEventHandler","physicalKeyboardHighlight","handleHighlightKeyUp","handleHighlightKeyDown","userAgent","targetTagName","_this13","tagName","isKeyboard","path","some","_item$hasAttribute","hasAttribute","disableCaretPositioning","selectionStart","selectionEnd","getRtlOffset","fn","_this14","_this$options$physica2","removeEventListener","ontouchend","ontouchcancel","onmouseup","onpointercancel","onmousedown","resetRows","initialized","buttonClasses","themeObj","themeObjClasses","buttonAttributes","attrObj","attribute","processAutoTouchEvents","disableContextualWindow","oncontextmenu","autoUseTouchEvents","setEventListeners","onInit","isTouchDevice","onTouchDeviceDetected","beforeFirstRender","pointerEventsSupported","useMouseEvents","beforeRender","onRender","onModulesLoaded","_this15","KeyboardModule","keyboardModule","init","rowDOM","containerStartIndexes","containerEndIndexes","_this16","rowDOMArray","from","children","removedElements","startIndex","arrIndex","endIndex","updated_startIndex","updated_endIndex","containerDOM","containerUID","containedElements","element","_this17","layoutClass","useTouchEventsClass","disableRowButtonContainers","getKeyboardClassString","rIndex","rowArray","bIndex","_buttonDOM$classList","buttonHasContainerStart","buttonHasContainerEnd","fctBtnClass","getButtonClass","buttonDisplayName","getButtonDisplayName","mergeDisplay","buttonType","useButtonTag","getButtonThemeClasses","setDOMButtonAttributes","handleButtonMouseDown","handleButtonMouseUp","clickOnMouseDown","buttonUID","buttonSpanDOM","parseRowDOMContainers","handleKeyboardContainerMouseDown"],"sourceRoot":""}